
IOT_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007988  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b0  08007b38  08007b38  00008b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081e8  080081e8  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  080081e8  080081e8  000091e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081f0  080081f0  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081f0  080081f0  000091f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081f4  080081f4  000091f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080081f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1dc  2**0
                  CONTENTS
 10 .bss          00000478  200001dc  200001dc  0000a1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000654  20000654  0000a1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6ea  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6f  00000000  00000000  000198f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  0001b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c64  00000000  00000000  0001c810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024bcd  00000000  00000000  0001d474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001353e  00000000  00000000  00042041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000def83  00000000  00000000  0005557f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134502  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054ac  00000000  00000000  00134548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001399f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007b20 	.word	0x08007b20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08007b20 	.word	0x08007b20

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <Set_Pin_Output>:
		HAL_Delay(50);

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);

}
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_Pin;
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Chế độ Output Push-Pull
 8000f78:	2301      	movs	r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;         // Không sử dụng Pull-Up/Down
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Tốc độ thấp
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f001 f972 	bl	8002274 <HAL_GPIO_Init>
}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_Pin;
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;     // Chế độ Input
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;         // Không sử dụng Pull-Up/Down
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f001 f954 	bl	8002274 <HAL_GPIO_Init>
}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <Delay_us>:
void Delay_us(uint16_t us)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);//Reset timer
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <Delay_us+0x30>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<us);//Doi
 8000fe6:	bf00      	nop
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <Delay_us+0x30>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d3f9      	bcc.n	8000fe8 <Delay_us+0x14>
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	2000024c 	.word	0x2000024c

08001008 <DHT22_Start>:
void DHT22_Start(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	Set_Pin_Output(GPIOB, GPIO_PIN_5); // set the pin as output
 800100c:	2120      	movs	r1, #32
 800100e:	480d      	ldr	r0, [pc, #52]	@ (8001044 <DHT22_Start+0x3c>)
 8001010:	f7ff ffa2 	bl	8000f58 <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2120      	movs	r1, #32
 8001018:	480a      	ldr	r0, [pc, #40]	@ (8001044 <DHT22_Start+0x3c>)
 800101a:	f001 faef 	bl	80025fc <HAL_GPIO_WritePin>
	Delay_us(1200);//Delay 1.2ms for SHT reset
 800101e:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001022:	f7ff ffd7 	bl	8000fd4 <Delay_us>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, GPIO_PIN_SET);   // pull the pin high
 8001026:	2201      	movs	r2, #1
 8001028:	2120      	movs	r1, #32
 800102a:	4806      	ldr	r0, [pc, #24]	@ (8001044 <DHT22_Start+0x3c>)
 800102c:	f001 fae6 	bl	80025fc <HAL_GPIO_WritePin>
	Delay_us(30);   // wait for 30us
 8001030:	201e      	movs	r0, #30
 8001032:	f7ff ffcf 	bl	8000fd4 <Delay_us>
	Set_Pin_Input(GPIOB, GPIO_PIN_5);   // set as input
 8001036:	2120      	movs	r1, #32
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <DHT22_Start+0x3c>)
 800103a:	f7ff ffad 	bl	8000f98 <Set_Pin_Input>
	//Start receive data from SHT22
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40020400 	.word	0x40020400

08001048 <DHT22_Check_Response>:
uint8_t DHT22_Check_Response (void)//Receive data <1bit>
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
	Set_Pin_Input(GPIOB, GPIO_PIN_5);   // set as input
 800104e:	2120      	movs	r1, #32
 8001050:	4815      	ldr	r0, [pc, #84]	@ (80010a8 <DHT22_Check_Response+0x60>)
 8001052:	f7ff ffa1 	bl	8000f98 <Set_Pin_Input>
	uint8_t Response = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	71fb      	strb	r3, [r7, #7]
	Delay_us(40);  // wait for 40us
 800105a:	2028      	movs	r0, #40	@ 0x28
 800105c:	f7ff ffba 	bl	8000fd4 <Delay_us>
	if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5))) // if the pin is low
 8001060:	2120      	movs	r1, #32
 8001062:	4811      	ldr	r0, [pc, #68]	@ (80010a8 <DHT22_Check_Response+0x60>)
 8001064:	f001 fab2 	bl	80025cc <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10e      	bne.n	800108c <DHT22_Check_Response+0x44>
	{
		Delay_us(80);   // wait for 80us
 800106e:	2050      	movs	r0, #80	@ 0x50
 8001070:	f7ff ffb0 	bl	8000fd4 <Delay_us>
		if ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5))) Response = 1;
 8001074:	2120      	movs	r1, #32
 8001076:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <DHT22_Check_Response+0x60>)
 8001078:	f001 faa8 	bl	80025cc <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <DHT22_Check_Response+0x40>
 8001082:	2301      	movs	r3, #1
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	e001      	b.n	800108c <DHT22_Check_Response+0x44>
		// if the pin is high, response is ok
		else Response = -1;
 8001088:	23ff      	movs	r3, #255	@ 0xff
 800108a:	71fb      	strb	r3, [r7, #7]
		//we need 40+80 = 120us to wait for sensor response that it readys
	}
	while ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)));   // wait for the pin to go low
 800108c:	bf00      	nop
 800108e:	2120      	movs	r1, #32
 8001090:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <DHT22_Check_Response+0x60>)
 8001092:	f001 fa9b 	bl	80025cc <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f8      	bne.n	800108e <DHT22_Check_Response+0x46>
	return Response;
 800109c:	79fb      	ldrb	r3, [r7, #7]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020400 	.word	0x40020400

080010ac <DHT22_Read>:
uint8_t DHT22_Read (void)// We need 40bit for one-wire, so in loop, we use i from 0->7 for 1byte
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	71bb      	strb	r3, [r7, #6]
 80010b6:	e037      	b.n	8001128 <DHT22_Read+0x7c>
	{
		//after response, sht22 start transmit 1bit, sht22 put the pin high (by res 10k-vcc)
		while (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)));   // wait for the pin to go high
 80010b8:	bf00      	nop
 80010ba:	2120      	movs	r1, #32
 80010bc:	481e      	ldr	r0, [pc, #120]	@ (8001138 <DHT22_Read+0x8c>)
 80010be:	f001 fa85 	bl	80025cc <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f8      	beq.n	80010ba <DHT22_Read+0xe>
		Delay_us(40);   // wait for 40 us
 80010c8:	2028      	movs	r0, #40	@ 0x28
 80010ca:	f7ff ff83 	bl	8000fd4 <Delay_us>

		if (!(HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)))   // if the pin is low
 80010ce:	2120      	movs	r1, #32
 80010d0:	4819      	ldr	r0, [pc, #100]	@ (8001138 <DHT22_Read+0x8c>)
 80010d2:	f001 fa7b 	bl	80025cc <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10e      	bne.n	80010fa <DHT22_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2201      	movs	r2, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	4013      	ands	r3, r2
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	e00b      	b.n	8001112 <DHT22_Read+0x66>

		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	f1c3 0307 	rsb	r3, r3, #7
 8001100:	2201      	movs	r2, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	b25a      	sxtb	r2, r3
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	4313      	orrs	r3, r2
 800110e:	b25b      	sxtb	r3, r3
 8001110:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5)));  // wait for the pin to go low
 8001112:	bf00      	nop
 8001114:	2120      	movs	r1, #32
 8001116:	4808      	ldr	r0, [pc, #32]	@ (8001138 <DHT22_Read+0x8c>)
 8001118:	f001 fa58 	bl	80025cc <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f8      	bne.n	8001114 <DHT22_Read+0x68>
	for (j=0;j<8;j++)
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	3301      	adds	r3, #1
 8001126:	71bb      	strb	r3, [r7, #6]
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	2b07      	cmp	r3, #7
 800112c:	d9c4      	bls.n	80010b8 <DHT22_Read+0xc>
	}

	return i;
 800112e:	79fb      	ldrb	r3, [r7, #7]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40020400 	.word	0x40020400
 800113c:	00000000 	.word	0x00000000

08001140 <DHT22>:
void DHT22()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	DHT22_Start();
 8001144:	f7ff ff60 	bl	8001008 <DHT22_Start>
	Presence = DHT22_Check_Response();
 8001148:	f7ff ff7e 	bl	8001048 <DHT22_Check_Response>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b33      	ldr	r3, [pc, #204]	@ (8001220 <DHT22+0xe0>)
 8001152:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT22_Read ();
 8001154:	f7ff ffaa 	bl	80010ac <DHT22_Read>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b31      	ldr	r3, [pc, #196]	@ (8001224 <DHT22+0xe4>)
 800115e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT22_Read ();
 8001160:	f7ff ffa4 	bl	80010ac <DHT22_Read>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b2f      	ldr	r3, [pc, #188]	@ (8001228 <DHT22+0xe8>)
 800116a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT22_Read ();
 800116c:	f7ff ff9e 	bl	80010ac <DHT22_Read>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b2d      	ldr	r3, [pc, #180]	@ (800122c <DHT22+0xec>)
 8001176:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT22_Read ();
 8001178:	f7ff ff98 	bl	80010ac <DHT22_Read>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b2b      	ldr	r3, [pc, #172]	@ (8001230 <DHT22+0xf0>)
 8001182:	701a      	strb	r2, [r3, #0]
	SUM = DHT22_Read();
 8001184:	f7ff ff92 	bl	80010ac <DHT22_Read>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <DHT22+0xf4>)
 800118e:	701a      	strb	r2, [r3, #0]

	TEMP = ((Temp_byte1<<8)|Temp_byte2);
 8001190:	4b26      	ldr	r3, [pc, #152]	@ (800122c <DHT22+0xec>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b25      	ldr	r3, [pc, #148]	@ (8001230 <DHT22+0xf0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <DHT22+0xf8>)
 80011a6:	801a      	strh	r2, [r3, #0]
	RH = ((Rh_byte1<<8)|Rh_byte2);
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <DHT22+0xe4>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <DHT22+0xe8>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <DHT22+0xfc>)
 80011be:	801a      	strh	r2, [r3, #0]

	TemperatureDHT = (float) (TEMP/10.2);
 80011c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <DHT22+0xf8>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9bd 	bl	8000544 <__aeabi_i2d>
 80011ca:	a313      	add	r3, pc, #76	@ (adr r3, 8001218 <DHT22+0xd8>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fb4c 	bl	800086c <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fcf4 	bl	8000bc8 <__aeabi_d2f>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a17      	ldr	r2, [pc, #92]	@ (8001240 <DHT22+0x100>)
 80011e4:	6013      	str	r3, [r2, #0]
	HumidityDHT = (float) (RH/10.5);
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <DHT22+0xfc>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9aa 	bl	8000544 <__aeabi_i2d>
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <DHT22+0x104>)
 80011f6:	f7ff fb39 	bl	800086c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fce1 	bl	8000bc8 <__aeabi_d2f>
 8001206:	4603      	mov	r3, r0
 8001208:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <DHT22+0x108>)
 800120a:	6013      	str	r3, [r2, #0]

	HAL_Delay(1000);
 800120c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001210:	f000 ff26 	bl	8002060 <HAL_Delay>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	66666666 	.word	0x66666666
 800121c:	40246666 	.word	0x40246666
 8001220:	200002dc 	.word	0x200002dc
 8001224:	200002dd 	.word	0x200002dd
 8001228:	200002de 	.word	0x200002de
 800122c:	200002df 	.word	0x200002df
 8001230:	200002e0 	.word	0x200002e0
 8001234:	200002e1 	.word	0x200002e1
 8001238:	200002e2 	.word	0x200002e2
 800123c:	200002e4 	.word	0x200002e4
 8001240:	200002e8 	.word	0x200002e8
 8001244:	40250000 	.word	0x40250000
 8001248:	200002ec 	.word	0x200002ec
 800124c:	00000000 	.word	0x00000000

08001250 <SHT40_ReadTemperatureHumidity>:



void SHT40_ReadTemperatureHumidity(float *temperature, float *humidity) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af02      	add	r7, sp, #8
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    uint8_t cmd = SHT40_MEASURE_CMD;
 800125a:	23fd      	movs	r3, #253	@ 0xfd
 800125c:	74fb      	strb	r3, [r7, #19]
    uint8_t data[6]; // 6 byte dữ liệu trả v�? (2 byte nhiệt độ, 1 byte CRC, 2 byte độ ẩm, 1 byte CRC)

    // Gửi lệnh đo
    HAL_I2C_Master_Transmit(&hi2c1, SHT40_ADDR, &cmd, 1, HAL_MAX_DELAY);
 800125e:	f107 0213 	add.w	r2, r7, #19
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	2188      	movs	r1, #136	@ 0x88
 800126c:	4844      	ldr	r0, [pc, #272]	@ (8001380 <SHT40_ReadTemperatureHumidity+0x130>)
 800126e:	f001 fb23 	bl	80028b8 <HAL_I2C_Master_Transmit>

    // �?ợi 10ms để cảm biến đo và trả v�? dữ liệu
    HAL_Delay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f000 fef4 	bl	8002060 <HAL_Delay>

    // �?�?c dữ liệu từ SHT40
    if (HAL_I2C_Master_Receive(&hi2c1, SHT40_ADDR, data, 6, HAL_MAX_DELAY) == HAL_OK) {
 8001278:	f107 020c 	add.w	r2, r7, #12
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2306      	movs	r3, #6
 8001284:	2188      	movs	r1, #136	@ 0x88
 8001286:	483e      	ldr	r0, [pc, #248]	@ (8001380 <SHT40_ReadTemperatureHumidity+0x130>)
 8001288:	f001 fc14 	bl	8002ab4 <HAL_I2C_Master_Receive>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d162      	bne.n	8001358 <SHT40_ReadTemperatureHumidity+0x108>
        // Chuyển đổi dữ liệu nhiệt độ
        uint16_t temp_raw = (data[0] << 8) | data[1];
 8001292:	7b3b      	ldrb	r3, [r7, #12]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21a      	sxth	r2, r3
 8001298:	7b7b      	ldrb	r3, [r7, #13]
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21b      	sxth	r3, r3
 80012a0:	82fb      	strh	r3, [r7, #22]
        *temperature = -45.0 + 175.0 * (float)temp_raw / 65535.0;
 80012a2:	8afb      	ldrh	r3, [r7, #22]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ac:	ee17 0a90 	vmov	r0, s15
 80012b0:	f7ff f95a 	bl	8000568 <__aeabi_f2d>
 80012b4:	a32e      	add	r3, pc, #184	@ (adr r3, 8001370 <SHT40_ReadTemperatureHumidity+0x120>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff f9ad 	bl	8000618 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	a32c      	add	r3, pc, #176	@ (adr r3, 8001378 <SHT40_ReadTemperatureHumidity+0x128>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff face 	bl	800086c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b29      	ldr	r3, [pc, #164]	@ (8001384 <SHT40_ReadTemperatureHumidity+0x134>)
 80012de:	f7fe ffe3 	bl	80002a8 <__aeabi_dsub>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc6d 	bl	8000bc8 <__aeabi_d2f>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	601a      	str	r2, [r3, #0]

        // Chuyển đổi dữ liệu độ ẩm
        uint16_t hum_raw = (data[3] << 8) | data[4];
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	7c3b      	ldrb	r3, [r7, #16]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	82bb      	strh	r3, [r7, #20]
        *humidity = -6.0 + 125.0 * (float)hum_raw / 65535.0;
 8001304:	8abb      	ldrh	r3, [r7, #20]
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800130e:	ee17 0a90 	vmov	r0, s15
 8001312:	f7ff f929 	bl	8000568 <__aeabi_f2d>
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <SHT40_ReadTemperatureHumidity+0x138>)
 800131c:	f7ff f97c 	bl	8000618 <__aeabi_dmul>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	a313      	add	r3, pc, #76	@ (adr r3, 8001378 <SHT40_ReadTemperatureHumidity+0x128>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7ff fa9d 	bl	800086c <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b13      	ldr	r3, [pc, #76]	@ (800138c <SHT40_ReadTemperatureHumidity+0x13c>)
 8001340:	f7fe ffb2 	bl	80002a8 <__aeabi_dsub>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc3c 	bl	8000bc8 <__aeabi_d2f>
 8001350:	4602      	mov	r2, r0
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	601a      	str	r2, [r3, #0]
    } else {
        // Xử lý lỗi đ�?c dữ liệu nếu có
        *temperature = -999.0; // Báo lỗi với giá trị bất thư�?ng
        *humidity = -999.0;    // Báo lỗi với giá trị bất thư�?ng
    }
}
 8001356:	e005      	b.n	8001364 <SHT40_ReadTemperatureHumidity+0x114>
        *temperature = -999.0; // Báo lỗi với giá trị bất thư�?ng
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <SHT40_ReadTemperatureHumidity+0x140>)
 800135c:	601a      	str	r2, [r3, #0]
        *humidity = -999.0;    // Báo lỗi với giá trị bất thư�?ng
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <SHT40_ReadTemperatureHumidity+0x140>)
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	f3af 8000 	nop.w
 8001370:	00000000 	.word	0x00000000
 8001374:	4065e000 	.word	0x4065e000
 8001378:	00000000 	.word	0x00000000
 800137c:	40efffe0 	.word	0x40efffe0
 8001380:	200001f8 	.word	0x200001f8
 8001384:	40468000 	.word	0x40468000
 8001388:	405f4000 	.word	0x405f4000
 800138c:	40180000 	.word	0x40180000
 8001390:	c479c000 	.word	0xc479c000

08001394 <BH1750_ReadLightIntensity>:

void BH1750_ReadLightIntensity(float *light_intensity)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af02      	add	r7, sp, #8
 800139a:	6078      	str	r0, [r7, #4]
    uint8_t cmd = BH1750_MEASURE_CMD;
 800139c:	2310      	movs	r3, #16
 800139e:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2]; // 2 byte dữ liệu trả v�?

    // Gửi lệnh đo cư�?ng độ ánh sáng
    HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDR, &cmd, 1, HAL_MAX_DELAY);
 80013a0:	f107 020f 	add.w	r2, r7, #15
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2146      	movs	r1, #70	@ 0x46
 80013ae:	481e      	ldr	r0, [pc, #120]	@ (8001428 <BH1750_ReadLightIntensity+0x94>)
 80013b0:	f001 fa82 	bl	80028b8 <HAL_I2C_Master_Transmit>

    // �?ợi th�?i gian để cảm biến đo và trả v�? dữ liệu (khoảng 180ms)
    HAL_Delay(180);
 80013b4:	20b4      	movs	r0, #180	@ 0xb4
 80013b6:	f000 fe53 	bl	8002060 <HAL_Delay>

    // �?�?c dữ liệu từ BH1750 (2 byte)
    if (HAL_I2C_Master_Receive(&hi2c1, BH1750_ADDR, data, 2, HAL_MAX_DELAY) == HAL_OK)
 80013ba:	f107 020c 	add.w	r2, r7, #12
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	2146      	movs	r1, #70	@ 0x46
 80013c8:	4817      	ldr	r0, [pc, #92]	@ (8001428 <BH1750_ReadLightIntensity+0x94>)
 80013ca:	f001 fb73 	bl	8002ab4 <HAL_I2C_Master_Receive>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d122      	bne.n	800141a <BH1750_ReadLightIntensity+0x86>
    {
        // Chuyển đổi giá trị ánh sáng (Lux) từ 2 byte dữ liệu
        light = (data[0] << 8) | data[1];
 80013d4:	7b3b      	ldrb	r3, [r7, #12]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21a      	sxth	r2, r3
 80013da:	7b7b      	ldrb	r3, [r7, #13]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <BH1750_ReadLightIntensity+0x98>)
 80013e6:	801a      	strh	r2, [r3, #0]
        *light_intensity = 1.0*(float) light/1.2;
 80013e8:	4b10      	ldr	r3, [pc, #64]	@ (800142c <BH1750_ReadLightIntensity+0x98>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f4:	ee17 0a90 	vmov	r0, s15
 80013f8:	f7ff f8b6 	bl	8000568 <__aeabi_f2d>
 80013fc:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <BH1750_ReadLightIntensity+0x9c>)
 8001402:	f7ff fa33 	bl	800086c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fbdb 	bl	8000bc8 <__aeabi_d2f>
 8001412:	4602      	mov	r2, r0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	601a      	str	r2, [r3, #0]
    else
    {
        // Xử lý lỗi đ�?c dữ liệu nếu có
        *light_intensity = 0xFFFF; // Báo lỗi với giá trị bất thư�?ng
    }
}
 8001418:	e002      	b.n	8001420 <BH1750_ReadLightIntensity+0x8c>
        *light_intensity = 0xFFFF; // Báo lỗi với giá trị bất thư�?ng
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <BH1750_ReadLightIntensity+0xa0>)
 800141e:	601a      	str	r2, [r3, #0]
}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001f8 	.word	0x200001f8
 800142c:	200002fc 	.word	0x200002fc
 8001430:	3ff33333 	.word	0x3ff33333
 8001434:	477fff00 	.word	0x477fff00

08001438 <SendData>:
void SendData(UART_HandleTypeDef *huart) {
 8001438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800143c:	b08f      	sub	sp, #60	@ 0x3c
 800143e:	af0a      	add	r7, sp, #40	@ 0x28
 8001440:	60f8      	str	r0, [r7, #12]


    // Tạo chuỗi chứa các giá trị
    snprintf(buffer, sizeof(buffer),
 8001442:	4b64      	ldr	r3, [pc, #400]	@ (80015d4 <SendData+0x19c>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	461e      	mov	r6, r3
 8001448:	4b63      	ldr	r3, [pc, #396]	@ (80015d8 <SendData+0x1a0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f88b 	bl	8000568 <__aeabi_f2d>
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
 8001456:	4b61      	ldr	r3, [pc, #388]	@ (80015dc <SendData+0x1a4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f884 	bl	8000568 <__aeabi_f2d>
 8001460:	4680      	mov	r8, r0
 8001462:	4689      	mov	r9, r1
 8001464:	4b5e      	ldr	r3, [pc, #376]	@ (80015e0 <SendData+0x1a8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f87d 	bl	8000568 <__aeabi_f2d>
 800146e:	4682      	mov	sl, r0
 8001470:	468b      	mov	fp, r1
 8001472:	4b5a      	ldr	r3, [pc, #360]	@ (80015dc <SendData+0x1a4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f876 	bl	8000568 <__aeabi_f2d>
 800147c:	e9c7 0100 	strd	r0, r1, [r7]
 8001480:	4b58      	ldr	r3, [pc, #352]	@ (80015e4 <SendData+0x1ac>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f86f 	bl	8000568 <__aeabi_f2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001492:	ed97 7b00 	vldr	d7, [r7]
 8001496:	ed8d 7b06 	vstr	d7, [sp, #24]
 800149a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800149e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014a2:	e9cd 4500 	strd	r4, r5, [sp]
 80014a6:	4633      	mov	r3, r6
 80014a8:	4a4f      	ldr	r2, [pc, #316]	@ (80015e8 <SendData+0x1b0>)
 80014aa:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80014ae:	484f      	ldr	r0, [pc, #316]	@ (80015ec <SendData+0x1b4>)
 80014b0:	f004 f9f4 	bl	800589c <sniprintf>
             "Do am khong khi: %.2f%%\n"
             "Cuong do anh sang: %f Lux\n\n",
             i, TemperatureDHT, HumidityDHT, temperature, HumidityDHT, light_intensity);

    // Gửi chuỗi qua USART
    HAL_UART_Transmit(huart, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80014b4:	484d      	ldr	r0, [pc, #308]	@ (80015ec <SendData+0x1b4>)
 80014b6:	f7fe feeb 	bl	8000290 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	494a      	ldr	r1, [pc, #296]	@ (80015ec <SendData+0x1b4>)
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f003 f913 	bl	80046f0 <HAL_UART_Transmit>

    if(CheckTem() == 1)
 80014ca:	f000 f8ab 	bl	8001624 <CheckTem>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d103      	bne.n	80014dc <SendData+0xa4>
    	C1 = "Nhiet do Kha thap, Nguy co hu hai cao. Can duy chuyen den noi am ap\n";
 80014d4:	4b46      	ldr	r3, [pc, #280]	@ (80015f0 <SendData+0x1b8>)
 80014d6:	4a47      	ldr	r2, [pc, #284]	@ (80015f4 <SendData+0x1bc>)
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e010      	b.n	80014fe <SendData+0xc6>
    else if (CheckTem() == 2)
 80014dc:	f000 f8a2 	bl	8001624 <CheckTem>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d103      	bne.n	80014ee <SendData+0xb6>
    	C1 = "Nhiet do ly tuong, Cay phat trien binh thuong.\n";
 80014e6:	4b42      	ldr	r3, [pc, #264]	@ (80015f0 <SendData+0x1b8>)
 80014e8:	4a43      	ldr	r2, [pc, #268]	@ (80015f8 <SendData+0x1c0>)
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e007      	b.n	80014fe <SendData+0xc6>
    else if (CheckTem() == 3)
 80014ee:	f000 f899 	bl	8001624 <CheckTem>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d102      	bne.n	80014fe <SendData+0xc6>
    	C1 = "nhiet do cao, Nguy co chay nang. Can lam mat ngay lap tuc.\n";
 80014f8:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <SendData+0x1b8>)
 80014fa:	4a40      	ldr	r2, [pc, #256]	@ (80015fc <SendData+0x1c4>)
 80014fc:	601a      	str	r2, [r3, #0]
    if(CheckHum() == 1 )
 80014fe:	f000 f8df 	bl	80016c0 <CheckHum>
 8001502:	4603      	mov	r3, r0
 8001504:	2b01      	cmp	r3, #1
 8001506:	d103      	bne.n	8001510 <SendData+0xd8>
    	C2 = "Do am thap, so luong hoi nuoc qua it. De xuat phun suong, tuoi nuoc cap am.\n";
 8001508:	4b3d      	ldr	r3, [pc, #244]	@ (8001600 <SendData+0x1c8>)
 800150a:	4a3e      	ldr	r2, [pc, #248]	@ (8001604 <SendData+0x1cc>)
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e010      	b.n	8001532 <SendData+0xfa>
    else if(CheckHum() == 2 )
 8001510:	f000 f8d6 	bl	80016c0 <CheckHum>
 8001514:	4603      	mov	r3, r0
 8001516:	2b02      	cmp	r3, #2
 8001518:	d103      	bne.n	8001522 <SendData+0xea>
    	C2 = "Do am ly tuong, Thich hop cho su phat trien cua cay.\n";
 800151a:	4b39      	ldr	r3, [pc, #228]	@ (8001600 <SendData+0x1c8>)
 800151c:	4a3a      	ldr	r2, [pc, #232]	@ (8001608 <SendData+0x1d0>)
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e007      	b.n	8001532 <SendData+0xfa>
    else if	(CheckHum() == 3 )
 8001522:	f000 f8cd 	bl	80016c0 <CheckHum>
 8001526:	4603      	mov	r3, r0
 8001528:	2b03      	cmp	r3, #3
 800152a:	d102      	bne.n	8001532 <SendData+0xfa>
        C2 = "Do am cao, Canh bao cay de benh va chet.\n";
 800152c:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <SendData+0x1c8>)
 800152e:	4a37      	ldr	r2, [pc, #220]	@ (800160c <SendData+0x1d4>)
 8001530:	601a      	str	r2, [r3, #0]
    if(CheckLight() == 1)
 8001532:	f000 f913 	bl	800175c <CheckLight>
 8001536:	4603      	mov	r3, r0
 8001538:	2b01      	cmp	r3, #1
 800153a:	d103      	bne.n	8001544 <SendData+0x10c>
    	C3 = "Anh sang yeu, Cay kem phat trien. Canh bao than dai la nhat mau\n";
 800153c:	4b34      	ldr	r3, [pc, #208]	@ (8001610 <SendData+0x1d8>)
 800153e:	4a35      	ldr	r2, [pc, #212]	@ (8001614 <SendData+0x1dc>)
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e014      	b.n	800156e <SendData+0x136>
    else if(CheckLight() ==2 )
 8001544:	f000 f90a 	bl	800175c <CheckLight>
 8001548:	4603      	mov	r3, r0
 800154a:	2b02      	cmp	r3, #2
 800154c:	d103      	bne.n	8001556 <SendData+0x11e>
    	C3 = "Anh sang phu hop, Cay phat trien on dinh\n";
 800154e:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <SendData+0x1d8>)
 8001550:	4a31      	ldr	r2, [pc, #196]	@ (8001618 <SendData+0x1e0>)
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e00b      	b.n	800156e <SendData+0x136>
    else if(CheckLight() ==3)
 8001556:	f000 f901 	bl	800175c <CheckLight>
 800155a:	4603      	mov	r3, r0
 800155c:	2b03      	cmp	r3, #3
 800155e:	d103      	bne.n	8001568 <SendData+0x130>
    	C3 = "Anh sang tot, Cay phat trien manh me, mau sac dep, chat luong tot\n";
 8001560:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <SendData+0x1d8>)
 8001562:	4a2e      	ldr	r2, [pc, #184]	@ (800161c <SendData+0x1e4>)
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e002      	b.n	800156e <SendData+0x136>
    else
    	C3 = "Anh sang manh, Cay quang hop lien tuc, Can han che anh sang.\n";
 8001568:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <SendData+0x1d8>)
 800156a:	4a2d      	ldr	r2, [pc, #180]	@ (8001620 <SendData+0x1e8>)
 800156c:	601a      	str	r2, [r3, #0]
    HAL_UART_Transmit(huart, (uint8_t *)C1, strlen(C1), HAL_MAX_DELAY);
 800156e:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <SendData+0x1b8>)
 8001570:	681c      	ldr	r4, [r3, #0]
 8001572:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <SendData+0x1b8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe fe8a 	bl	8000290 <strlen>
 800157c:	4603      	mov	r3, r0
 800157e:	b29a      	uxth	r2, r3
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	4621      	mov	r1, r4
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f003 f8b2 	bl	80046f0 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, (uint8_t *)C2, strlen(C2), HAL_MAX_DELAY);
 800158c:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <SendData+0x1c8>)
 800158e:	681c      	ldr	r4, [r3, #0]
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <SendData+0x1c8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fe7b 	bl	8000290 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	4621      	mov	r1, r4
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f003 f8a3 	bl	80046f0 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, (uint8_t *)C3, strlen(C3), HAL_MAX_DELAY);
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <SendData+0x1d8>)
 80015ac:	681c      	ldr	r4, [r3, #0]
 80015ae:	4b18      	ldr	r3, [pc, #96]	@ (8001610 <SendData+0x1d8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe fe6c 	bl	8000290 <strlen>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	4621      	mov	r1, r4
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f003 f894 	bl	80046f0 <HAL_UART_Transmit>

    }
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015d2:	bf00      	nop
 80015d4:	20000000 	.word	0x20000000
 80015d8:	200002e8 	.word	0x200002e8
 80015dc:	200002ec 	.word	0x200002ec
 80015e0:	200002f0 	.word	0x200002f0
 80015e4:	200002f8 	.word	0x200002f8
 80015e8:	08007b78 	.word	0x08007b78
 80015ec:	20000300 	.word	0x20000300
 80015f0:	200004f4 	.word	0x200004f4
 80015f4:	08007c04 	.word	0x08007c04
 80015f8:	08007c4c 	.word	0x08007c4c
 80015fc:	08007c7c 	.word	0x08007c7c
 8001600:	200004f8 	.word	0x200004f8
 8001604:	08007cb8 	.word	0x08007cb8
 8001608:	08007d08 	.word	0x08007d08
 800160c:	08007d40 	.word	0x08007d40
 8001610:	200004fc 	.word	0x200004fc
 8001614:	08007d6c 	.word	0x08007d6c
 8001618:	08007db0 	.word	0x08007db0
 800161c:	08007ddc 	.word	0x08007ddc
 8001620:	08007e20 	.word	0x08007e20

08001624 <CheckTem>:
int CheckTem()
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	if(temperature < 10 && TemperatureDHT <10)
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <CheckTem+0x90>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	d50b      	bpl.n	8001654 <CheckTem+0x30>
 800163c:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <CheckTem+0x94>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	d501      	bpl.n	8001654 <CheckTem+0x30>
	{
		return 1;
 8001650:	2301      	movs	r3, #1
 8001652:	e02a      	b.n	80016aa <CheckTem+0x86>
	}
	else if (temperature > 16 && TemperatureDHT > 16 &&
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <CheckTem+0x90>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800165e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	dd1f      	ble.n	80016a8 <CheckTem+0x84>
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <CheckTem+0x94>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	dd15      	ble.n	80016a8 <CheckTem+0x84>
			 temperature < 32 && TemperatureDHT < 32
 800167c:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <CheckTem+0x90>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
	else if (temperature > 16 && TemperatureDHT > 16 &&
 8001682:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80016bc <CheckTem+0x98>
 8001686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168e:	d50b      	bpl.n	80016a8 <CheckTem+0x84>
			 temperature < 32 && TemperatureDHT < 32
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <CheckTem+0x94>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80016bc <CheckTem+0x98>
 800169a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	d501      	bpl.n	80016a8 <CheckTem+0x84>
			)
		return 2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	e000      	b.n	80016aa <CheckTem+0x86>
	else
		return 1;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	200002f0 	.word	0x200002f0
 80016b8:	200002e8 	.word	0x200002e8
 80016bc:	42000000 	.word	0x42000000

080016c0 <CheckHum>:
int CheckHum()
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
	if(HumidityDHT < 30 && HumidityDHT < 30)
 80016c4:	4b22      	ldr	r3, [pc, #136]	@ (8001750 <CheckHum+0x90>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80016ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d6:	d50b      	bpl.n	80016f0 <CheckHum+0x30>
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <CheckHum+0x90>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80016e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	d501      	bpl.n	80016f0 <CheckHum+0x30>
	{
		return 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e02a      	b.n	8001746 <CheckHum+0x86>
	}
	else if (HumidityDHT > 35 && HumidityDHT > 35 &&
 80016f0:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <CheckHum+0x90>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001754 <CheckHum+0x94>
 80016fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	dd1f      	ble.n	8001744 <CheckHum+0x84>
 8001704:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <CheckHum+0x90>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001754 <CheckHum+0x94>
 800170e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	dd15      	ble.n	8001744 <CheckHum+0x84>
		     HumidityDHT < 60 && HumidityDHT < 60
 8001718:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <CheckHum+0x90>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
	else if (HumidityDHT > 35 && HumidityDHT > 35 &&
 800171e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001758 <CheckHum+0x98>
 8001722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	d50b      	bpl.n	8001744 <CheckHum+0x84>
		     HumidityDHT < 60 && HumidityDHT < 60
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <CheckHum+0x90>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001758 <CheckHum+0x98>
 8001736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173e:	d501      	bpl.n	8001744 <CheckHum+0x84>
			)
		return 2;
 8001740:	2302      	movs	r3, #2
 8001742:	e000      	b.n	8001746 <CheckHum+0x86>
	else
		return 3;
 8001744:	2303      	movs	r3, #3
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	200002ec 	.word	0x200002ec
 8001754:	420c0000 	.word	0x420c0000
 8001758:	42700000 	.word	0x42700000

0800175c <CheckLight>:
int CheckLight()
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
	if(light_intensity < 1000)
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <CheckLight+0x80>)
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80017e0 <CheckLight+0x84>
 800176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d501      	bpl.n	8001778 <CheckLight+0x1c>
	{
		return 1;
 8001774:	2301      	movs	r3, #1
 8001776:	e02c      	b.n	80017d2 <CheckLight+0x76>
	}
	else if (light_intensity > 1000 && light_intensity < 3000
 8001778:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <CheckLight+0x80>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80017e0 <CheckLight+0x84>
 8001782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	dd0b      	ble.n	80017a4 <CheckLight+0x48>
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <CheckLight+0x80>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80017e4 <CheckLight+0x88>
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	d501      	bpl.n	80017a4 <CheckLight+0x48>
			)
		return 2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	e016      	b.n	80017d2 <CheckLight+0x76>
	else if (light_intensity >3000 && light_intensity < 5000)
 80017a4:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <CheckLight+0x80>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80017e4 <CheckLight+0x88>
 80017ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	dd0b      	ble.n	80017d0 <CheckLight+0x74>
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <CheckLight+0x80>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80017e8 <CheckLight+0x8c>
 80017c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	d501      	bpl.n	80017d0 <CheckLight+0x74>
		return 3;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e000      	b.n	80017d2 <CheckLight+0x76>
	else
		return 4;
 80017d0:	2304      	movs	r3, #4
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	200002f8 	.word	0x200002f8
 80017e0:	447a0000 	.word	0x447a0000
 80017e4:	453b8000 	.word	0x453b8000
 80017e8:	459c4000 	.word	0x459c4000

080017ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ec:	b598      	push	{r3, r4, r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f0:	f000 fbc4 	bl	8001f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f4:	f000 f840 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f8:	f000 f960 	bl	8001abc <MX_GPIO_Init>
  MX_I2C1_Init();
 80017fc:	f000 f8a8 	bl	8001950 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001800:	f000 f8e6 	bl	80019d0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001804:	f000 f930 	bl	8001a68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);  // for us Delay
 8001808:	4814      	ldr	r0, [pc, #80]	@ (800185c <main+0x70>)
 800180a:	f002 fc2f 	bl	800406c <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart1, (uint8_t *)Hello, strlen(Hello), HAL_MAX_DELAY);
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <main+0x74>)
 8001810:	681c      	ldr	r4, [r3, #0]
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <main+0x74>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fd3a 	bl	8000290 <strlen>
 800181c:	4603      	mov	r3, r0
 800181e:	b29a      	uxth	r2, r3
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	4621      	mov	r1, r4
 8001826:	480f      	ldr	r0, [pc, #60]	@ (8001864 <main+0x78>)
 8001828:	f002 ff62 	bl	80046f0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
	  DHT22();
 800182c:	f7ff fc88 	bl	8001140 <DHT22>
	  	  SHT40_ReadTemperatureHumidity(&temperature, &humidity);
 8001830:	490d      	ldr	r1, [pc, #52]	@ (8001868 <main+0x7c>)
 8001832:	480e      	ldr	r0, [pc, #56]	@ (800186c <main+0x80>)
 8001834:	f7ff fd0c 	bl	8001250 <SHT40_ReadTemperatureHumidity>
	  	  BH1750_ReadLightIntensity(&light_intensity);
 8001838:	480d      	ldr	r0, [pc, #52]	@ (8001870 <main+0x84>)
 800183a:	f7ff fdab 	bl	8001394 <BH1750_ReadLightIntensity>
	  	  SendData(&huart1);
 800183e:	4809      	ldr	r0, [pc, #36]	@ (8001864 <main+0x78>)
 8001840:	f7ff fdfa 	bl	8001438 <SendData>
	  	  i++;
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <main+0x88>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <main+0x88>)
 800184e:	801a      	strh	r2, [r3, #0]
	  	  HAL_Delay(500);
 8001850:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001854:	f000 fc04 	bl	8002060 <HAL_Delay>
	  DHT22();
 8001858:	bf00      	nop
 800185a:	e7e7      	b.n	800182c <main+0x40>
 800185c:	2000024c 	.word	0x2000024c
 8001860:	20000004 	.word	0x20000004
 8001864:	20000294 	.word	0x20000294
 8001868:	200002f4 	.word	0x200002f4
 800186c:	200002f0 	.word	0x200002f0
 8001870:	200002f8 	.word	0x200002f8
 8001874:	20000000 	.word	0x20000000

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b094      	sub	sp, #80	@ 0x50
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	2230      	movs	r2, #48	@ 0x30
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f004 f87f 	bl	800598a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <SystemClock_Config+0xd0>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	4a28      	ldr	r2, [pc, #160]	@ (8001948 <SystemClock_Config+0xd0>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ac:	4b26      	ldr	r3, [pc, #152]	@ (8001948 <SystemClock_Config+0xd0>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	4b23      	ldr	r3, [pc, #140]	@ (800194c <SystemClock_Config+0xd4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80018c4:	4a21      	ldr	r2, [pc, #132]	@ (800194c <SystemClock_Config+0xd4>)
 80018c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <SystemClock_Config+0xd4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d8:	2302      	movs	r3, #2
 80018da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018dc:	2301      	movs	r3, #1
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e0:	2310      	movs	r3, #16
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e4:	2302      	movs	r3, #2
 80018e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018ec:	2310      	movs	r3, #16
 80018ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80018f0:	23c0      	movs	r3, #192	@ 0xc0
 80018f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f4:	2302      	movs	r3, #2
 80018f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018f8:	2304      	movs	r3, #4
 80018fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	4618      	mov	r0, r3
 8001902:	f001 ff0b 	bl	800371c <HAL_RCC_OscConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800190c:	f000 f926 	bl	8001b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001910:	230f      	movs	r3, #15
 8001912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001914:	2302      	movs	r3, #2
 8001916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800191c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2103      	movs	r1, #3
 800192e:	4618      	mov	r0, r3
 8001930:	f002 f96c 	bl	8003c0c <HAL_RCC_ClockConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800193a:	f000 f90f 	bl	8001b5c <Error_Handler>
  }
}
 800193e:	bf00      	nop
 8001940:	3750      	adds	r7, #80	@ 0x50
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000

08001950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <MX_I2C1_Init+0x78>)
 8001958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800195c:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <MX_I2C1_Init+0x7c>)
 800195e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196c:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800196e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001980:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <MX_I2C1_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198c:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <MX_I2C1_Init+0x74>)
 800198e:	f000 fe4f 	bl	8002630 <HAL_I2C_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001998:	f000 f8e0 	bl	8001b5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800199c:	2100      	movs	r1, #0
 800199e:	4809      	ldr	r0, [pc, #36]	@ (80019c4 <MX_I2C1_Init+0x74>)
 80019a0:	f001 fe40 	bl	8003624 <HAL_I2CEx_ConfigAnalogFilter>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80019aa:	f000 f8d7 	bl	8001b5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019ae:	2100      	movs	r1, #0
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <MX_I2C1_Init+0x74>)
 80019b2:	f001 fe73 	bl	800369c <HAL_I2CEx_ConfigDigitalFilter>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80019bc:	f000 f8ce 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200001f8 	.word	0x200001f8
 80019c8:	40005400 	.word	0x40005400
 80019cc:	000186a0 	.word	0x000186a0

080019d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <MX_TIM2_Init+0x94>)
 80019ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <MX_TIM2_Init+0x94>)
 80019f6:	222f      	movs	r2, #47	@ 0x2f
 80019f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <MX_TIM2_Init+0x94>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a00:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <MX_TIM2_Init+0x94>)
 8001a02:	f04f 32ff 	mov.w	r2, #4294967295
 8001a06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <MX_TIM2_Init+0x94>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <MX_TIM2_Init+0x94>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a14:	4813      	ldr	r0, [pc, #76]	@ (8001a64 <MX_TIM2_Init+0x94>)
 8001a16:	f002 fad9 	bl	8003fcc <HAL_TIM_Base_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a20:	f000 f89c 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <MX_TIM2_Init+0x94>)
 8001a32:	f002 fb83 	bl	800413c <HAL_TIM_ConfigClockSource>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a3c:	f000 f88e 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <MX_TIM2_Init+0x94>)
 8001a4e:	f002 fd83 	bl	8004558 <HAL_TIMEx_MasterConfigSynchronization>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a58:	f000 f880 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000024c 	.word	0x2000024c

08001a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	@ (8001ab8 <MX_USART1_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	f002 fdd6 	bl	8004650 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f000 f857 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000294 	.word	0x20000294
 8001ab8:	40011000 	.word	0x40011000

08001abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <MX_GPIO_Init+0x94>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a1d      	ldr	r2, [pc, #116]	@ (8001b50 <MX_GPIO_Init+0x94>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b50 <MX_GPIO_Init+0x94>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <MX_GPIO_Init+0x94>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a16      	ldr	r2, [pc, #88]	@ (8001b50 <MX_GPIO_Init+0x94>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <MX_GPIO_Init+0x94>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	4811      	ldr	r0, [pc, #68]	@ (8001b54 <MX_GPIO_Init+0x98>)
 8001b10:	f000 fd74 	bl	80025fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b14:	2301      	movs	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <MX_GPIO_Init+0x9c>)
 8001b28:	f000 fba4 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b30:	2311      	movs	r3, #17
 8001b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	4619      	mov	r1, r3
 8001b42:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <MX_GPIO_Init+0x98>)
 8001b44:	f000 fb96 	bl	8002274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b48:	bf00      	nop
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40020000 	.word	0x40020000

08001b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <Error_Handler+0x8>

08001b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b76:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	@ 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	@ (8001c3c <HAL_I2C_MspInit+0x84>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12b      	bne.n	8001c32 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_I2C_MspInit+0x88>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a17      	ldr	r2, [pc, #92]	@ (8001c40 <HAL_I2C_MspInit+0x88>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_I2C_MspInit+0x88>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf6:	23c0      	movs	r3, #192	@ 0xc0
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c06:	2304      	movs	r3, #4
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <HAL_I2C_MspInit+0x8c>)
 8001c12:	f000 fb2f 	bl	8002274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <HAL_I2C_MspInit+0x88>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_I2C_MspInit+0x88>)
 8001c20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_I2C_MspInit+0x88>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	@ 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40005400 	.word	0x40005400
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020400 	.word	0x40020400

08001c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c58:	d10d      	bne.n	8001c76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_TIM_Base_MspInit+0x3c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	4a08      	ldr	r2, [pc, #32]	@ (8001c84 <HAL_TIM_Base_MspInit+0x3c>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_TIM_Base_MspInit+0x3c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800

08001c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	@ 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_UART_MspInit+0x84>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d12c      	bne.n	8001d04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_UART_MspInit+0x88>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a17      	ldr	r2, [pc, #92]	@ (8001d10 <HAL_UART_MspInit+0x88>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_UART_MspInit+0x88>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_UART_MspInit+0x88>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <HAL_UART_MspInit+0x88>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <HAL_UART_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ce2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <HAL_UART_MspInit+0x8c>)
 8001d00:	f000 fab8 	bl	8002274 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000

08001d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <NMI_Handler+0x4>

08001d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <HardFault_Handler+0x4>

08001d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <MemManage_Handler+0x4>

08001d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6e:	f000 f957 	bl	8002020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  return 1;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_kill>:

int _kill(int pid, int sig)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d90:	f003 fe4e 	bl	8005a30 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2216      	movs	r2, #22
 8001d98:	601a      	str	r2, [r3, #0]
  return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_exit>:

void _exit (int status)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dae:	f04f 31ff 	mov.w	r1, #4294967295
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffe7 	bl	8001d86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <_exit+0x12>

08001dbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e00a      	b.n	8001de4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dce:	f3af 8000 	nop.w
 8001dd2:	4601      	mov	r1, r0
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	60ba      	str	r2, [r7, #8]
 8001dda:	b2ca      	uxtb	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dbf0      	blt.n	8001dce <_read+0x12>
  }

  return len;
 8001dec:	687b      	ldr	r3, [r7, #4]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e009      	b.n	8001e1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	60ba      	str	r2, [r7, #8]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dbf1      	blt.n	8001e08 <_write+0x12>
  }
  return len;
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_close>:

int _close(int file)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e56:	605a      	str	r2, [r3, #4]
  return 0;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_isatty>:

int _isatty(int file)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea0:	4a14      	ldr	r2, [pc, #80]	@ (8001ef4 <_sbrk+0x5c>)
 8001ea2:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <_sbrk+0x60>)
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eac:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <_sbrk+0x64>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	@ (8001f00 <_sbrk+0x68>)
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d207      	bcs.n	8001ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec8:	f003 fdb2 	bl	8005a30 <__errno>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	220c      	movs	r2, #12
 8001ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	e009      	b.n	8001eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ede:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a05      	ldr	r2, [pc, #20]	@ (8001efc <_sbrk+0x64>)
 8001ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20030000 	.word	0x20030000
 8001ef8:	00000400 	.word	0x00000400
 8001efc:	20000500 	.word	0x20000500
 8001f00:	20000658 	.word	0x20000658

08001f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <SystemInit+0x20>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f0e:	4a05      	ldr	r2, [pc, #20]	@ (8001f24 <SystemInit+0x20>)
 8001f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f2c:	f7ff ffea 	bl	8001f04 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f30:	480c      	ldr	r0, [pc, #48]	@ (8001f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f32:	490d      	ldr	r1, [pc, #52]	@ (8001f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f34:	4a0d      	ldr	r2, [pc, #52]	@ (8001f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f38:	e002      	b.n	8001f40 <LoopCopyDataInit>

08001f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3e:	3304      	adds	r3, #4

08001f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f44:	d3f9      	bcc.n	8001f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f48:	4c0a      	ldr	r4, [pc, #40]	@ (8001f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f4c:	e001      	b.n	8001f52 <LoopFillZerobss>

08001f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f50:	3204      	adds	r2, #4

08001f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f54:	d3fb      	bcc.n	8001f4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f56:	f003 fd71 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f5a:	f7ff fc47 	bl	80017ec <main>
  bx  lr    
 8001f5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f60:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f68:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f6c:	080081f8 	.word	0x080081f8
  ldr r2, =_sbss
 8001f70:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f74:	20000654 	.word	0x20000654

08001f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC_IRQHandler>
	...

08001f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0d      	ldr	r2, [pc, #52]	@ (8001fbc <HAL_Init+0x40>)
 8001f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <HAL_Init+0x40>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <HAL_Init+0x40>)
 8001f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a07      	ldr	r2, [pc, #28]	@ (8001fbc <HAL_Init+0x40>)
 8001f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f000 f931 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 f808 	bl	8001fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb0:	f7ff fdda 	bl	8001b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023c00 	.word	0x40023c00

08001fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_InitTick+0x54>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <HAL_InitTick+0x58>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f93b 	bl	800225a <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00e      	b.n	800200c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d80a      	bhi.n	800200a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f000 f911 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002000:	4a06      	ldr	r2, [pc, #24]	@ (800201c <HAL_InitTick+0x5c>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000008 	.word	0x20000008
 8002018:	20000010 	.word	0x20000010
 800201c:	2000000c 	.word	0x2000000c

08002020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_IncTick+0x20>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_IncTick+0x24>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4413      	add	r3, r2
 8002030:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <HAL_IncTick+0x24>)
 8002032:	6013      	str	r3, [r2, #0]
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000010 	.word	0x20000010
 8002044:	20000504 	.word	0x20000504

08002048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;
 800204c:	4b03      	ldr	r3, [pc, #12]	@ (800205c <HAL_GetTick+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000504 	.word	0x20000504

08002060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff ffee 	bl	8002048 <HAL_GetTick>
 800206c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d005      	beq.n	8002086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207a:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <HAL_Delay+0x44>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002086:	bf00      	nop
 8002088:	f7ff ffde 	bl	8002048 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	429a      	cmp	r2, r3
 8002096:	d8f7      	bhi.n	8002088 <HAL_Delay+0x28>
  {
  }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000010 	.word	0x20000010

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	@ (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	@ 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff47 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff5c 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffb0 	bl	80021c8 <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	@ 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e177      	b.n	8002580 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	f040 8166 	bne.w	800257a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d005      	beq.n	80022c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d130      	bne.n	8002328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 0201 	and.w	r2, r3, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b03      	cmp	r3, #3
 8002332:	d017      	beq.n	8002364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d123      	bne.n	80023b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80c0 	beq.w	800257a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b66      	ldr	r3, [pc, #408]	@ (8002598 <HAL_GPIO_Init+0x324>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	4a65      	ldr	r2, [pc, #404]	@ (8002598 <HAL_GPIO_Init+0x324>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002408:	6453      	str	r3, [r2, #68]	@ 0x44
 800240a:	4b63      	ldr	r3, [pc, #396]	@ (8002598 <HAL_GPIO_Init+0x324>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002416:	4a61      	ldr	r2, [pc, #388]	@ (800259c <HAL_GPIO_Init+0x328>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a58      	ldr	r2, [pc, #352]	@ (80025a0 <HAL_GPIO_Init+0x32c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d037      	beq.n	80024b2 <HAL_GPIO_Init+0x23e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a57      	ldr	r2, [pc, #348]	@ (80025a4 <HAL_GPIO_Init+0x330>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d031      	beq.n	80024ae <HAL_GPIO_Init+0x23a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a56      	ldr	r2, [pc, #344]	@ (80025a8 <HAL_GPIO_Init+0x334>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d02b      	beq.n	80024aa <HAL_GPIO_Init+0x236>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a55      	ldr	r2, [pc, #340]	@ (80025ac <HAL_GPIO_Init+0x338>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d025      	beq.n	80024a6 <HAL_GPIO_Init+0x232>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a54      	ldr	r2, [pc, #336]	@ (80025b0 <HAL_GPIO_Init+0x33c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01f      	beq.n	80024a2 <HAL_GPIO_Init+0x22e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a53      	ldr	r2, [pc, #332]	@ (80025b4 <HAL_GPIO_Init+0x340>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d019      	beq.n	800249e <HAL_GPIO_Init+0x22a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a52      	ldr	r2, [pc, #328]	@ (80025b8 <HAL_GPIO_Init+0x344>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0x226>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a51      	ldr	r2, [pc, #324]	@ (80025bc <HAL_GPIO_Init+0x348>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00d      	beq.n	8002496 <HAL_GPIO_Init+0x222>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a50      	ldr	r2, [pc, #320]	@ (80025c0 <HAL_GPIO_Init+0x34c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x21e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4f      	ldr	r2, [pc, #316]	@ (80025c4 <HAL_GPIO_Init+0x350>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_GPIO_Init+0x21a>
 800248a:	2309      	movs	r3, #9
 800248c:	e012      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 800248e:	230a      	movs	r3, #10
 8002490:	e010      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 8002492:	2308      	movs	r3, #8
 8002494:	e00e      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 8002496:	2307      	movs	r3, #7
 8002498:	e00c      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 800249a:	2306      	movs	r3, #6
 800249c:	e00a      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 800249e:	2305      	movs	r3, #5
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x240>
 80024b2:	2300      	movs	r3, #0
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	4935      	ldr	r1, [pc, #212]	@ (800259c <HAL_GPIO_Init+0x328>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d2:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <HAL_GPIO_Init+0x354>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f6:	4a34      	ldr	r2, [pc, #208]	@ (80025c8 <HAL_GPIO_Init+0x354>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fc:	4b32      	ldr	r3, [pc, #200]	@ (80025c8 <HAL_GPIO_Init+0x354>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002520:	4a29      	ldr	r2, [pc, #164]	@ (80025c8 <HAL_GPIO_Init+0x354>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002526:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <HAL_GPIO_Init+0x354>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254a:	4a1f      	ldr	r2, [pc, #124]	@ (80025c8 <HAL_GPIO_Init+0x354>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002550:	4b1d      	ldr	r3, [pc, #116]	@ (80025c8 <HAL_GPIO_Init+0x354>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002574:	4a14      	ldr	r2, [pc, #80]	@ (80025c8 <HAL_GPIO_Init+0x354>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	f67f ae84 	bls.w	8002290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3724      	adds	r7, #36	@ 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40013800 	.word	0x40013800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40021400 	.word	0x40021400
 80025b8:	40021800 	.word	0x40021800
 80025bc:	40021c00 	.word	0x40021c00
 80025c0:	40022000 	.word	0x40022000
 80025c4:	40022400 	.word	0x40022400
 80025c8:	40013c00 	.word	0x40013c00

080025cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	e001      	b.n	80025ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	807b      	strh	r3, [r7, #2]
 8002608:	4613      	mov	r3, r2
 800260a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800260c:	787b      	ldrb	r3, [r7, #1]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002618:	e003      	b.n	8002622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261a:	887b      	ldrh	r3, [r7, #2]
 800261c:	041a      	lsls	r2, r3, #16
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	619a      	str	r2, [r3, #24]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e12b      	b.n	800289a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff faae 	bl	8001bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	@ 0x24
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002694:	f001 fc72 	bl	8003f7c <HAL_RCC_GetPCLK1Freq>
 8002698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4a81      	ldr	r2, [pc, #516]	@ (80028a4 <HAL_I2C_Init+0x274>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d807      	bhi.n	80026b4 <HAL_I2C_Init+0x84>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4a80      	ldr	r2, [pc, #512]	@ (80028a8 <HAL_I2C_Init+0x278>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	bf94      	ite	ls
 80026ac:	2301      	movls	r3, #1
 80026ae:	2300      	movhi	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e006      	b.n	80026c2 <HAL_I2C_Init+0x92>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a7d      	ldr	r2, [pc, #500]	@ (80028ac <HAL_I2C_Init+0x27c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	bf94      	ite	ls
 80026bc:	2301      	movls	r3, #1
 80026be:	2300      	movhi	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e0e7      	b.n	800289a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a78      	ldr	r2, [pc, #480]	@ (80028b0 <HAL_I2C_Init+0x280>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0c9b      	lsrs	r3, r3, #18
 80026d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a6a      	ldr	r2, [pc, #424]	@ (80028a4 <HAL_I2C_Init+0x274>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d802      	bhi.n	8002704 <HAL_I2C_Init+0xd4>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3301      	adds	r3, #1
 8002702:	e009      	b.n	8002718 <HAL_I2C_Init+0xe8>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	4a69      	ldr	r2, [pc, #420]	@ (80028b4 <HAL_I2C_Init+0x284>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	099b      	lsrs	r3, r3, #6
 8002716:	3301      	adds	r3, #1
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	430b      	orrs	r3, r1
 800271e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800272a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	495c      	ldr	r1, [pc, #368]	@ (80028a4 <HAL_I2C_Init+0x274>)
 8002734:	428b      	cmp	r3, r1
 8002736:	d819      	bhi.n	800276c <HAL_I2C_Init+0x13c>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1e59      	subs	r1, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fbb1 f3f3 	udiv	r3, r1, r3
 8002746:	1c59      	adds	r1, r3, #1
 8002748:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800274c:	400b      	ands	r3, r1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_I2C_Init+0x138>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1e59      	subs	r1, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002760:	3301      	adds	r3, #1
 8002762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002766:	e051      	b.n	800280c <HAL_I2C_Init+0x1dc>
 8002768:	2304      	movs	r3, #4
 800276a:	e04f      	b.n	800280c <HAL_I2C_Init+0x1dc>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d111      	bne.n	8002798 <HAL_I2C_Init+0x168>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e58      	subs	r0, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	440b      	add	r3, r1
 8002782:	fbb0 f3f3 	udiv	r3, r0, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e012      	b.n	80027be <HAL_I2C_Init+0x18e>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e58      	subs	r0, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	0099      	lsls	r1, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Init+0x196>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e022      	b.n	800280c <HAL_I2C_Init+0x1dc>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10e      	bne.n	80027ec <HAL_I2C_Init+0x1bc>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1e58      	subs	r0, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	440b      	add	r3, r1
 80027dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ea:	e00f      	b.n	800280c <HAL_I2C_Init+0x1dc>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1e58      	subs	r0, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	0099      	lsls	r1, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002802:	3301      	adds	r3, #1
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	6809      	ldr	r1, [r1, #0]
 8002810:	4313      	orrs	r3, r2
 8002812:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800283a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6911      	ldr	r1, [r2, #16]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68d2      	ldr	r2, [r2, #12]
 8002846:	4311      	orrs	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	430b      	orrs	r3, r1
 800284e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	000186a0 	.word	0x000186a0
 80028a8:	001e847f 	.word	0x001e847f
 80028ac:	003d08ff 	.word	0x003d08ff
 80028b0:	431bde83 	.word	0x431bde83
 80028b4:	10624dd3 	.word	0x10624dd3

080028b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	461a      	mov	r2, r3
 80028c4:	460b      	mov	r3, r1
 80028c6:	817b      	strh	r3, [r7, #10]
 80028c8:	4613      	mov	r3, r2
 80028ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff fbbc 	bl	8002048 <HAL_GetTick>
 80028d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b20      	cmp	r3, #32
 80028dc:	f040 80e0 	bne.w	8002aa0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2319      	movs	r3, #25
 80028e6:	2201      	movs	r2, #1
 80028e8:	4970      	ldr	r1, [pc, #448]	@ (8002aac <HAL_I2C_Master_Transmit+0x1f4>)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fc64 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0d3      	b.n	8002aa2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_I2C_Master_Transmit+0x50>
 8002904:	2302      	movs	r3, #2
 8002906:	e0cc      	b.n	8002aa2 <HAL_I2C_Master_Transmit+0x1ea>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d007      	beq.n	800292e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800293c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2221      	movs	r2, #33	@ 0x21
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2210      	movs	r2, #16
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	893a      	ldrh	r2, [r7, #8]
 800295e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a50      	ldr	r2, [pc, #320]	@ (8002ab0 <HAL_I2C_Master_Transmit+0x1f8>)
 800296e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	6a3a      	ldr	r2, [r7, #32]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 face 	bl	8002f18 <I2C_MasterRequestWrite>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e08d      	b.n	8002aa2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800299c:	e066      	b.n	8002a6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	6a39      	ldr	r1, [r7, #32]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fd22 	bl	80033ec <I2C_WaitOnTXEFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d107      	bne.n	80029c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e06b      	b.n	8002aa2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d11b      	bne.n	8002a40 <HAL_I2C_Master_Transmit+0x188>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d017      	beq.n	8002a40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	781a      	ldrb	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	6a39      	ldr	r1, [r7, #32]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fd19 	bl	800347c <I2C_WaitOnBTFFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d107      	bne.n	8002a68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e01a      	b.n	8002aa2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d194      	bne.n	800299e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e000      	b.n	8002aa2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
  }
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	00100002 	.word	0x00100002
 8002ab0:	ffff0000 	.word	0xffff0000

08002ab4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	@ 0x30
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	817b      	strh	r3, [r7, #10]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fabe 	bl	8002048 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	f040 8217 	bne.w	8002f0a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2319      	movs	r3, #25
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	497c      	ldr	r1, [pc, #496]	@ (8002cd8 <HAL_I2C_Master_Receive+0x224>)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fb66 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	e20a      	b.n	8002f0c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_I2C_Master_Receive+0x50>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e203      	b.n	8002f0c <HAL_I2C_Master_Receive+0x458>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d007      	beq.n	8002b2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2222      	movs	r2, #34	@ 0x22
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2210      	movs	r2, #16
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a5c      	ldr	r2, [pc, #368]	@ (8002cdc <HAL_I2C_Master_Receive+0x228>)
 8002b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b6c:	8979      	ldrh	r1, [r7, #10]
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fa52 	bl	800301c <I2C_MasterRequestRead>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e1c4      	b.n	8002f0c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d113      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	623b      	str	r3, [r7, #32]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	623b      	str	r3, [r7, #32]
 8002b9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e198      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d11b      	bne.n	8002bf2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e178      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d11b      	bne.n	8002c32 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	e158      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c58:	e144      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	f200 80f1 	bhi.w	8002e46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d123      	bne.n	8002cb4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fc4b 	bl	800350c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e145      	b.n	8002f0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cb2:	e117      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d14e      	bne.n	8002d5a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4906      	ldr	r1, [pc, #24]	@ (8002ce0 <HAL_I2C_Master_Receive+0x22c>)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fa76 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e11a      	b.n	8002f0c <HAL_I2C_Master_Receive+0x458>
 8002cd6:	bf00      	nop
 8002cd8:	00100002 	.word	0x00100002
 8002cdc:	ffff0000 	.word	0xffff0000
 8002ce0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d58:	e0c4      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	2200      	movs	r2, #0
 8002d62:	496c      	ldr	r1, [pc, #432]	@ (8002f14 <HAL_I2C_Master_Receive+0x460>)
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fa27 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0cb      	b.n	8002f0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4955      	ldr	r1, [pc, #340]	@ (8002f14 <HAL_I2C_Master_Receive+0x460>)
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f9f9 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e09d      	b.n	8002f0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e44:	e04e      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fb5e 	bl	800350c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e058      	b.n	8002f0c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d124      	bne.n	8002ee4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d107      	bne.n	8002eb2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f aeb6 	bne.w	8002c5a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3728      	adds	r7, #40	@ 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	00010004 	.word	0x00010004

08002f18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	460b      	mov	r3, r1
 8002f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d006      	beq.n	8002f42 <I2C_MasterRequestWrite+0x2a>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d003      	beq.n	8002f42 <I2C_MasterRequestWrite+0x2a>
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f40:	d108      	bne.n	8002f54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e00b      	b.n	8002f6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	2b12      	cmp	r3, #18
 8002f5a:	d107      	bne.n	8002f6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f91d 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f92:	d103      	bne.n	8002f9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e035      	b.n	800300c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fa8:	d108      	bne.n	8002fbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fb8:	611a      	str	r2, [r3, #16]
 8002fba:	e01b      	b.n	8002ff4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fbc:	897b      	ldrh	r3, [r7, #10]
 8002fbe:	11db      	asrs	r3, r3, #7
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f003 0306 	and.w	r3, r3, #6
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f063 030f 	orn	r3, r3, #15
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	490e      	ldr	r1, [pc, #56]	@ (8003014 <I2C_MasterRequestWrite+0xfc>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f966 	bl	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e010      	b.n	800300c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fea:	897b      	ldrh	r3, [r7, #10]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4907      	ldr	r1, [pc, #28]	@ (8003018 <I2C_MasterRequestWrite+0x100>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f956 	bl	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	00010008 	.word	0x00010008
 8003018:	00010002 	.word	0x00010002

0800301c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	460b      	mov	r3, r1
 800302a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003040:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b08      	cmp	r3, #8
 8003046:	d006      	beq.n	8003056 <I2C_MasterRequestRead+0x3a>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d003      	beq.n	8003056 <I2C_MasterRequestRead+0x3a>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003054:	d108      	bne.n	8003068 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e00b      	b.n	8003080 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	2b11      	cmp	r3, #17
 800306e:	d107      	bne.n	8003080 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800307e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f893 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030a6:	d103      	bne.n	80030b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e079      	b.n	80031a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030bc:	d108      	bne.n	80030d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	611a      	str	r2, [r3, #16]
 80030ce:	e05f      	b.n	8003190 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030d0:	897b      	ldrh	r3, [r7, #10]
 80030d2:	11db      	asrs	r3, r3, #7
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f003 0306 	and.w	r3, r3, #6
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f063 030f 	orn	r3, r3, #15
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4930      	ldr	r1, [pc, #192]	@ (80031b0 <I2C_MasterRequestRead+0x194>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f8dc 	bl	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e054      	b.n	80031a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4929      	ldr	r1, [pc, #164]	@ (80031b4 <I2C_MasterRequestRead+0x198>)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f8cc 	bl	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e044      	b.n	80031a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003142:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f831 	bl	80031b8 <I2C_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00d      	beq.n	8003178 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800316a:	d103      	bne.n	8003174 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e017      	b.n	80031a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003178:	897b      	ldrh	r3, [r7, #10]
 800317a:	11db      	asrs	r3, r3, #7
 800317c:	b2db      	uxtb	r3, r3
 800317e:	f003 0306 	and.w	r3, r3, #6
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f063 030e 	orn	r3, r3, #14
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4907      	ldr	r1, [pc, #28]	@ (80031b4 <I2C_MasterRequestRead+0x198>)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f888 	bl	80032ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	00010008 	.word	0x00010008
 80031b4:	00010002 	.word	0x00010002

080031b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c8:	e048      	b.n	800325c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d044      	beq.n	800325c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d2:	f7fe ff39 	bl	8002048 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d302      	bcc.n	80031e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d139      	bne.n	800325c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d10d      	bne.n	800320e <I2C_WaitOnFlagUntilTimeout+0x56>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	43da      	mvns	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4013      	ands	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	e00c      	b.n	8003228 <I2C_WaitOnFlagUntilTimeout+0x70>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	43da      	mvns	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	4013      	ands	r3, r2
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	429a      	cmp	r2, r3
 800322c:	d116      	bne.n	800325c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e023      	b.n	80032a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d10d      	bne.n	8003282 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	43da      	mvns	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4013      	ands	r3, r2
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf0c      	ite	eq
 8003278:	2301      	moveq	r3, #1
 800327a:	2300      	movne	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	e00c      	b.n	800329c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	43da      	mvns	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4013      	ands	r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d093      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ba:	e071      	b.n	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ca:	d123      	bne.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e067      	b.n	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d041      	beq.n	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331c:	f7fe fe94 	bl	8002048 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d302      	bcc.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d136      	bne.n	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	0c1b      	lsrs	r3, r3, #16
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d10c      	bne.n	8003356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf14      	ite	ne
 800334e:	2301      	movne	r3, #1
 8003350:	2300      	moveq	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	e00b      	b.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	43da      	mvns	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d016      	beq.n	80033a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e021      	b.n	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	0c1b      	lsrs	r3, r3, #16
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d10c      	bne.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	43da      	mvns	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	4013      	ands	r3, r2
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e00b      	b.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4013      	ands	r3, r2
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f47f af6d 	bne.w	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f8:	e034      	b.n	8003464 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f8e3 	bl	80035c6 <I2C_IsAcknowledgeFailed>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e034      	b.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d028      	beq.n	8003464 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003412:	f7fe fe19 	bl	8002048 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11d      	bne.n	8003464 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003432:	2b80      	cmp	r3, #128	@ 0x80
 8003434:	d016      	beq.n	8003464 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e007      	b.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346e:	2b80      	cmp	r3, #128	@ 0x80
 8003470:	d1c3      	bne.n	80033fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003488:	e034      	b.n	80034f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f89b 	bl	80035c6 <I2C_IsAcknowledgeFailed>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e034      	b.n	8003504 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d028      	beq.n	80034f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7fe fdd1 	bl	8002048 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11d      	bne.n	80034f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d016      	beq.n	80034f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e007      	b.n	8003504 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d1c3      	bne.n	800348a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003518:	e049      	b.n	80035ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b10      	cmp	r3, #16
 8003526:	d119      	bne.n	800355c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0210 	mvn.w	r2, #16
 8003530:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e030      	b.n	80035be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355c:	f7fe fd74 	bl	8002048 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	429a      	cmp	r2, r3
 800356a:	d302      	bcc.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d11d      	bne.n	80035ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357c:	2b40      	cmp	r3, #64	@ 0x40
 800357e:	d016      	beq.n	80035ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	f043 0220 	orr.w	r2, r3, #32
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e007      	b.n	80035be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b8:	2b40      	cmp	r3, #64	@ 0x40
 80035ba:	d1ae      	bne.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035dc:	d11b      	bne.n	8003616 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f043 0204 	orr.w	r2, r3, #4
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	d129      	bne.n	800368e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2224      	movs	r2, #36	@ 0x24
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0210 	bic.w	r2, r2, #16
 8003660:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d12a      	bne.n	800370c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2224      	movs	r2, #36	@ 0x24
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80036d6:	89fb      	ldrh	r3, [r7, #14]
 80036d8:	f023 030f 	bic.w	r3, r3, #15
 80036dc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	89fb      	ldrh	r3, [r7, #14]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	89fa      	ldrh	r2, [r7, #14]
 80036ee:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e267      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d075      	beq.n	8003826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800373a:	4b88      	ldr	r3, [pc, #544]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b04      	cmp	r3, #4
 8003744:	d00c      	beq.n	8003760 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003746:	4b85      	ldr	r3, [pc, #532]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800374e:	2b08      	cmp	r3, #8
 8003750:	d112      	bne.n	8003778 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003752:	4b82      	ldr	r3, [pc, #520]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800375a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800375e:	d10b      	bne.n	8003778 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	4b7e      	ldr	r3, [pc, #504]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05b      	beq.n	8003824 <HAL_RCC_OscConfig+0x108>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d157      	bne.n	8003824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e242      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003780:	d106      	bne.n	8003790 <HAL_RCC_OscConfig+0x74>
 8003782:	4b76      	ldr	r3, [pc, #472]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a75      	ldr	r2, [pc, #468]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e01d      	b.n	80037cc <HAL_RCC_OscConfig+0xb0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x98>
 800379a:	4b70      	ldr	r3, [pc, #448]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6f      	ldr	r2, [pc, #444]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80037a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4b6d      	ldr	r3, [pc, #436]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a6c      	ldr	r2, [pc, #432]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e00b      	b.n	80037cc <HAL_RCC_OscConfig+0xb0>
 80037b4:	4b69      	ldr	r3, [pc, #420]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a68      	ldr	r2, [pc, #416]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b66      	ldr	r3, [pc, #408]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a65      	ldr	r2, [pc, #404]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fe fc38 	bl	8002048 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fe fc34 	bl	8002048 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	@ 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e207      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	4b5b      	ldr	r3, [pc, #364]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0xc0>
 80037fa:	e014      	b.n	8003826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe fc24 	bl	8002048 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003804:	f7fe fc20 	bl	8002048 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	@ 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e1f3      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003816:	4b51      	ldr	r3, [pc, #324]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0xe8>
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d063      	beq.n	80038fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003832:	4b4a      	ldr	r3, [pc, #296]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383e:	4b47      	ldr	r3, [pc, #284]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003846:	2b08      	cmp	r3, #8
 8003848:	d11c      	bne.n	8003884 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384a:	4b44      	ldr	r3, [pc, #272]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d116      	bne.n	8003884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003856:	4b41      	ldr	r3, [pc, #260]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_RCC_OscConfig+0x152>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d001      	beq.n	800386e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e1c7      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	4b3b      	ldr	r3, [pc, #236]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4937      	ldr	r1, [pc, #220]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	e03a      	b.n	80038fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800388c:	4b34      	ldr	r3, [pc, #208]	@ (8003960 <HAL_RCC_OscConfig+0x244>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7fe fbd9 	bl	8002048 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389a:	f7fe fbd5 	bl	8002048 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e1a8      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ac:	4b2b      	ldr	r3, [pc, #172]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b8:	4b28      	ldr	r3, [pc, #160]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4925      	ldr	r1, [pc, #148]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]
 80038cc:	e015      	b.n	80038fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ce:	4b24      	ldr	r3, [pc, #144]	@ (8003960 <HAL_RCC_OscConfig+0x244>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe fbb8 	bl	8002048 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038dc:	f7fe fbb4 	bl	8002048 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e187      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ee:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d036      	beq.n	8003974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d016      	beq.n	800393c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390e:	4b15      	ldr	r3, [pc, #84]	@ (8003964 <HAL_RCC_OscConfig+0x248>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fe fb98 	bl	8002048 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391c:	f7fe fb94 	bl	8002048 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e167      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392e:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <HAL_RCC_OscConfig+0x240>)
 8003930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x200>
 800393a:	e01b      	b.n	8003974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800393c:	4b09      	ldr	r3, [pc, #36]	@ (8003964 <HAL_RCC_OscConfig+0x248>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003942:	f7fe fb81 	bl	8002048 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003948:	e00e      	b.n	8003968 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394a:	f7fe fb7d 	bl	8002048 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d907      	bls.n	8003968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e150      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
 800395c:	40023800 	.word	0x40023800
 8003960:	42470000 	.word	0x42470000
 8003964:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	4b88      	ldr	r3, [pc, #544]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 800396a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ea      	bne.n	800394a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8097 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003982:	2300      	movs	r3, #0
 8003984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003986:	4b81      	ldr	r3, [pc, #516]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	4b7d      	ldr	r3, [pc, #500]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039a2:	4b7a      	ldr	r3, [pc, #488]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	4b77      	ldr	r3, [pc, #476]	@ (8003b90 <HAL_RCC_OscConfig+0x474>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d118      	bne.n	80039f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039be:	4b74      	ldr	r3, [pc, #464]	@ (8003b90 <HAL_RCC_OscConfig+0x474>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a73      	ldr	r2, [pc, #460]	@ (8003b90 <HAL_RCC_OscConfig+0x474>)
 80039c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ca:	f7fe fb3d 	bl	8002048 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d2:	f7fe fb39 	bl	8002048 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e10c      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b90 <HAL_RCC_OscConfig+0x474>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x2ea>
 80039f8:	4b64      	ldr	r3, [pc, #400]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fc:	4a63      	ldr	r2, [pc, #396]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a04:	e01c      	b.n	8003a40 <HAL_RCC_OscConfig+0x324>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x30c>
 8003a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a12:	4a5e      	ldr	r2, [pc, #376]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003a14:	f043 0304 	orr.w	r3, r3, #4
 8003a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a26:	e00b      	b.n	8003a40 <HAL_RCC_OscConfig+0x324>
 8003a28:	4b58      	ldr	r3, [pc, #352]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2c:	4a57      	ldr	r2, [pc, #348]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a34:	4b55      	ldr	r3, [pc, #340]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a38:	4a54      	ldr	r2, [pc, #336]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003a3a:	f023 0304 	bic.w	r3, r3, #4
 8003a3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d015      	beq.n	8003a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a48:	f7fe fafe 	bl	8002048 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a50:	f7fe fafa 	bl	8002048 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e0cb      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a66:	4b49      	ldr	r3, [pc, #292]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0ee      	beq.n	8003a50 <HAL_RCC_OscConfig+0x334>
 8003a72:	e014      	b.n	8003a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a74:	f7fe fae8 	bl	8002048 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7c:	f7fe fae4 	bl	8002048 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e0b5      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a92:	4b3e      	ldr	r3, [pc, #248]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1ee      	bne.n	8003a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d105      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa4:	4b39      	ldr	r3, [pc, #228]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	4a38      	ldr	r2, [pc, #224]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80a1 	beq.w	8003bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aba:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d05c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d141      	bne.n	8003b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ace:	4b31      	ldr	r3, [pc, #196]	@ (8003b94 <HAL_RCC_OscConfig+0x478>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fab8 	bl	8002048 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fe fab4 	bl	8002048 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e087      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aee:	4b27      	ldr	r3, [pc, #156]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	019b      	lsls	r3, r3, #6
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	3b01      	subs	r3, #1
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	491b      	ldr	r1, [pc, #108]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b24:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_RCC_OscConfig+0x478>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fa8d 	bl	8002048 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b32:	f7fe fa89 	bl	8002048 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e05c      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b44:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x416>
 8003b50:	e054      	b.n	8003bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b52:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <HAL_RCC_OscConfig+0x478>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fe fa76 	bl	8002048 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe fa72 	bl	8002048 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e045      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_RCC_OscConfig+0x470>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x444>
 8003b7e:	e03d      	b.n	8003bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d107      	bne.n	8003b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e038      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40007000 	.word	0x40007000
 8003b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b98:	4b1b      	ldr	r3, [pc, #108]	@ (8003c08 <HAL_RCC_OscConfig+0x4ec>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d028      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d121      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d11a      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bc8:	4013      	ands	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d111      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	3b01      	subs	r3, #1
 8003be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800

08003c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0cc      	b.n	8003dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c20:	4b68      	ldr	r3, [pc, #416]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d90c      	bls.n	8003c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b65      	ldr	r3, [pc, #404]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b63      	ldr	r3, [pc, #396]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0b8      	b.n	8003dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d020      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c60:	4b59      	ldr	r3, [pc, #356]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a58      	ldr	r2, [pc, #352]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c78:	4b53      	ldr	r3, [pc, #332]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c84:	4b50      	ldr	r3, [pc, #320]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	494d      	ldr	r1, [pc, #308]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d044      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	4b47      	ldr	r3, [pc, #284]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d119      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e07f      	b.n	8003dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cca:	4b3f      	ldr	r3, [pc, #252]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e06f      	b.n	8003dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cda:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e067      	b.n	8003dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cea:	4b37      	ldr	r3, [pc, #220]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f023 0203 	bic.w	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4934      	ldr	r1, [pc, #208]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cfc:	f7fe f9a4 	bl	8002048 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d04:	f7fe f9a0 	bl	8002048 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e04f      	b.n	8003dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 020c 	and.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d1eb      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b25      	ldr	r3, [pc, #148]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 030f 	and.w	r3, r3, #15
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d20c      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b22      	ldr	r3, [pc, #136]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b20      	ldr	r3, [pc, #128]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e032      	b.n	8003dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d60:	4b19      	ldr	r3, [pc, #100]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4916      	ldr	r1, [pc, #88]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d7e:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	490e      	ldr	r1, [pc, #56]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d92:	f000 f821 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d96:	4602      	mov	r2, r0
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	490a      	ldr	r1, [pc, #40]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003da4:	5ccb      	ldrb	r3, [r1, r3]
 8003da6:	fa22 f303 	lsr.w	r3, r2, r3
 8003daa:	4a09      	ldr	r2, [pc, #36]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003dae:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe f904 	bl	8001fc0 <HAL_InitTick>

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40023c00 	.word	0x40023c00
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	08007e60 	.word	0x08007e60
 8003dd0:	20000008 	.word	0x20000008
 8003dd4:	2000000c 	.word	0x2000000c

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ddc:	b090      	sub	sp, #64	@ 0x40
 8003dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df0:	4b59      	ldr	r3, [pc, #356]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d00d      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x40>
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	f200 80a1 	bhi.w	8003f44 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x34>
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e0a:	e09b      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e0c:	4b53      	ldr	r3, [pc, #332]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e10:	e09b      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e12:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e16:	e098      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e18:	4b4f      	ldr	r3, [pc, #316]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e22:	4b4d      	ldr	r3, [pc, #308]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d028      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	099b      	lsrs	r3, r3, #6
 8003e34:	2200      	movs	r2, #0
 8003e36:	623b      	str	r3, [r7, #32]
 8003e38:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e40:	2100      	movs	r1, #0
 8003e42:	4b47      	ldr	r3, [pc, #284]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e44:	fb03 f201 	mul.w	r2, r3, r1
 8003e48:	2300      	movs	r3, #0
 8003e4a:	fb00 f303 	mul.w	r3, r0, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	4a43      	ldr	r2, [pc, #268]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e52:	fba0 1202 	umull	r1, r2, r0, r2
 8003e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e58:	460a      	mov	r2, r1
 8003e5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e5e:	4413      	add	r3, r2
 8003e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e64:	2200      	movs	r2, #0
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	61fa      	str	r2, [r7, #28]
 8003e6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e72:	f7fc fef9 	bl	8000c68 <__aeabi_uldivmod>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e7e:	e053      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e80:	4b35      	ldr	r3, [pc, #212]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	2200      	movs	r2, #0
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	617a      	str	r2, [r7, #20]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e92:	f04f 0b00 	mov.w	fp, #0
 8003e96:	4652      	mov	r2, sl
 8003e98:	465b      	mov	r3, fp
 8003e9a:	f04f 0000 	mov.w	r0, #0
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	0159      	lsls	r1, r3, #5
 8003ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea8:	0150      	lsls	r0, r2, #5
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	ebb2 080a 	subs.w	r8, r2, sl
 8003eb2:	eb63 090b 	sbc.w	r9, r3, fp
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ec2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ec6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eca:	ebb2 0408 	subs.w	r4, r2, r8
 8003ece:	eb63 0509 	sbc.w	r5, r3, r9
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	00eb      	lsls	r3, r5, #3
 8003edc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ee0:	00e2      	lsls	r2, r4, #3
 8003ee2:	4614      	mov	r4, r2
 8003ee4:	461d      	mov	r5, r3
 8003ee6:	eb14 030a 	adds.w	r3, r4, sl
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	eb45 030b 	adc.w	r3, r5, fp
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003efe:	4629      	mov	r1, r5
 8003f00:	028b      	lsls	r3, r1, #10
 8003f02:	4621      	mov	r1, r4
 8003f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f08:	4621      	mov	r1, r4
 8003f0a:	028a      	lsls	r2, r1, #10
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f12:	2200      	movs	r2, #0
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	60fa      	str	r2, [r7, #12]
 8003f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f1c:	f7fc fea4 	bl	8000c68 <__aeabi_uldivmod>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4613      	mov	r3, r2
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f28:	4b0b      	ldr	r3, [pc, #44]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	3301      	adds	r3, #1
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f42:	e002      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f44:	4b05      	ldr	r3, [pc, #20]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3740      	adds	r7, #64	@ 0x40
 8003f50:	46bd      	mov	sp, r7
 8003f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	00f42400 	.word	0x00f42400
 8003f60:	017d7840 	.word	0x017d7840

08003f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f68:	4b03      	ldr	r3, [pc, #12]	@ (8003f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	20000008 	.word	0x20000008

08003f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f80:	f7ff fff0 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003f84:	4602      	mov	r2, r0
 8003f86:	4b05      	ldr	r3, [pc, #20]	@ (8003f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	0a9b      	lsrs	r3, r3, #10
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	4903      	ldr	r1, [pc, #12]	@ (8003fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f92:	5ccb      	ldrb	r3, [r1, r3]
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	08007e70 	.word	0x08007e70

08003fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fa8:	f7ff ffdc 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	0b5b      	lsrs	r3, r3, #13
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4903      	ldr	r1, [pc, #12]	@ (8003fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	08007e70 	.word	0x08007e70

08003fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e041      	b.n	8004062 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fe28 	bl	8001c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f000 f95e 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d001      	beq.n	8004084 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e046      	b.n	8004112 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a23      	ldr	r2, [pc, #140]	@ (8004120 <HAL_TIM_Base_Start+0xb4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409e:	d01d      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <HAL_TIM_Base_Start+0xb8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <HAL_TIM_Base_Start+0xbc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1c      	ldr	r2, [pc, #112]	@ (800412c <HAL_TIM_Base_Start+0xc0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <HAL_TIM_Base_Start+0xc4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a19      	ldr	r2, [pc, #100]	@ (8004134 <HAL_TIM_Base_Start+0xc8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_Base_Start+0x70>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a18      	ldr	r2, [pc, #96]	@ (8004138 <HAL_TIM_Base_Start+0xcc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d111      	bne.n	8004100 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d010      	beq.n	8004110 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	e007      	b.n	8004110 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40010000 	.word	0x40010000
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40010400 	.word	0x40010400
 8004134:	40014000 	.word	0x40014000
 8004138:	40001800 	.word	0x40001800

0800413c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIM_ConfigClockSource+0x1c>
 8004154:	2302      	movs	r3, #2
 8004156:	e0b4      	b.n	80042c2 <HAL_TIM_ConfigClockSource+0x186>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800417e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004190:	d03e      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0xd4>
 8004192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004196:	f200 8087 	bhi.w	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419e:	f000 8086 	beq.w	80042ae <HAL_TIM_ConfigClockSource+0x172>
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a6:	d87f      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b70      	cmp	r3, #112	@ 0x70
 80041aa:	d01a      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0xa6>
 80041ac:	2b70      	cmp	r3, #112	@ 0x70
 80041ae:	d87b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b0:	2b60      	cmp	r3, #96	@ 0x60
 80041b2:	d050      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x11a>
 80041b4:	2b60      	cmp	r3, #96	@ 0x60
 80041b6:	d877      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041b8:	2b50      	cmp	r3, #80	@ 0x50
 80041ba:	d03c      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xfa>
 80041bc:	2b50      	cmp	r3, #80	@ 0x50
 80041be:	d873      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c0:	2b40      	cmp	r3, #64	@ 0x40
 80041c2:	d058      	beq.n	8004276 <HAL_TIM_ConfigClockSource+0x13a>
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d86f      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041c8:	2b30      	cmp	r3, #48	@ 0x30
 80041ca:	d064      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041cc:	2b30      	cmp	r3, #48	@ 0x30
 80041ce:	d86b      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d060      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d867      	bhi.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d05c      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d05a      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0x15a>
 80041e0:	e062      	b.n	80042a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f2:	f000 f991 	bl	8004518 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004204:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	609a      	str	r2, [r3, #8]
      break;
 800420e:	e04f      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004220:	f000 f97a 	bl	8004518 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004232:	609a      	str	r2, [r3, #8]
      break;
 8004234:	e03c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004242:	461a      	mov	r2, r3
 8004244:	f000 f8ee 	bl	8004424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2150      	movs	r1, #80	@ 0x50
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f947 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8004254:	e02c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004262:	461a      	mov	r2, r3
 8004264:	f000 f90d 	bl	8004482 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2160      	movs	r1, #96	@ 0x60
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f937 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8004274:	e01c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	461a      	mov	r2, r3
 8004284:	f000 f8ce 	bl	8004424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2140      	movs	r1, #64	@ 0x40
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f927 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8004294:	e00c      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f000 f91e 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 80042a6:	e003      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e000      	b.n	80042b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a46      	ldr	r2, [pc, #280]	@ (80043f8 <TIM_Base_SetConfig+0x12c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ea:	d00f      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a43      	ldr	r2, [pc, #268]	@ (80043fc <TIM_Base_SetConfig+0x130>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00b      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a42      	ldr	r2, [pc, #264]	@ (8004400 <TIM_Base_SetConfig+0x134>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a41      	ldr	r2, [pc, #260]	@ (8004404 <TIM_Base_SetConfig+0x138>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a40      	ldr	r2, [pc, #256]	@ (8004408 <TIM_Base_SetConfig+0x13c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d108      	bne.n	800431e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a35      	ldr	r2, [pc, #212]	@ (80043f8 <TIM_Base_SetConfig+0x12c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d02b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800432c:	d027      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a32      	ldr	r2, [pc, #200]	@ (80043fc <TIM_Base_SetConfig+0x130>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d023      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a31      	ldr	r2, [pc, #196]	@ (8004400 <TIM_Base_SetConfig+0x134>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d01f      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a30      	ldr	r2, [pc, #192]	@ (8004404 <TIM_Base_SetConfig+0x138>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2f      	ldr	r2, [pc, #188]	@ (8004408 <TIM_Base_SetConfig+0x13c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d017      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2e      	ldr	r2, [pc, #184]	@ (800440c <TIM_Base_SetConfig+0x140>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d013      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2d      	ldr	r2, [pc, #180]	@ (8004410 <TIM_Base_SetConfig+0x144>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00f      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2c      	ldr	r2, [pc, #176]	@ (8004414 <TIM_Base_SetConfig+0x148>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2b      	ldr	r2, [pc, #172]	@ (8004418 <TIM_Base_SetConfig+0x14c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d007      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2a      	ldr	r2, [pc, #168]	@ (800441c <TIM_Base_SetConfig+0x150>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a29      	ldr	r2, [pc, #164]	@ (8004420 <TIM_Base_SetConfig+0x154>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a10      	ldr	r2, [pc, #64]	@ (80043f8 <TIM_Base_SetConfig+0x12c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_Base_SetConfig+0xf8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a12      	ldr	r2, [pc, #72]	@ (8004408 <TIM_Base_SetConfig+0x13c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d103      	bne.n	80043cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d105      	bne.n	80043ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f023 0201 	bic.w	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	611a      	str	r2, [r3, #16]
  }
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40010400 	.word	0x40010400
 800440c:	40014000 	.word	0x40014000
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800
 8004418:	40001800 	.word	0x40001800
 800441c:	40001c00 	.word	0x40001c00
 8004420:	40002000 	.word	0x40002000

08004424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f023 0201 	bic.w	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800444e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 030a 	bic.w	r3, r3, #10
 8004460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004482:	b480      	push	{r7}
 8004484:	b087      	sub	sp, #28
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f023 0210 	bic.w	r2, r3, #16
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	031b      	lsls	r3, r3, #12
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b085      	sub	sp, #20
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	f043 0307 	orr.w	r3, r3, #7
 8004504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	609a      	str	r2, [r3, #8]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	021a      	lsls	r2, r3, #8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	431a      	orrs	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4313      	orrs	r3, r2
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800456c:	2302      	movs	r3, #2
 800456e:	e05a      	b.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a21      	ldr	r2, [pc, #132]	@ (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d022      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045bc:	d01d      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d018      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1b      	ldr	r2, [pc, #108]	@ (800463c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a18      	ldr	r2, [pc, #96]	@ (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d009      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a17      	ldr	r2, [pc, #92]	@ (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a15      	ldr	r2, [pc, #84]	@ (800464c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10c      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	4313      	orrs	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40010400 	.word	0x40010400
 8004648:	40014000 	.word	0x40014000
 800464c:	40001800 	.word	0x40001800

08004650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e042      	b.n	80046e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd fb06 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	@ 0x24
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f973 	bl	8004980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	@ 0x28
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b20      	cmp	r3, #32
 800470e:	d175      	bne.n	80047fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_UART_Transmit+0x2c>
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e06e      	b.n	80047fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2221      	movs	r2, #33	@ 0x21
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800472e:	f7fd fc8b 	bl	8002048 <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004748:	d108      	bne.n	800475c <HAL_UART_Transmit+0x6c>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	e003      	b.n	8004764 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004764:	e02e      	b.n	80047c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2200      	movs	r2, #0
 800476e:	2180      	movs	r1, #128	@ 0x80
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 f848 	bl	8004806 <UART_WaitOnFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e03a      	b.n	80047fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10b      	bne.n	80047a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800479c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	3302      	adds	r3, #2
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	e007      	b.n	80047b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	781a      	ldrb	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	3301      	adds	r3, #1
 80047b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1cb      	bne.n	8004766 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2140      	movs	r1, #64	@ 0x40
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f814 	bl	8004806 <UART_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e006      	b.n	80047fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e000      	b.n	80047fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047fc:	2302      	movs	r3, #2
  }
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	603b      	str	r3, [r7, #0]
 8004812:	4613      	mov	r3, r2
 8004814:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004816:	e03b      	b.n	8004890 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d037      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004820:	f7fd fc12 	bl	8002048 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	6a3a      	ldr	r2, [r7, #32]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <UART_WaitOnFlagUntilTimeout+0x30>
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e03a      	b.n	80048b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d023      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b80      	cmp	r3, #128	@ 0x80
 800484c:	d020      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0x8a>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	d01d      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b08      	cmp	r3, #8
 8004860:	d116      	bne.n	8004890 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f81d 	bl	80048b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2208      	movs	r2, #8
 8004882:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e00f      	b.n	80048b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4013      	ands	r3, r2
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d0b4      	beq.n	8004818 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b095      	sub	sp, #84	@ 0x54
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80048e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e5      	bne.n	80048c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3314      	adds	r3, #20
 80048fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	61fb      	str	r3, [r7, #28]
   return(result);
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3314      	adds	r3, #20
 8004912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004914:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800491a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492c:	2b01      	cmp	r3, #1
 800492e:	d119      	bne.n	8004964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f023 0310 	bic.w	r3, r3, #16
 8004946:	647b      	str	r3, [r7, #68]	@ 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004950:	61ba      	str	r2, [r7, #24]
 8004952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6979      	ldr	r1, [r7, #20]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	613b      	str	r3, [r7, #16]
   return(result);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e5      	bne.n	8004930 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004972:	bf00      	nop
 8004974:	3754      	adds	r7, #84	@ 0x54
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004984:	b0c0      	sub	sp, #256	@ 0x100
 8004986:	af00      	add	r7, sp, #0
 8004988:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499c:	68d9      	ldr	r1, [r3, #12]
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	ea40 0301 	orr.w	r3, r0, r1
 80049a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	431a      	orrs	r2, r3
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049d8:	f021 010c 	bic.w	r1, r1, #12
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049e6:	430b      	orrs	r3, r1
 80049e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fa:	6999      	ldr	r1, [r3, #24]
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	ea40 0301 	orr.w	r3, r0, r1
 8004a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b8f      	ldr	r3, [pc, #572]	@ (8004c4c <UART_SetConfig+0x2cc>)
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d005      	beq.n	8004a20 <UART_SetConfig+0xa0>
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004c50 <UART_SetConfig+0x2d0>)
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d104      	bne.n	8004a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7ff fac0 	bl	8003fa4 <HAL_RCC_GetPCLK2Freq>
 8004a24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a28:	e003      	b.n	8004a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a2a:	f7ff faa7 	bl	8003f7c <HAL_RCC_GetPCLK1Freq>
 8004a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a3c:	f040 810c 	bne.w	8004c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a52:	4622      	mov	r2, r4
 8004a54:	462b      	mov	r3, r5
 8004a56:	1891      	adds	r1, r2, r2
 8004a58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a5a:	415b      	adcs	r3, r3
 8004a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a62:	4621      	mov	r1, r4
 8004a64:	eb12 0801 	adds.w	r8, r2, r1
 8004a68:	4629      	mov	r1, r5
 8004a6a:	eb43 0901 	adc.w	r9, r3, r1
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a82:	4690      	mov	r8, r2
 8004a84:	4699      	mov	r9, r3
 8004a86:	4623      	mov	r3, r4
 8004a88:	eb18 0303 	adds.w	r3, r8, r3
 8004a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a90:	462b      	mov	r3, r5
 8004a92:	eb49 0303 	adc.w	r3, r9, r3
 8004a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004aae:	460b      	mov	r3, r1
 8004ab0:	18db      	adds	r3, r3, r3
 8004ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	eb42 0303 	adc.w	r3, r2, r3
 8004aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8004abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ac4:	f7fc f8d0 	bl	8000c68 <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4b61      	ldr	r3, [pc, #388]	@ (8004c54 <UART_SetConfig+0x2d4>)
 8004ace:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	011c      	lsls	r4, r3, #4
 8004ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	1891      	adds	r1, r2, r2
 8004aee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004af0:	415b      	adcs	r3, r3
 8004af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004af8:	4641      	mov	r1, r8
 8004afa:	eb12 0a01 	adds.w	sl, r2, r1
 8004afe:	4649      	mov	r1, r9
 8004b00:	eb43 0b01 	adc.w	fp, r3, r1
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b18:	4692      	mov	sl, r2
 8004b1a:	469b      	mov	fp, r3
 8004b1c:	4643      	mov	r3, r8
 8004b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b26:	464b      	mov	r3, r9
 8004b28:	eb4b 0303 	adc.w	r3, fp, r3
 8004b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b44:	460b      	mov	r3, r1
 8004b46:	18db      	adds	r3, r3, r3
 8004b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b5a:	f7fc f885 	bl	8000c68 <__aeabi_uldivmod>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	4b3b      	ldr	r3, [pc, #236]	@ (8004c54 <UART_SetConfig+0x2d4>)
 8004b66:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2264      	movs	r2, #100	@ 0x64
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	1acb      	subs	r3, r1, r3
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b7a:	4b36      	ldr	r3, [pc, #216]	@ (8004c54 <UART_SetConfig+0x2d4>)
 8004b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b88:	441c      	add	r4, r3
 8004b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	1891      	adds	r1, r2, r2
 8004ba2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ba4:	415b      	adcs	r3, r3
 8004ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bac:	4641      	mov	r1, r8
 8004bae:	1851      	adds	r1, r2, r1
 8004bb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	414b      	adcs	r3, r1
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	00cb      	lsls	r3, r1, #3
 8004bc8:	4651      	mov	r1, sl
 8004bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bce:	4651      	mov	r1, sl
 8004bd0:	00ca      	lsls	r2, r1, #3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4642      	mov	r2, r8
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004be0:	464b      	mov	r3, r9
 8004be2:	460a      	mov	r2, r1
 8004be4:	eb42 0303 	adc.w	r3, r2, r3
 8004be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c00:	460b      	mov	r3, r1
 8004c02:	18db      	adds	r3, r3, r3
 8004c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c06:	4613      	mov	r3, r2
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c16:	f7fc f827 	bl	8000c68 <__aeabi_uldivmod>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <UART_SetConfig+0x2d4>)
 8004c20:	fba3 1302 	umull	r1, r3, r3, r2
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	2164      	movs	r1, #100	@ 0x64
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	3332      	adds	r3, #50	@ 0x32
 8004c32:	4a08      	ldr	r2, [pc, #32]	@ (8004c54 <UART_SetConfig+0x2d4>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	f003 0207 	and.w	r2, r3, #7
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4422      	add	r2, r4
 8004c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c48:	e106      	b.n	8004e58 <UART_SetConfig+0x4d8>
 8004c4a:	bf00      	nop
 8004c4c:	40011000 	.word	0x40011000
 8004c50:	40011400 	.word	0x40011400
 8004c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c6a:	4642      	mov	r2, r8
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	1891      	adds	r1, r2, r2
 8004c70:	6239      	str	r1, [r7, #32]
 8004c72:	415b      	adcs	r3, r3
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	1854      	adds	r4, r2, r1
 8004c7e:	4649      	mov	r1, r9
 8004c80:	eb43 0501 	adc.w	r5, r3, r1
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	00eb      	lsls	r3, r5, #3
 8004c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c92:	00e2      	lsls	r2, r4, #3
 8004c94:	4614      	mov	r4, r2
 8004c96:	461d      	mov	r5, r3
 8004c98:	4643      	mov	r3, r8
 8004c9a:	18e3      	adds	r3, r4, r3
 8004c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	eb45 0303 	adc.w	r3, r5, r3
 8004ca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	008b      	lsls	r3, r1, #2
 8004cca:	4621      	mov	r1, r4
 8004ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	008a      	lsls	r2, r1, #2
 8004cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cd8:	f7fb ffc6 	bl	8000c68 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4b60      	ldr	r3, [pc, #384]	@ (8004e64 <UART_SetConfig+0x4e4>)
 8004ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	011c      	lsls	r4, r3, #4
 8004cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	61b9      	str	r1, [r7, #24]
 8004d04:	415b      	adcs	r3, r3
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	1851      	adds	r1, r2, r1
 8004d10:	6139      	str	r1, [r7, #16]
 8004d12:	4649      	mov	r1, r9
 8004d14:	414b      	adcs	r3, r1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d24:	4659      	mov	r1, fp
 8004d26:	00cb      	lsls	r3, r1, #3
 8004d28:	4651      	mov	r1, sl
 8004d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2e:	4651      	mov	r1, sl
 8004d30:	00ca      	lsls	r2, r1, #3
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d40:	464b      	mov	r3, r9
 8004d42:	460a      	mov	r2, r1
 8004d44:	eb42 0303 	adc.w	r3, r2, r3
 8004d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d64:	4649      	mov	r1, r9
 8004d66:	008b      	lsls	r3, r1, #2
 8004d68:	4641      	mov	r1, r8
 8004d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6e:	4641      	mov	r1, r8
 8004d70:	008a      	lsls	r2, r1, #2
 8004d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d76:	f7fb ff77 	bl	8000c68 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4b38      	ldr	r3, [pc, #224]	@ (8004e64 <UART_SetConfig+0x4e4>)
 8004d82:	fba3 2301 	umull	r2, r3, r3, r1
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2264      	movs	r2, #100	@ 0x64
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	1acb      	subs	r3, r1, r3
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	3332      	adds	r3, #50	@ 0x32
 8004d94:	4a33      	ldr	r2, [pc, #204]	@ (8004e64 <UART_SetConfig+0x4e4>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004da0:	441c      	add	r4, r3
 8004da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da6:	2200      	movs	r2, #0
 8004da8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004daa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004db0:	4642      	mov	r2, r8
 8004db2:	464b      	mov	r3, r9
 8004db4:	1891      	adds	r1, r2, r2
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	415b      	adcs	r3, r3
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	1851      	adds	r1, r2, r1
 8004dc4:	6039      	str	r1, [r7, #0]
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	414b      	adcs	r3, r1
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dd8:	4659      	mov	r1, fp
 8004dda:	00cb      	lsls	r3, r1, #3
 8004ddc:	4651      	mov	r1, sl
 8004dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de2:	4651      	mov	r1, sl
 8004de4:	00ca      	lsls	r2, r1, #3
 8004de6:	4610      	mov	r0, r2
 8004de8:	4619      	mov	r1, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	4642      	mov	r2, r8
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004df2:	464b      	mov	r3, r9
 8004df4:	460a      	mov	r2, r1
 8004df6:	eb42 0303 	adc.w	r3, r2, r3
 8004dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e06:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e14:	4649      	mov	r1, r9
 8004e16:	008b      	lsls	r3, r1, #2
 8004e18:	4641      	mov	r1, r8
 8004e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1e:	4641      	mov	r1, r8
 8004e20:	008a      	lsls	r2, r1, #2
 8004e22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e26:	f7fb ff1f 	bl	8000c68 <__aeabi_uldivmod>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e64 <UART_SetConfig+0x4e4>)
 8004e30:	fba3 1302 	umull	r1, r3, r3, r2
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	2164      	movs	r1, #100	@ 0x64
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	3332      	adds	r3, #50	@ 0x32
 8004e42:	4a08      	ldr	r2, [pc, #32]	@ (8004e64 <UART_SetConfig+0x4e4>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4422      	add	r2, r4
 8004e56:	609a      	str	r2, [r3, #8]
}
 8004e58:	bf00      	nop
 8004e5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e64:	51eb851f 	.word	0x51eb851f

08004e68 <__cvt>:
 8004e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	ec57 6b10 	vmov	r6, r7, d0
 8004e70:	2f00      	cmp	r7, #0
 8004e72:	460c      	mov	r4, r1
 8004e74:	4619      	mov	r1, r3
 8004e76:	463b      	mov	r3, r7
 8004e78:	bfbb      	ittet	lt
 8004e7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004e7e:	461f      	movlt	r7, r3
 8004e80:	2300      	movge	r3, #0
 8004e82:	232d      	movlt	r3, #45	@ 0x2d
 8004e84:	700b      	strb	r3, [r1, #0]
 8004e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004e8c:	4691      	mov	r9, r2
 8004e8e:	f023 0820 	bic.w	r8, r3, #32
 8004e92:	bfbc      	itt	lt
 8004e94:	4632      	movlt	r2, r6
 8004e96:	4616      	movlt	r6, r2
 8004e98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e9c:	d005      	beq.n	8004eaa <__cvt+0x42>
 8004e9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ea2:	d100      	bne.n	8004ea6 <__cvt+0x3e>
 8004ea4:	3401      	adds	r4, #1
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	e000      	b.n	8004eac <__cvt+0x44>
 8004eaa:	2103      	movs	r1, #3
 8004eac:	ab03      	add	r3, sp, #12
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	ab02      	add	r3, sp, #8
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	ec47 6b10 	vmov	d0, r6, r7
 8004eb8:	4653      	mov	r3, sl
 8004eba:	4622      	mov	r2, r4
 8004ebc:	f000 fe70 	bl	8005ba0 <_dtoa_r>
 8004ec0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	d119      	bne.n	8004efc <__cvt+0x94>
 8004ec8:	f019 0f01 	tst.w	r9, #1
 8004ecc:	d00e      	beq.n	8004eec <__cvt+0x84>
 8004ece:	eb00 0904 	add.w	r9, r0, r4
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4639      	mov	r1, r7
 8004eda:	f7fb fe05 	bl	8000ae8 <__aeabi_dcmpeq>
 8004ede:	b108      	cbz	r0, 8004ee4 <__cvt+0x7c>
 8004ee0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ee4:	2230      	movs	r2, #48	@ 0x30
 8004ee6:	9b03      	ldr	r3, [sp, #12]
 8004ee8:	454b      	cmp	r3, r9
 8004eea:	d31e      	bcc.n	8004f2a <__cvt+0xc2>
 8004eec:	9b03      	ldr	r3, [sp, #12]
 8004eee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ef0:	1b5b      	subs	r3, r3, r5
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	b004      	add	sp, #16
 8004ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f00:	eb00 0904 	add.w	r9, r0, r4
 8004f04:	d1e5      	bne.n	8004ed2 <__cvt+0x6a>
 8004f06:	7803      	ldrb	r3, [r0, #0]
 8004f08:	2b30      	cmp	r3, #48	@ 0x30
 8004f0a:	d10a      	bne.n	8004f22 <__cvt+0xba>
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2300      	movs	r3, #0
 8004f10:	4630      	mov	r0, r6
 8004f12:	4639      	mov	r1, r7
 8004f14:	f7fb fde8 	bl	8000ae8 <__aeabi_dcmpeq>
 8004f18:	b918      	cbnz	r0, 8004f22 <__cvt+0xba>
 8004f1a:	f1c4 0401 	rsb	r4, r4, #1
 8004f1e:	f8ca 4000 	str.w	r4, [sl]
 8004f22:	f8da 3000 	ldr.w	r3, [sl]
 8004f26:	4499      	add	r9, r3
 8004f28:	e7d3      	b.n	8004ed2 <__cvt+0x6a>
 8004f2a:	1c59      	adds	r1, r3, #1
 8004f2c:	9103      	str	r1, [sp, #12]
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e7d9      	b.n	8004ee6 <__cvt+0x7e>

08004f32 <__exponent>:
 8004f32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f34:	2900      	cmp	r1, #0
 8004f36:	bfba      	itte	lt
 8004f38:	4249      	neglt	r1, r1
 8004f3a:	232d      	movlt	r3, #45	@ 0x2d
 8004f3c:	232b      	movge	r3, #43	@ 0x2b
 8004f3e:	2909      	cmp	r1, #9
 8004f40:	7002      	strb	r2, [r0, #0]
 8004f42:	7043      	strb	r3, [r0, #1]
 8004f44:	dd29      	ble.n	8004f9a <__exponent+0x68>
 8004f46:	f10d 0307 	add.w	r3, sp, #7
 8004f4a:	461d      	mov	r5, r3
 8004f4c:	270a      	movs	r7, #10
 8004f4e:	461a      	mov	r2, r3
 8004f50:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f54:	fb07 1416 	mls	r4, r7, r6, r1
 8004f58:	3430      	adds	r4, #48	@ 0x30
 8004f5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f5e:	460c      	mov	r4, r1
 8004f60:	2c63      	cmp	r4, #99	@ 0x63
 8004f62:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f66:	4631      	mov	r1, r6
 8004f68:	dcf1      	bgt.n	8004f4e <__exponent+0x1c>
 8004f6a:	3130      	adds	r1, #48	@ 0x30
 8004f6c:	1e94      	subs	r4, r2, #2
 8004f6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f72:	1c41      	adds	r1, r0, #1
 8004f74:	4623      	mov	r3, r4
 8004f76:	42ab      	cmp	r3, r5
 8004f78:	d30a      	bcc.n	8004f90 <__exponent+0x5e>
 8004f7a:	f10d 0309 	add.w	r3, sp, #9
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	42ac      	cmp	r4, r5
 8004f82:	bf88      	it	hi
 8004f84:	2300      	movhi	r3, #0
 8004f86:	3302      	adds	r3, #2
 8004f88:	4403      	add	r3, r0
 8004f8a:	1a18      	subs	r0, r3, r0
 8004f8c:	b003      	add	sp, #12
 8004f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f98:	e7ed      	b.n	8004f76 <__exponent+0x44>
 8004f9a:	2330      	movs	r3, #48	@ 0x30
 8004f9c:	3130      	adds	r1, #48	@ 0x30
 8004f9e:	7083      	strb	r3, [r0, #2]
 8004fa0:	70c1      	strb	r1, [r0, #3]
 8004fa2:	1d03      	adds	r3, r0, #4
 8004fa4:	e7f1      	b.n	8004f8a <__exponent+0x58>
	...

08004fa8 <_printf_float>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	b08d      	sub	sp, #52	@ 0x34
 8004fae:	460c      	mov	r4, r1
 8004fb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	461f      	mov	r7, r3
 8004fb8:	4605      	mov	r5, r0
 8004fba:	f000 fcef 	bl	800599c <_localeconv_r>
 8004fbe:	6803      	ldr	r3, [r0, #0]
 8004fc0:	9304      	str	r3, [sp, #16]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fb f964 	bl	8000290 <strlen>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd0:	9005      	str	r0, [sp, #20]
 8004fd2:	3307      	adds	r3, #7
 8004fd4:	f023 0307 	bic.w	r3, r3, #7
 8004fd8:	f103 0208 	add.w	r2, r3, #8
 8004fdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004fe0:	f8d4 b000 	ldr.w	fp, [r4]
 8004fe4:	f8c8 2000 	str.w	r2, [r8]
 8004fe8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ff0:	9307      	str	r3, [sp, #28]
 8004ff2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ff6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ffe:	4b9c      	ldr	r3, [pc, #624]	@ (8005270 <_printf_float+0x2c8>)
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	f7fb fda2 	bl	8000b4c <__aeabi_dcmpun>
 8005008:	bb70      	cbnz	r0, 8005068 <_printf_float+0xc0>
 800500a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800500e:	4b98      	ldr	r3, [pc, #608]	@ (8005270 <_printf_float+0x2c8>)
 8005010:	f04f 32ff 	mov.w	r2, #4294967295
 8005014:	f7fb fd7c 	bl	8000b10 <__aeabi_dcmple>
 8005018:	bb30      	cbnz	r0, 8005068 <_printf_float+0xc0>
 800501a:	2200      	movs	r2, #0
 800501c:	2300      	movs	r3, #0
 800501e:	4640      	mov	r0, r8
 8005020:	4649      	mov	r1, r9
 8005022:	f7fb fd6b 	bl	8000afc <__aeabi_dcmplt>
 8005026:	b110      	cbz	r0, 800502e <_printf_float+0x86>
 8005028:	232d      	movs	r3, #45	@ 0x2d
 800502a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800502e:	4a91      	ldr	r2, [pc, #580]	@ (8005274 <_printf_float+0x2cc>)
 8005030:	4b91      	ldr	r3, [pc, #580]	@ (8005278 <_printf_float+0x2d0>)
 8005032:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005036:	bf94      	ite	ls
 8005038:	4690      	movls	r8, r2
 800503a:	4698      	movhi	r8, r3
 800503c:	2303      	movs	r3, #3
 800503e:	6123      	str	r3, [r4, #16]
 8005040:	f02b 0304 	bic.w	r3, fp, #4
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	f04f 0900 	mov.w	r9, #0
 800504a:	9700      	str	r7, [sp, #0]
 800504c:	4633      	mov	r3, r6
 800504e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005050:	4621      	mov	r1, r4
 8005052:	4628      	mov	r0, r5
 8005054:	f000 f9d2 	bl	80053fc <_printf_common>
 8005058:	3001      	adds	r0, #1
 800505a:	f040 808d 	bne.w	8005178 <_printf_float+0x1d0>
 800505e:	f04f 30ff 	mov.w	r0, #4294967295
 8005062:	b00d      	add	sp, #52	@ 0x34
 8005064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005068:	4642      	mov	r2, r8
 800506a:	464b      	mov	r3, r9
 800506c:	4640      	mov	r0, r8
 800506e:	4649      	mov	r1, r9
 8005070:	f7fb fd6c 	bl	8000b4c <__aeabi_dcmpun>
 8005074:	b140      	cbz	r0, 8005088 <_printf_float+0xe0>
 8005076:	464b      	mov	r3, r9
 8005078:	2b00      	cmp	r3, #0
 800507a:	bfbc      	itt	lt
 800507c:	232d      	movlt	r3, #45	@ 0x2d
 800507e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005082:	4a7e      	ldr	r2, [pc, #504]	@ (800527c <_printf_float+0x2d4>)
 8005084:	4b7e      	ldr	r3, [pc, #504]	@ (8005280 <_printf_float+0x2d8>)
 8005086:	e7d4      	b.n	8005032 <_printf_float+0x8a>
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800508e:	9206      	str	r2, [sp, #24]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	d13b      	bne.n	800510c <_printf_float+0x164>
 8005094:	2306      	movs	r3, #6
 8005096:	6063      	str	r3, [r4, #4]
 8005098:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800509c:	2300      	movs	r3, #0
 800509e:	6022      	str	r2, [r4, #0]
 80050a0:	9303      	str	r3, [sp, #12]
 80050a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80050a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80050a8:	ab09      	add	r3, sp, #36	@ 0x24
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	6861      	ldr	r1, [r4, #4]
 80050ae:	ec49 8b10 	vmov	d0, r8, r9
 80050b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80050b6:	4628      	mov	r0, r5
 80050b8:	f7ff fed6 	bl	8004e68 <__cvt>
 80050bc:	9b06      	ldr	r3, [sp, #24]
 80050be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050c0:	2b47      	cmp	r3, #71	@ 0x47
 80050c2:	4680      	mov	r8, r0
 80050c4:	d129      	bne.n	800511a <_printf_float+0x172>
 80050c6:	1cc8      	adds	r0, r1, #3
 80050c8:	db02      	blt.n	80050d0 <_printf_float+0x128>
 80050ca:	6863      	ldr	r3, [r4, #4]
 80050cc:	4299      	cmp	r1, r3
 80050ce:	dd41      	ble.n	8005154 <_printf_float+0x1ac>
 80050d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80050d4:	fa5f fa8a 	uxtb.w	sl, sl
 80050d8:	3901      	subs	r1, #1
 80050da:	4652      	mov	r2, sl
 80050dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80050e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80050e2:	f7ff ff26 	bl	8004f32 <__exponent>
 80050e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050e8:	1813      	adds	r3, r2, r0
 80050ea:	2a01      	cmp	r2, #1
 80050ec:	4681      	mov	r9, r0
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	dc02      	bgt.n	80050f8 <_printf_float+0x150>
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	07d2      	lsls	r2, r2, #31
 80050f6:	d501      	bpl.n	80050fc <_printf_float+0x154>
 80050f8:	3301      	adds	r3, #1
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0a2      	beq.n	800504a <_printf_float+0xa2>
 8005104:	232d      	movs	r3, #45	@ 0x2d
 8005106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800510a:	e79e      	b.n	800504a <_printf_float+0xa2>
 800510c:	9a06      	ldr	r2, [sp, #24]
 800510e:	2a47      	cmp	r2, #71	@ 0x47
 8005110:	d1c2      	bne.n	8005098 <_printf_float+0xf0>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1c0      	bne.n	8005098 <_printf_float+0xf0>
 8005116:	2301      	movs	r3, #1
 8005118:	e7bd      	b.n	8005096 <_printf_float+0xee>
 800511a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800511e:	d9db      	bls.n	80050d8 <_printf_float+0x130>
 8005120:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005124:	d118      	bne.n	8005158 <_printf_float+0x1b0>
 8005126:	2900      	cmp	r1, #0
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	dd0b      	ble.n	8005144 <_printf_float+0x19c>
 800512c:	6121      	str	r1, [r4, #16]
 800512e:	b913      	cbnz	r3, 8005136 <_printf_float+0x18e>
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	07d0      	lsls	r0, r2, #31
 8005134:	d502      	bpl.n	800513c <_printf_float+0x194>
 8005136:	3301      	adds	r3, #1
 8005138:	440b      	add	r3, r1
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800513e:	f04f 0900 	mov.w	r9, #0
 8005142:	e7db      	b.n	80050fc <_printf_float+0x154>
 8005144:	b913      	cbnz	r3, 800514c <_printf_float+0x1a4>
 8005146:	6822      	ldr	r2, [r4, #0]
 8005148:	07d2      	lsls	r2, r2, #31
 800514a:	d501      	bpl.n	8005150 <_printf_float+0x1a8>
 800514c:	3302      	adds	r3, #2
 800514e:	e7f4      	b.n	800513a <_printf_float+0x192>
 8005150:	2301      	movs	r3, #1
 8005152:	e7f2      	b.n	800513a <_printf_float+0x192>
 8005154:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800515a:	4299      	cmp	r1, r3
 800515c:	db05      	blt.n	800516a <_printf_float+0x1c2>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	6121      	str	r1, [r4, #16]
 8005162:	07d8      	lsls	r0, r3, #31
 8005164:	d5ea      	bpl.n	800513c <_printf_float+0x194>
 8005166:	1c4b      	adds	r3, r1, #1
 8005168:	e7e7      	b.n	800513a <_printf_float+0x192>
 800516a:	2900      	cmp	r1, #0
 800516c:	bfd4      	ite	le
 800516e:	f1c1 0202 	rsble	r2, r1, #2
 8005172:	2201      	movgt	r2, #1
 8005174:	4413      	add	r3, r2
 8005176:	e7e0      	b.n	800513a <_printf_float+0x192>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	055a      	lsls	r2, r3, #21
 800517c:	d407      	bmi.n	800518e <_printf_float+0x1e6>
 800517e:	6923      	ldr	r3, [r4, #16]
 8005180:	4642      	mov	r2, r8
 8005182:	4631      	mov	r1, r6
 8005184:	4628      	mov	r0, r5
 8005186:	47b8      	blx	r7
 8005188:	3001      	adds	r0, #1
 800518a:	d12b      	bne.n	80051e4 <_printf_float+0x23c>
 800518c:	e767      	b.n	800505e <_printf_float+0xb6>
 800518e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005192:	f240 80dd 	bls.w	8005350 <_printf_float+0x3a8>
 8005196:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800519a:	2200      	movs	r2, #0
 800519c:	2300      	movs	r3, #0
 800519e:	f7fb fca3 	bl	8000ae8 <__aeabi_dcmpeq>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d033      	beq.n	800520e <_printf_float+0x266>
 80051a6:	4a37      	ldr	r2, [pc, #220]	@ (8005284 <_printf_float+0x2dc>)
 80051a8:	2301      	movs	r3, #1
 80051aa:	4631      	mov	r1, r6
 80051ac:	4628      	mov	r0, r5
 80051ae:	47b8      	blx	r7
 80051b0:	3001      	adds	r0, #1
 80051b2:	f43f af54 	beq.w	800505e <_printf_float+0xb6>
 80051b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80051ba:	4543      	cmp	r3, r8
 80051bc:	db02      	blt.n	80051c4 <_printf_float+0x21c>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	07d8      	lsls	r0, r3, #31
 80051c2:	d50f      	bpl.n	80051e4 <_printf_float+0x23c>
 80051c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	47b8      	blx	r7
 80051ce:	3001      	adds	r0, #1
 80051d0:	f43f af45 	beq.w	800505e <_printf_float+0xb6>
 80051d4:	f04f 0900 	mov.w	r9, #0
 80051d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80051dc:	f104 0a1a 	add.w	sl, r4, #26
 80051e0:	45c8      	cmp	r8, r9
 80051e2:	dc09      	bgt.n	80051f8 <_printf_float+0x250>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	079b      	lsls	r3, r3, #30
 80051e8:	f100 8103 	bmi.w	80053f2 <_printf_float+0x44a>
 80051ec:	68e0      	ldr	r0, [r4, #12]
 80051ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051f0:	4298      	cmp	r0, r3
 80051f2:	bfb8      	it	lt
 80051f4:	4618      	movlt	r0, r3
 80051f6:	e734      	b.n	8005062 <_printf_float+0xba>
 80051f8:	2301      	movs	r3, #1
 80051fa:	4652      	mov	r2, sl
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	f43f af2b 	beq.w	800505e <_printf_float+0xb6>
 8005208:	f109 0901 	add.w	r9, r9, #1
 800520c:	e7e8      	b.n	80051e0 <_printf_float+0x238>
 800520e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	dc39      	bgt.n	8005288 <_printf_float+0x2e0>
 8005214:	4a1b      	ldr	r2, [pc, #108]	@ (8005284 <_printf_float+0x2dc>)
 8005216:	2301      	movs	r3, #1
 8005218:	4631      	mov	r1, r6
 800521a:	4628      	mov	r0, r5
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	f43f af1d 	beq.w	800505e <_printf_float+0xb6>
 8005224:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005228:	ea59 0303 	orrs.w	r3, r9, r3
 800522c:	d102      	bne.n	8005234 <_printf_float+0x28c>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	07d9      	lsls	r1, r3, #31
 8005232:	d5d7      	bpl.n	80051e4 <_printf_float+0x23c>
 8005234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f af0d 	beq.w	800505e <_printf_float+0xb6>
 8005244:	f04f 0a00 	mov.w	sl, #0
 8005248:	f104 0b1a 	add.w	fp, r4, #26
 800524c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800524e:	425b      	negs	r3, r3
 8005250:	4553      	cmp	r3, sl
 8005252:	dc01      	bgt.n	8005258 <_printf_float+0x2b0>
 8005254:	464b      	mov	r3, r9
 8005256:	e793      	b.n	8005180 <_printf_float+0x1d8>
 8005258:	2301      	movs	r3, #1
 800525a:	465a      	mov	r2, fp
 800525c:	4631      	mov	r1, r6
 800525e:	4628      	mov	r0, r5
 8005260:	47b8      	blx	r7
 8005262:	3001      	adds	r0, #1
 8005264:	f43f aefb 	beq.w	800505e <_printf_float+0xb6>
 8005268:	f10a 0a01 	add.w	sl, sl, #1
 800526c:	e7ee      	b.n	800524c <_printf_float+0x2a4>
 800526e:	bf00      	nop
 8005270:	7fefffff 	.word	0x7fefffff
 8005274:	08007e78 	.word	0x08007e78
 8005278:	08007e7c 	.word	0x08007e7c
 800527c:	08007e80 	.word	0x08007e80
 8005280:	08007e84 	.word	0x08007e84
 8005284:	08007e88 	.word	0x08007e88
 8005288:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800528a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800528e:	4553      	cmp	r3, sl
 8005290:	bfa8      	it	ge
 8005292:	4653      	movge	r3, sl
 8005294:	2b00      	cmp	r3, #0
 8005296:	4699      	mov	r9, r3
 8005298:	dc36      	bgt.n	8005308 <_printf_float+0x360>
 800529a:	f04f 0b00 	mov.w	fp, #0
 800529e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052a2:	f104 021a 	add.w	r2, r4, #26
 80052a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052a8:	9306      	str	r3, [sp, #24]
 80052aa:	eba3 0309 	sub.w	r3, r3, r9
 80052ae:	455b      	cmp	r3, fp
 80052b0:	dc31      	bgt.n	8005316 <_printf_float+0x36e>
 80052b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052b4:	459a      	cmp	sl, r3
 80052b6:	dc3a      	bgt.n	800532e <_printf_float+0x386>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	07da      	lsls	r2, r3, #31
 80052bc:	d437      	bmi.n	800532e <_printf_float+0x386>
 80052be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052c0:	ebaa 0903 	sub.w	r9, sl, r3
 80052c4:	9b06      	ldr	r3, [sp, #24]
 80052c6:	ebaa 0303 	sub.w	r3, sl, r3
 80052ca:	4599      	cmp	r9, r3
 80052cc:	bfa8      	it	ge
 80052ce:	4699      	movge	r9, r3
 80052d0:	f1b9 0f00 	cmp.w	r9, #0
 80052d4:	dc33      	bgt.n	800533e <_printf_float+0x396>
 80052d6:	f04f 0800 	mov.w	r8, #0
 80052da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052de:	f104 0b1a 	add.w	fp, r4, #26
 80052e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e4:	ebaa 0303 	sub.w	r3, sl, r3
 80052e8:	eba3 0309 	sub.w	r3, r3, r9
 80052ec:	4543      	cmp	r3, r8
 80052ee:	f77f af79 	ble.w	80051e4 <_printf_float+0x23c>
 80052f2:	2301      	movs	r3, #1
 80052f4:	465a      	mov	r2, fp
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f aeae 	beq.w	800505e <_printf_float+0xb6>
 8005302:	f108 0801 	add.w	r8, r8, #1
 8005306:	e7ec      	b.n	80052e2 <_printf_float+0x33a>
 8005308:	4642      	mov	r2, r8
 800530a:	4631      	mov	r1, r6
 800530c:	4628      	mov	r0, r5
 800530e:	47b8      	blx	r7
 8005310:	3001      	adds	r0, #1
 8005312:	d1c2      	bne.n	800529a <_printf_float+0x2f2>
 8005314:	e6a3      	b.n	800505e <_printf_float+0xb6>
 8005316:	2301      	movs	r3, #1
 8005318:	4631      	mov	r1, r6
 800531a:	4628      	mov	r0, r5
 800531c:	9206      	str	r2, [sp, #24]
 800531e:	47b8      	blx	r7
 8005320:	3001      	adds	r0, #1
 8005322:	f43f ae9c 	beq.w	800505e <_printf_float+0xb6>
 8005326:	9a06      	ldr	r2, [sp, #24]
 8005328:	f10b 0b01 	add.w	fp, fp, #1
 800532c:	e7bb      	b.n	80052a6 <_printf_float+0x2fe>
 800532e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	47b8      	blx	r7
 8005338:	3001      	adds	r0, #1
 800533a:	d1c0      	bne.n	80052be <_printf_float+0x316>
 800533c:	e68f      	b.n	800505e <_printf_float+0xb6>
 800533e:	9a06      	ldr	r2, [sp, #24]
 8005340:	464b      	mov	r3, r9
 8005342:	4442      	add	r2, r8
 8005344:	4631      	mov	r1, r6
 8005346:	4628      	mov	r0, r5
 8005348:	47b8      	blx	r7
 800534a:	3001      	adds	r0, #1
 800534c:	d1c3      	bne.n	80052d6 <_printf_float+0x32e>
 800534e:	e686      	b.n	800505e <_printf_float+0xb6>
 8005350:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005354:	f1ba 0f01 	cmp.w	sl, #1
 8005358:	dc01      	bgt.n	800535e <_printf_float+0x3b6>
 800535a:	07db      	lsls	r3, r3, #31
 800535c:	d536      	bpl.n	80053cc <_printf_float+0x424>
 800535e:	2301      	movs	r3, #1
 8005360:	4642      	mov	r2, r8
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f ae78 	beq.w	800505e <_printf_float+0xb6>
 800536e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005372:	4631      	mov	r1, r6
 8005374:	4628      	mov	r0, r5
 8005376:	47b8      	blx	r7
 8005378:	3001      	adds	r0, #1
 800537a:	f43f ae70 	beq.w	800505e <_printf_float+0xb6>
 800537e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005382:	2200      	movs	r2, #0
 8005384:	2300      	movs	r3, #0
 8005386:	f10a 3aff 	add.w	sl, sl, #4294967295
 800538a:	f7fb fbad 	bl	8000ae8 <__aeabi_dcmpeq>
 800538e:	b9c0      	cbnz	r0, 80053c2 <_printf_float+0x41a>
 8005390:	4653      	mov	r3, sl
 8005392:	f108 0201 	add.w	r2, r8, #1
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	d10c      	bne.n	80053ba <_printf_float+0x412>
 80053a0:	e65d      	b.n	800505e <_printf_float+0xb6>
 80053a2:	2301      	movs	r3, #1
 80053a4:	465a      	mov	r2, fp
 80053a6:	4631      	mov	r1, r6
 80053a8:	4628      	mov	r0, r5
 80053aa:	47b8      	blx	r7
 80053ac:	3001      	adds	r0, #1
 80053ae:	f43f ae56 	beq.w	800505e <_printf_float+0xb6>
 80053b2:	f108 0801 	add.w	r8, r8, #1
 80053b6:	45d0      	cmp	r8, sl
 80053b8:	dbf3      	blt.n	80053a2 <_printf_float+0x3fa>
 80053ba:	464b      	mov	r3, r9
 80053bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053c0:	e6df      	b.n	8005182 <_printf_float+0x1da>
 80053c2:	f04f 0800 	mov.w	r8, #0
 80053c6:	f104 0b1a 	add.w	fp, r4, #26
 80053ca:	e7f4      	b.n	80053b6 <_printf_float+0x40e>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4642      	mov	r2, r8
 80053d0:	e7e1      	b.n	8005396 <_printf_float+0x3ee>
 80053d2:	2301      	movs	r3, #1
 80053d4:	464a      	mov	r2, r9
 80053d6:	4631      	mov	r1, r6
 80053d8:	4628      	mov	r0, r5
 80053da:	47b8      	blx	r7
 80053dc:	3001      	adds	r0, #1
 80053de:	f43f ae3e 	beq.w	800505e <_printf_float+0xb6>
 80053e2:	f108 0801 	add.w	r8, r8, #1
 80053e6:	68e3      	ldr	r3, [r4, #12]
 80053e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80053ea:	1a5b      	subs	r3, r3, r1
 80053ec:	4543      	cmp	r3, r8
 80053ee:	dcf0      	bgt.n	80053d2 <_printf_float+0x42a>
 80053f0:	e6fc      	b.n	80051ec <_printf_float+0x244>
 80053f2:	f04f 0800 	mov.w	r8, #0
 80053f6:	f104 0919 	add.w	r9, r4, #25
 80053fa:	e7f4      	b.n	80053e6 <_printf_float+0x43e>

080053fc <_printf_common>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	4616      	mov	r6, r2
 8005402:	4698      	mov	r8, r3
 8005404:	688a      	ldr	r2, [r1, #8]
 8005406:	690b      	ldr	r3, [r1, #16]
 8005408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800540c:	4293      	cmp	r3, r2
 800540e:	bfb8      	it	lt
 8005410:	4613      	movlt	r3, r2
 8005412:	6033      	str	r3, [r6, #0]
 8005414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005418:	4607      	mov	r7, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b10a      	cbz	r2, 8005422 <_printf_common+0x26>
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	0699      	lsls	r1, r3, #26
 8005426:	bf42      	ittt	mi
 8005428:	6833      	ldrmi	r3, [r6, #0]
 800542a:	3302      	addmi	r3, #2
 800542c:	6033      	strmi	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	f015 0506 	ands.w	r5, r5, #6
 8005434:	d106      	bne.n	8005444 <_printf_common+0x48>
 8005436:	f104 0a19 	add.w	sl, r4, #25
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	6832      	ldr	r2, [r6, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc26      	bgt.n	8005492 <_printf_common+0x96>
 8005444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005448:	6822      	ldr	r2, [r4, #0]
 800544a:	3b00      	subs	r3, #0
 800544c:	bf18      	it	ne
 800544e:	2301      	movne	r3, #1
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d42b      	bmi.n	80054ac <_printf_common+0xb0>
 8005454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005458:	4641      	mov	r1, r8
 800545a:	4638      	mov	r0, r7
 800545c:	47c8      	blx	r9
 800545e:	3001      	adds	r0, #1
 8005460:	d01e      	beq.n	80054a0 <_printf_common+0xa4>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	f003 0306 	and.w	r3, r3, #6
 800546a:	2b04      	cmp	r3, #4
 800546c:	bf02      	ittt	eq
 800546e:	68e5      	ldreq	r5, [r4, #12]
 8005470:	6833      	ldreq	r3, [r6, #0]
 8005472:	1aed      	subeq	r5, r5, r3
 8005474:	68a3      	ldr	r3, [r4, #8]
 8005476:	bf0c      	ite	eq
 8005478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800547c:	2500      	movne	r5, #0
 800547e:	4293      	cmp	r3, r2
 8005480:	bfc4      	itt	gt
 8005482:	1a9b      	subgt	r3, r3, r2
 8005484:	18ed      	addgt	r5, r5, r3
 8005486:	2600      	movs	r6, #0
 8005488:	341a      	adds	r4, #26
 800548a:	42b5      	cmp	r5, r6
 800548c:	d11a      	bne.n	80054c4 <_printf_common+0xc8>
 800548e:	2000      	movs	r0, #0
 8005490:	e008      	b.n	80054a4 <_printf_common+0xa8>
 8005492:	2301      	movs	r3, #1
 8005494:	4652      	mov	r2, sl
 8005496:	4641      	mov	r1, r8
 8005498:	4638      	mov	r0, r7
 800549a:	47c8      	blx	r9
 800549c:	3001      	adds	r0, #1
 800549e:	d103      	bne.n	80054a8 <_printf_common+0xac>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7c6      	b.n	800543a <_printf_common+0x3e>
 80054ac:	18e1      	adds	r1, r4, r3
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	2030      	movs	r0, #48	@ 0x30
 80054b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054b6:	4422      	add	r2, r4
 80054b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054c0:	3302      	adds	r3, #2
 80054c2:	e7c7      	b.n	8005454 <_printf_common+0x58>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4622      	mov	r2, r4
 80054c8:	4641      	mov	r1, r8
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c8      	blx	r9
 80054ce:	3001      	adds	r0, #1
 80054d0:	d0e6      	beq.n	80054a0 <_printf_common+0xa4>
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7d9      	b.n	800548a <_printf_common+0x8e>
	...

080054d8 <_printf_i>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	7e0f      	ldrb	r7, [r1, #24]
 80054de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054e0:	2f78      	cmp	r7, #120	@ 0x78
 80054e2:	4691      	mov	r9, r2
 80054e4:	4680      	mov	r8, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	469a      	mov	sl, r3
 80054ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054ee:	d807      	bhi.n	8005500 <_printf_i+0x28>
 80054f0:	2f62      	cmp	r7, #98	@ 0x62
 80054f2:	d80a      	bhi.n	800550a <_printf_i+0x32>
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	f000 80d2 	beq.w	800569e <_printf_i+0x1c6>
 80054fa:	2f58      	cmp	r7, #88	@ 0x58
 80054fc:	f000 80b9 	beq.w	8005672 <_printf_i+0x19a>
 8005500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005508:	e03a      	b.n	8005580 <_printf_i+0xa8>
 800550a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800550e:	2b15      	cmp	r3, #21
 8005510:	d8f6      	bhi.n	8005500 <_printf_i+0x28>
 8005512:	a101      	add	r1, pc, #4	@ (adr r1, 8005518 <_printf_i+0x40>)
 8005514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005518:	08005571 	.word	0x08005571
 800551c:	08005585 	.word	0x08005585
 8005520:	08005501 	.word	0x08005501
 8005524:	08005501 	.word	0x08005501
 8005528:	08005501 	.word	0x08005501
 800552c:	08005501 	.word	0x08005501
 8005530:	08005585 	.word	0x08005585
 8005534:	08005501 	.word	0x08005501
 8005538:	08005501 	.word	0x08005501
 800553c:	08005501 	.word	0x08005501
 8005540:	08005501 	.word	0x08005501
 8005544:	08005685 	.word	0x08005685
 8005548:	080055af 	.word	0x080055af
 800554c:	0800563f 	.word	0x0800563f
 8005550:	08005501 	.word	0x08005501
 8005554:	08005501 	.word	0x08005501
 8005558:	080056a7 	.word	0x080056a7
 800555c:	08005501 	.word	0x08005501
 8005560:	080055af 	.word	0x080055af
 8005564:	08005501 	.word	0x08005501
 8005568:	08005501 	.word	0x08005501
 800556c:	08005647 	.word	0x08005647
 8005570:	6833      	ldr	r3, [r6, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6032      	str	r2, [r6, #0]
 8005578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800557c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005580:	2301      	movs	r3, #1
 8005582:	e09d      	b.n	80056c0 <_printf_i+0x1e8>
 8005584:	6833      	ldr	r3, [r6, #0]
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	1d19      	adds	r1, r3, #4
 800558a:	6031      	str	r1, [r6, #0]
 800558c:	0606      	lsls	r6, r0, #24
 800558e:	d501      	bpl.n	8005594 <_printf_i+0xbc>
 8005590:	681d      	ldr	r5, [r3, #0]
 8005592:	e003      	b.n	800559c <_printf_i+0xc4>
 8005594:	0645      	lsls	r5, r0, #25
 8005596:	d5fb      	bpl.n	8005590 <_printf_i+0xb8>
 8005598:	f9b3 5000 	ldrsh.w	r5, [r3]
 800559c:	2d00      	cmp	r5, #0
 800559e:	da03      	bge.n	80055a8 <_printf_i+0xd0>
 80055a0:	232d      	movs	r3, #45	@ 0x2d
 80055a2:	426d      	negs	r5, r5
 80055a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055a8:	4859      	ldr	r0, [pc, #356]	@ (8005710 <_printf_i+0x238>)
 80055aa:	230a      	movs	r3, #10
 80055ac:	e011      	b.n	80055d2 <_printf_i+0xfa>
 80055ae:	6821      	ldr	r1, [r4, #0]
 80055b0:	6833      	ldr	r3, [r6, #0]
 80055b2:	0608      	lsls	r0, r1, #24
 80055b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80055b8:	d402      	bmi.n	80055c0 <_printf_i+0xe8>
 80055ba:	0649      	lsls	r1, r1, #25
 80055bc:	bf48      	it	mi
 80055be:	b2ad      	uxthmi	r5, r5
 80055c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80055c2:	4853      	ldr	r0, [pc, #332]	@ (8005710 <_printf_i+0x238>)
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	bf14      	ite	ne
 80055c8:	230a      	movne	r3, #10
 80055ca:	2308      	moveq	r3, #8
 80055cc:	2100      	movs	r1, #0
 80055ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055d2:	6866      	ldr	r6, [r4, #4]
 80055d4:	60a6      	str	r6, [r4, #8]
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	bfa2      	ittt	ge
 80055da:	6821      	ldrge	r1, [r4, #0]
 80055dc:	f021 0104 	bicge.w	r1, r1, #4
 80055e0:	6021      	strge	r1, [r4, #0]
 80055e2:	b90d      	cbnz	r5, 80055e8 <_printf_i+0x110>
 80055e4:	2e00      	cmp	r6, #0
 80055e6:	d04b      	beq.n	8005680 <_printf_i+0x1a8>
 80055e8:	4616      	mov	r6, r2
 80055ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80055ee:	fb03 5711 	mls	r7, r3, r1, r5
 80055f2:	5dc7      	ldrb	r7, [r0, r7]
 80055f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055f8:	462f      	mov	r7, r5
 80055fa:	42bb      	cmp	r3, r7
 80055fc:	460d      	mov	r5, r1
 80055fe:	d9f4      	bls.n	80055ea <_printf_i+0x112>
 8005600:	2b08      	cmp	r3, #8
 8005602:	d10b      	bne.n	800561c <_printf_i+0x144>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	07df      	lsls	r7, r3, #31
 8005608:	d508      	bpl.n	800561c <_printf_i+0x144>
 800560a:	6923      	ldr	r3, [r4, #16]
 800560c:	6861      	ldr	r1, [r4, #4]
 800560e:	4299      	cmp	r1, r3
 8005610:	bfde      	ittt	le
 8005612:	2330      	movle	r3, #48	@ 0x30
 8005614:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005618:	f106 36ff 	addle.w	r6, r6, #4294967295
 800561c:	1b92      	subs	r2, r2, r6
 800561e:	6122      	str	r2, [r4, #16]
 8005620:	f8cd a000 	str.w	sl, [sp]
 8005624:	464b      	mov	r3, r9
 8005626:	aa03      	add	r2, sp, #12
 8005628:	4621      	mov	r1, r4
 800562a:	4640      	mov	r0, r8
 800562c:	f7ff fee6 	bl	80053fc <_printf_common>
 8005630:	3001      	adds	r0, #1
 8005632:	d14a      	bne.n	80056ca <_printf_i+0x1f2>
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	b004      	add	sp, #16
 800563a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	f043 0320 	orr.w	r3, r3, #32
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	4833      	ldr	r0, [pc, #204]	@ (8005714 <_printf_i+0x23c>)
 8005648:	2778      	movs	r7, #120	@ 0x78
 800564a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	6831      	ldr	r1, [r6, #0]
 8005652:	061f      	lsls	r7, r3, #24
 8005654:	f851 5b04 	ldr.w	r5, [r1], #4
 8005658:	d402      	bmi.n	8005660 <_printf_i+0x188>
 800565a:	065f      	lsls	r7, r3, #25
 800565c:	bf48      	it	mi
 800565e:	b2ad      	uxthmi	r5, r5
 8005660:	6031      	str	r1, [r6, #0]
 8005662:	07d9      	lsls	r1, r3, #31
 8005664:	bf44      	itt	mi
 8005666:	f043 0320 	orrmi.w	r3, r3, #32
 800566a:	6023      	strmi	r3, [r4, #0]
 800566c:	b11d      	cbz	r5, 8005676 <_printf_i+0x19e>
 800566e:	2310      	movs	r3, #16
 8005670:	e7ac      	b.n	80055cc <_printf_i+0xf4>
 8005672:	4827      	ldr	r0, [pc, #156]	@ (8005710 <_printf_i+0x238>)
 8005674:	e7e9      	b.n	800564a <_printf_i+0x172>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f023 0320 	bic.w	r3, r3, #32
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	e7f6      	b.n	800566e <_printf_i+0x196>
 8005680:	4616      	mov	r6, r2
 8005682:	e7bd      	b.n	8005600 <_printf_i+0x128>
 8005684:	6833      	ldr	r3, [r6, #0]
 8005686:	6825      	ldr	r5, [r4, #0]
 8005688:	6961      	ldr	r1, [r4, #20]
 800568a:	1d18      	adds	r0, r3, #4
 800568c:	6030      	str	r0, [r6, #0]
 800568e:	062e      	lsls	r6, r5, #24
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	d501      	bpl.n	8005698 <_printf_i+0x1c0>
 8005694:	6019      	str	r1, [r3, #0]
 8005696:	e002      	b.n	800569e <_printf_i+0x1c6>
 8005698:	0668      	lsls	r0, r5, #25
 800569a:	d5fb      	bpl.n	8005694 <_printf_i+0x1bc>
 800569c:	8019      	strh	r1, [r3, #0]
 800569e:	2300      	movs	r3, #0
 80056a0:	6123      	str	r3, [r4, #16]
 80056a2:	4616      	mov	r6, r2
 80056a4:	e7bc      	b.n	8005620 <_printf_i+0x148>
 80056a6:	6833      	ldr	r3, [r6, #0]
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	6032      	str	r2, [r6, #0]
 80056ac:	681e      	ldr	r6, [r3, #0]
 80056ae:	6862      	ldr	r2, [r4, #4]
 80056b0:	2100      	movs	r1, #0
 80056b2:	4630      	mov	r0, r6
 80056b4:	f7fa fd9c 	bl	80001f0 <memchr>
 80056b8:	b108      	cbz	r0, 80056be <_printf_i+0x1e6>
 80056ba:	1b80      	subs	r0, r0, r6
 80056bc:	6060      	str	r0, [r4, #4]
 80056be:	6863      	ldr	r3, [r4, #4]
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	2300      	movs	r3, #0
 80056c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056c8:	e7aa      	b.n	8005620 <_printf_i+0x148>
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	4632      	mov	r2, r6
 80056ce:	4649      	mov	r1, r9
 80056d0:	4640      	mov	r0, r8
 80056d2:	47d0      	blx	sl
 80056d4:	3001      	adds	r0, #1
 80056d6:	d0ad      	beq.n	8005634 <_printf_i+0x15c>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	079b      	lsls	r3, r3, #30
 80056dc:	d413      	bmi.n	8005706 <_printf_i+0x22e>
 80056de:	68e0      	ldr	r0, [r4, #12]
 80056e0:	9b03      	ldr	r3, [sp, #12]
 80056e2:	4298      	cmp	r0, r3
 80056e4:	bfb8      	it	lt
 80056e6:	4618      	movlt	r0, r3
 80056e8:	e7a6      	b.n	8005638 <_printf_i+0x160>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4632      	mov	r2, r6
 80056ee:	4649      	mov	r1, r9
 80056f0:	4640      	mov	r0, r8
 80056f2:	47d0      	blx	sl
 80056f4:	3001      	adds	r0, #1
 80056f6:	d09d      	beq.n	8005634 <_printf_i+0x15c>
 80056f8:	3501      	adds	r5, #1
 80056fa:	68e3      	ldr	r3, [r4, #12]
 80056fc:	9903      	ldr	r1, [sp, #12]
 80056fe:	1a5b      	subs	r3, r3, r1
 8005700:	42ab      	cmp	r3, r5
 8005702:	dcf2      	bgt.n	80056ea <_printf_i+0x212>
 8005704:	e7eb      	b.n	80056de <_printf_i+0x206>
 8005706:	2500      	movs	r5, #0
 8005708:	f104 0619 	add.w	r6, r4, #25
 800570c:	e7f5      	b.n	80056fa <_printf_i+0x222>
 800570e:	bf00      	nop
 8005710:	08007e8a 	.word	0x08007e8a
 8005714:	08007e9b 	.word	0x08007e9b

08005718 <std>:
 8005718:	2300      	movs	r3, #0
 800571a:	b510      	push	{r4, lr}
 800571c:	4604      	mov	r4, r0
 800571e:	e9c0 3300 	strd	r3, r3, [r0]
 8005722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005726:	6083      	str	r3, [r0, #8]
 8005728:	8181      	strh	r1, [r0, #12]
 800572a:	6643      	str	r3, [r0, #100]	@ 0x64
 800572c:	81c2      	strh	r2, [r0, #14]
 800572e:	6183      	str	r3, [r0, #24]
 8005730:	4619      	mov	r1, r3
 8005732:	2208      	movs	r2, #8
 8005734:	305c      	adds	r0, #92	@ 0x5c
 8005736:	f000 f928 	bl	800598a <memset>
 800573a:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <std+0x58>)
 800573c:	6263      	str	r3, [r4, #36]	@ 0x24
 800573e:	4b0d      	ldr	r3, [pc, #52]	@ (8005774 <std+0x5c>)
 8005740:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005742:	4b0d      	ldr	r3, [pc, #52]	@ (8005778 <std+0x60>)
 8005744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005746:	4b0d      	ldr	r3, [pc, #52]	@ (800577c <std+0x64>)
 8005748:	6323      	str	r3, [r4, #48]	@ 0x30
 800574a:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <std+0x68>)
 800574c:	6224      	str	r4, [r4, #32]
 800574e:	429c      	cmp	r4, r3
 8005750:	d006      	beq.n	8005760 <std+0x48>
 8005752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005756:	4294      	cmp	r4, r2
 8005758:	d002      	beq.n	8005760 <std+0x48>
 800575a:	33d0      	adds	r3, #208	@ 0xd0
 800575c:	429c      	cmp	r4, r3
 800575e:	d105      	bne.n	800576c <std+0x54>
 8005760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005768:	f000 b98c 	b.w	8005a84 <__retarget_lock_init_recursive>
 800576c:	bd10      	pop	{r4, pc}
 800576e:	bf00      	nop
 8005770:	08005905 	.word	0x08005905
 8005774:	08005927 	.word	0x08005927
 8005778:	0800595f 	.word	0x0800595f
 800577c:	08005983 	.word	0x08005983
 8005780:	20000508 	.word	0x20000508

08005784 <stdio_exit_handler>:
 8005784:	4a02      	ldr	r2, [pc, #8]	@ (8005790 <stdio_exit_handler+0xc>)
 8005786:	4903      	ldr	r1, [pc, #12]	@ (8005794 <stdio_exit_handler+0x10>)
 8005788:	4803      	ldr	r0, [pc, #12]	@ (8005798 <stdio_exit_handler+0x14>)
 800578a:	f000 b869 	b.w	8005860 <_fwalk_sglue>
 800578e:	bf00      	nop
 8005790:	20000014 	.word	0x20000014
 8005794:	080073e5 	.word	0x080073e5
 8005798:	20000024 	.word	0x20000024

0800579c <cleanup_stdio>:
 800579c:	6841      	ldr	r1, [r0, #4]
 800579e:	4b0c      	ldr	r3, [pc, #48]	@ (80057d0 <cleanup_stdio+0x34>)
 80057a0:	4299      	cmp	r1, r3
 80057a2:	b510      	push	{r4, lr}
 80057a4:	4604      	mov	r4, r0
 80057a6:	d001      	beq.n	80057ac <cleanup_stdio+0x10>
 80057a8:	f001 fe1c 	bl	80073e4 <_fflush_r>
 80057ac:	68a1      	ldr	r1, [r4, #8]
 80057ae:	4b09      	ldr	r3, [pc, #36]	@ (80057d4 <cleanup_stdio+0x38>)
 80057b0:	4299      	cmp	r1, r3
 80057b2:	d002      	beq.n	80057ba <cleanup_stdio+0x1e>
 80057b4:	4620      	mov	r0, r4
 80057b6:	f001 fe15 	bl	80073e4 <_fflush_r>
 80057ba:	68e1      	ldr	r1, [r4, #12]
 80057bc:	4b06      	ldr	r3, [pc, #24]	@ (80057d8 <cleanup_stdio+0x3c>)
 80057be:	4299      	cmp	r1, r3
 80057c0:	d004      	beq.n	80057cc <cleanup_stdio+0x30>
 80057c2:	4620      	mov	r0, r4
 80057c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c8:	f001 be0c 	b.w	80073e4 <_fflush_r>
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	bf00      	nop
 80057d0:	20000508 	.word	0x20000508
 80057d4:	20000570 	.word	0x20000570
 80057d8:	200005d8 	.word	0x200005d8

080057dc <global_stdio_init.part.0>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	4b0b      	ldr	r3, [pc, #44]	@ (800580c <global_stdio_init.part.0+0x30>)
 80057e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005810 <global_stdio_init.part.0+0x34>)
 80057e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005814 <global_stdio_init.part.0+0x38>)
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	4620      	mov	r0, r4
 80057e8:	2200      	movs	r2, #0
 80057ea:	2104      	movs	r1, #4
 80057ec:	f7ff ff94 	bl	8005718 <std>
 80057f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057f4:	2201      	movs	r2, #1
 80057f6:	2109      	movs	r1, #9
 80057f8:	f7ff ff8e 	bl	8005718 <std>
 80057fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005800:	2202      	movs	r2, #2
 8005802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005806:	2112      	movs	r1, #18
 8005808:	f7ff bf86 	b.w	8005718 <std>
 800580c:	20000640 	.word	0x20000640
 8005810:	20000508 	.word	0x20000508
 8005814:	08005785 	.word	0x08005785

08005818 <__sfp_lock_acquire>:
 8005818:	4801      	ldr	r0, [pc, #4]	@ (8005820 <__sfp_lock_acquire+0x8>)
 800581a:	f000 b934 	b.w	8005a86 <__retarget_lock_acquire_recursive>
 800581e:	bf00      	nop
 8005820:	20000649 	.word	0x20000649

08005824 <__sfp_lock_release>:
 8005824:	4801      	ldr	r0, [pc, #4]	@ (800582c <__sfp_lock_release+0x8>)
 8005826:	f000 b92f 	b.w	8005a88 <__retarget_lock_release_recursive>
 800582a:	bf00      	nop
 800582c:	20000649 	.word	0x20000649

08005830 <__sinit>:
 8005830:	b510      	push	{r4, lr}
 8005832:	4604      	mov	r4, r0
 8005834:	f7ff fff0 	bl	8005818 <__sfp_lock_acquire>
 8005838:	6a23      	ldr	r3, [r4, #32]
 800583a:	b11b      	cbz	r3, 8005844 <__sinit+0x14>
 800583c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005840:	f7ff bff0 	b.w	8005824 <__sfp_lock_release>
 8005844:	4b04      	ldr	r3, [pc, #16]	@ (8005858 <__sinit+0x28>)
 8005846:	6223      	str	r3, [r4, #32]
 8005848:	4b04      	ldr	r3, [pc, #16]	@ (800585c <__sinit+0x2c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f5      	bne.n	800583c <__sinit+0xc>
 8005850:	f7ff ffc4 	bl	80057dc <global_stdio_init.part.0>
 8005854:	e7f2      	b.n	800583c <__sinit+0xc>
 8005856:	bf00      	nop
 8005858:	0800579d 	.word	0x0800579d
 800585c:	20000640 	.word	0x20000640

08005860 <_fwalk_sglue>:
 8005860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005864:	4607      	mov	r7, r0
 8005866:	4688      	mov	r8, r1
 8005868:	4614      	mov	r4, r2
 800586a:	2600      	movs	r6, #0
 800586c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005870:	f1b9 0901 	subs.w	r9, r9, #1
 8005874:	d505      	bpl.n	8005882 <_fwalk_sglue+0x22>
 8005876:	6824      	ldr	r4, [r4, #0]
 8005878:	2c00      	cmp	r4, #0
 800587a:	d1f7      	bne.n	800586c <_fwalk_sglue+0xc>
 800587c:	4630      	mov	r0, r6
 800587e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005882:	89ab      	ldrh	r3, [r5, #12]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d907      	bls.n	8005898 <_fwalk_sglue+0x38>
 8005888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800588c:	3301      	adds	r3, #1
 800588e:	d003      	beq.n	8005898 <_fwalk_sglue+0x38>
 8005890:	4629      	mov	r1, r5
 8005892:	4638      	mov	r0, r7
 8005894:	47c0      	blx	r8
 8005896:	4306      	orrs	r6, r0
 8005898:	3568      	adds	r5, #104	@ 0x68
 800589a:	e7e9      	b.n	8005870 <_fwalk_sglue+0x10>

0800589c <sniprintf>:
 800589c:	b40c      	push	{r2, r3}
 800589e:	b530      	push	{r4, r5, lr}
 80058a0:	4b17      	ldr	r3, [pc, #92]	@ (8005900 <sniprintf+0x64>)
 80058a2:	1e0c      	subs	r4, r1, #0
 80058a4:	681d      	ldr	r5, [r3, #0]
 80058a6:	b09d      	sub	sp, #116	@ 0x74
 80058a8:	da08      	bge.n	80058bc <sniprintf+0x20>
 80058aa:	238b      	movs	r3, #139	@ 0x8b
 80058ac:	602b      	str	r3, [r5, #0]
 80058ae:	f04f 30ff 	mov.w	r0, #4294967295
 80058b2:	b01d      	add	sp, #116	@ 0x74
 80058b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058b8:	b002      	add	sp, #8
 80058ba:	4770      	bx	lr
 80058bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80058c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058c4:	bf14      	ite	ne
 80058c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80058ca:	4623      	moveq	r3, r4
 80058cc:	9304      	str	r3, [sp, #16]
 80058ce:	9307      	str	r3, [sp, #28]
 80058d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80058d4:	9002      	str	r0, [sp, #8]
 80058d6:	9006      	str	r0, [sp, #24]
 80058d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80058de:	ab21      	add	r3, sp, #132	@ 0x84
 80058e0:	a902      	add	r1, sp, #8
 80058e2:	4628      	mov	r0, r5
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	f001 fbfd 	bl	80070e4 <_svfiprintf_r>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	bfbc      	itt	lt
 80058ee:	238b      	movlt	r3, #139	@ 0x8b
 80058f0:	602b      	strlt	r3, [r5, #0]
 80058f2:	2c00      	cmp	r4, #0
 80058f4:	d0dd      	beq.n	80058b2 <sniprintf+0x16>
 80058f6:	9b02      	ldr	r3, [sp, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	e7d9      	b.n	80058b2 <sniprintf+0x16>
 80058fe:	bf00      	nop
 8005900:	20000020 	.word	0x20000020

08005904 <__sread>:
 8005904:	b510      	push	{r4, lr}
 8005906:	460c      	mov	r4, r1
 8005908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590c:	f000 f86c 	bl	80059e8 <_read_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	bfab      	itete	ge
 8005914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005916:	89a3      	ldrhlt	r3, [r4, #12]
 8005918:	181b      	addge	r3, r3, r0
 800591a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800591e:	bfac      	ite	ge
 8005920:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005922:	81a3      	strhlt	r3, [r4, #12]
 8005924:	bd10      	pop	{r4, pc}

08005926 <__swrite>:
 8005926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	461f      	mov	r7, r3
 800592c:	898b      	ldrh	r3, [r1, #12]
 800592e:	05db      	lsls	r3, r3, #23
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	4616      	mov	r6, r2
 8005936:	d505      	bpl.n	8005944 <__swrite+0x1e>
 8005938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593c:	2302      	movs	r3, #2
 800593e:	2200      	movs	r2, #0
 8005940:	f000 f840 	bl	80059c4 <_lseek_r>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800594a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	4632      	mov	r2, r6
 8005952:	463b      	mov	r3, r7
 8005954:	4628      	mov	r0, r5
 8005956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595a:	f000 b857 	b.w	8005a0c <_write_r>

0800595e <__sseek>:
 800595e:	b510      	push	{r4, lr}
 8005960:	460c      	mov	r4, r1
 8005962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005966:	f000 f82d 	bl	80059c4 <_lseek_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	bf15      	itete	ne
 8005970:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800597a:	81a3      	strheq	r3, [r4, #12]
 800597c:	bf18      	it	ne
 800597e:	81a3      	strhne	r3, [r4, #12]
 8005980:	bd10      	pop	{r4, pc}

08005982 <__sclose>:
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 b80d 	b.w	80059a4 <_close_r>

0800598a <memset>:
 800598a:	4402      	add	r2, r0
 800598c:	4603      	mov	r3, r0
 800598e:	4293      	cmp	r3, r2
 8005990:	d100      	bne.n	8005994 <memset+0xa>
 8005992:	4770      	bx	lr
 8005994:	f803 1b01 	strb.w	r1, [r3], #1
 8005998:	e7f9      	b.n	800598e <memset+0x4>
	...

0800599c <_localeconv_r>:
 800599c:	4800      	ldr	r0, [pc, #0]	@ (80059a0 <_localeconv_r+0x4>)
 800599e:	4770      	bx	lr
 80059a0:	20000160 	.word	0x20000160

080059a4 <_close_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d06      	ldr	r5, [pc, #24]	@ (80059c0 <_close_r+0x1c>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fc fa3d 	bl	8001e2e <_close>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_close_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_close_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20000644 	.word	0x20000644

080059c4 <_lseek_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d07      	ldr	r5, [pc, #28]	@ (80059e4 <_lseek_r+0x20>)
 80059c8:	4604      	mov	r4, r0
 80059ca:	4608      	mov	r0, r1
 80059cc:	4611      	mov	r1, r2
 80059ce:	2200      	movs	r2, #0
 80059d0:	602a      	str	r2, [r5, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	f7fc fa52 	bl	8001e7c <_lseek>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d102      	bne.n	80059e2 <_lseek_r+0x1e>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	b103      	cbz	r3, 80059e2 <_lseek_r+0x1e>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	20000644 	.word	0x20000644

080059e8 <_read_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4d07      	ldr	r5, [pc, #28]	@ (8005a08 <_read_r+0x20>)
 80059ec:	4604      	mov	r4, r0
 80059ee:	4608      	mov	r0, r1
 80059f0:	4611      	mov	r1, r2
 80059f2:	2200      	movs	r2, #0
 80059f4:	602a      	str	r2, [r5, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f7fc f9e0 	bl	8001dbc <_read>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_read_r+0x1e>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_read_r+0x1e>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	20000644 	.word	0x20000644

08005a0c <_write_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d07      	ldr	r5, [pc, #28]	@ (8005a2c <_write_r+0x20>)
 8005a10:	4604      	mov	r4, r0
 8005a12:	4608      	mov	r0, r1
 8005a14:	4611      	mov	r1, r2
 8005a16:	2200      	movs	r2, #0
 8005a18:	602a      	str	r2, [r5, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7fc f9eb 	bl	8001df6 <_write>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_write_r+0x1e>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_write_r+0x1e>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000644 	.word	0x20000644

08005a30 <__errno>:
 8005a30:	4b01      	ldr	r3, [pc, #4]	@ (8005a38 <__errno+0x8>)
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	20000020 	.word	0x20000020

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a74 <__libc_init_array+0x38>)
 8005a40:	4c0d      	ldr	r4, [pc, #52]	@ (8005a78 <__libc_init_array+0x3c>)
 8005a42:	1b64      	subs	r4, r4, r5
 8005a44:	10a4      	asrs	r4, r4, #2
 8005a46:	2600      	movs	r6, #0
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a7c <__libc_init_array+0x40>)
 8005a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a80 <__libc_init_array+0x44>)
 8005a50:	f002 f866 	bl	8007b20 <_init>
 8005a54:	1b64      	subs	r4, r4, r5
 8005a56:	10a4      	asrs	r4, r4, #2
 8005a58:	2600      	movs	r6, #0
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	080081f0 	.word	0x080081f0
 8005a78:	080081f0 	.word	0x080081f0
 8005a7c:	080081f0 	.word	0x080081f0
 8005a80:	080081f4 	.word	0x080081f4

08005a84 <__retarget_lock_init_recursive>:
 8005a84:	4770      	bx	lr

08005a86 <__retarget_lock_acquire_recursive>:
 8005a86:	4770      	bx	lr

08005a88 <__retarget_lock_release_recursive>:
 8005a88:	4770      	bx	lr

08005a8a <quorem>:
 8005a8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8e:	6903      	ldr	r3, [r0, #16]
 8005a90:	690c      	ldr	r4, [r1, #16]
 8005a92:	42a3      	cmp	r3, r4
 8005a94:	4607      	mov	r7, r0
 8005a96:	db7e      	blt.n	8005b96 <quorem+0x10c>
 8005a98:	3c01      	subs	r4, #1
 8005a9a:	f101 0814 	add.w	r8, r1, #20
 8005a9e:	00a3      	lsls	r3, r4, #2
 8005aa0:	f100 0514 	add.w	r5, r0, #20
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005abc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ac0:	d32e      	bcc.n	8005b20 <quorem+0x96>
 8005ac2:	f04f 0a00 	mov.w	sl, #0
 8005ac6:	46c4      	mov	ip, r8
 8005ac8:	46ae      	mov	lr, r5
 8005aca:	46d3      	mov	fp, sl
 8005acc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ad0:	b298      	uxth	r0, r3
 8005ad2:	fb06 a000 	mla	r0, r6, r0, sl
 8005ad6:	0c02      	lsrs	r2, r0, #16
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	fb06 2303 	mla	r3, r6, r3, r2
 8005ade:	f8de 2000 	ldr.w	r2, [lr]
 8005ae2:	b280      	uxth	r0, r0
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	1a12      	subs	r2, r2, r0
 8005ae8:	445a      	add	r2, fp
 8005aea:	f8de 0000 	ldr.w	r0, [lr]
 8005aee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005af8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005afc:	b292      	uxth	r2, r2
 8005afe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b02:	45e1      	cmp	r9, ip
 8005b04:	f84e 2b04 	str.w	r2, [lr], #4
 8005b08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b0c:	d2de      	bcs.n	8005acc <quorem+0x42>
 8005b0e:	9b00      	ldr	r3, [sp, #0]
 8005b10:	58eb      	ldr	r3, [r5, r3]
 8005b12:	b92b      	cbnz	r3, 8005b20 <quorem+0x96>
 8005b14:	9b01      	ldr	r3, [sp, #4]
 8005b16:	3b04      	subs	r3, #4
 8005b18:	429d      	cmp	r5, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	d32f      	bcc.n	8005b7e <quorem+0xf4>
 8005b1e:	613c      	str	r4, [r7, #16]
 8005b20:	4638      	mov	r0, r7
 8005b22:	f001 f97b 	bl	8006e1c <__mcmp>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	db25      	blt.n	8005b76 <quorem+0xec>
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b32:	f8d1 c000 	ldr.w	ip, [r1]
 8005b36:	fa1f fe82 	uxth.w	lr, r2
 8005b3a:	fa1f f38c 	uxth.w	r3, ip
 8005b3e:	eba3 030e 	sub.w	r3, r3, lr
 8005b42:	4403      	add	r3, r0
 8005b44:	0c12      	lsrs	r2, r2, #16
 8005b46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b54:	45c1      	cmp	r9, r8
 8005b56:	f841 3b04 	str.w	r3, [r1], #4
 8005b5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b5e:	d2e6      	bcs.n	8005b2e <quorem+0xa4>
 8005b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b68:	b922      	cbnz	r2, 8005b74 <quorem+0xea>
 8005b6a:	3b04      	subs	r3, #4
 8005b6c:	429d      	cmp	r5, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	d30b      	bcc.n	8005b8a <quorem+0x100>
 8005b72:	613c      	str	r4, [r7, #16]
 8005b74:	3601      	adds	r6, #1
 8005b76:	4630      	mov	r0, r6
 8005b78:	b003      	add	sp, #12
 8005b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7e:	6812      	ldr	r2, [r2, #0]
 8005b80:	3b04      	subs	r3, #4
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	d1cb      	bne.n	8005b1e <quorem+0x94>
 8005b86:	3c01      	subs	r4, #1
 8005b88:	e7c6      	b.n	8005b18 <quorem+0x8e>
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	3b04      	subs	r3, #4
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	d1ef      	bne.n	8005b72 <quorem+0xe8>
 8005b92:	3c01      	subs	r4, #1
 8005b94:	e7ea      	b.n	8005b6c <quorem+0xe2>
 8005b96:	2000      	movs	r0, #0
 8005b98:	e7ee      	b.n	8005b78 <quorem+0xee>
 8005b9a:	0000      	movs	r0, r0
 8005b9c:	0000      	movs	r0, r0
	...

08005ba0 <_dtoa_r>:
 8005ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba4:	69c7      	ldr	r7, [r0, #28]
 8005ba6:	b099      	sub	sp, #100	@ 0x64
 8005ba8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005bac:	ec55 4b10 	vmov	r4, r5, d0
 8005bb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005bb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005bb4:	4683      	mov	fp, r0
 8005bb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005bb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005bba:	b97f      	cbnz	r7, 8005bdc <_dtoa_r+0x3c>
 8005bbc:	2010      	movs	r0, #16
 8005bbe:	f000 fdfd 	bl	80067bc <malloc>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005bc8:	b920      	cbnz	r0, 8005bd4 <_dtoa_r+0x34>
 8005bca:	4ba7      	ldr	r3, [pc, #668]	@ (8005e68 <_dtoa_r+0x2c8>)
 8005bcc:	21ef      	movs	r1, #239	@ 0xef
 8005bce:	48a7      	ldr	r0, [pc, #668]	@ (8005e6c <_dtoa_r+0x2cc>)
 8005bd0:	f001 fc68 	bl	80074a4 <__assert_func>
 8005bd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005bd8:	6007      	str	r7, [r0, #0]
 8005bda:	60c7      	str	r7, [r0, #12]
 8005bdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005be0:	6819      	ldr	r1, [r3, #0]
 8005be2:	b159      	cbz	r1, 8005bfc <_dtoa_r+0x5c>
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	604a      	str	r2, [r1, #4]
 8005be8:	2301      	movs	r3, #1
 8005bea:	4093      	lsls	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
 8005bee:	4658      	mov	r0, fp
 8005bf0:	f000 feda 	bl	80069a8 <_Bfree>
 8005bf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	1e2b      	subs	r3, r5, #0
 8005bfe:	bfb9      	ittee	lt
 8005c00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c04:	9303      	strlt	r3, [sp, #12]
 8005c06:	2300      	movge	r3, #0
 8005c08:	6033      	strge	r3, [r6, #0]
 8005c0a:	9f03      	ldr	r7, [sp, #12]
 8005c0c:	4b98      	ldr	r3, [pc, #608]	@ (8005e70 <_dtoa_r+0x2d0>)
 8005c0e:	bfbc      	itt	lt
 8005c10:	2201      	movlt	r2, #1
 8005c12:	6032      	strlt	r2, [r6, #0]
 8005c14:	43bb      	bics	r3, r7
 8005c16:	d112      	bne.n	8005c3e <_dtoa_r+0x9e>
 8005c18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c24:	4323      	orrs	r3, r4
 8005c26:	f000 854d 	beq.w	80066c4 <_dtoa_r+0xb24>
 8005c2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005e84 <_dtoa_r+0x2e4>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 854f 	beq.w	80066d4 <_dtoa_r+0xb34>
 8005c36:	f10a 0303 	add.w	r3, sl, #3
 8005c3a:	f000 bd49 	b.w	80066d0 <_dtoa_r+0xb30>
 8005c3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c42:	2200      	movs	r2, #0
 8005c44:	ec51 0b17 	vmov	r0, r1, d7
 8005c48:	2300      	movs	r3, #0
 8005c4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005c4e:	f7fa ff4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c52:	4680      	mov	r8, r0
 8005c54:	b158      	cbz	r0, 8005c6e <_dtoa_r+0xce>
 8005c56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c58:	2301      	movs	r3, #1
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c5e:	b113      	cbz	r3, 8005c66 <_dtoa_r+0xc6>
 8005c60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005c62:	4b84      	ldr	r3, [pc, #528]	@ (8005e74 <_dtoa_r+0x2d4>)
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005e88 <_dtoa_r+0x2e8>
 8005c6a:	f000 bd33 	b.w	80066d4 <_dtoa_r+0xb34>
 8005c6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005c72:	aa16      	add	r2, sp, #88	@ 0x58
 8005c74:	a917      	add	r1, sp, #92	@ 0x5c
 8005c76:	4658      	mov	r0, fp
 8005c78:	f001 f980 	bl	8006f7c <__d2b>
 8005c7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005c80:	4681      	mov	r9, r0
 8005c82:	2e00      	cmp	r6, #0
 8005c84:	d077      	beq.n	8005d76 <_dtoa_r+0x1d6>
 8005c86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	4b74      	ldr	r3, [pc, #464]	@ (8005e78 <_dtoa_r+0x2d8>)
 8005ca6:	f7fa faff 	bl	80002a8 <__aeabi_dsub>
 8005caa:	a369      	add	r3, pc, #420	@ (adr r3, 8005e50 <_dtoa_r+0x2b0>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f7fa fcb2 	bl	8000618 <__aeabi_dmul>
 8005cb4:	a368      	add	r3, pc, #416	@ (adr r3, 8005e58 <_dtoa_r+0x2b8>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa faf7 	bl	80002ac <__adddf3>
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	f7fa fc3e 	bl	8000544 <__aeabi_i2d>
 8005cc8:	a365      	add	r3, pc, #404	@ (adr r3, 8005e60 <_dtoa_r+0x2c0>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fca3 	bl	8000618 <__aeabi_dmul>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7fa fae7 	bl	80002ac <__adddf3>
 8005cde:	4604      	mov	r4, r0
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	f7fa ff49 	bl	8000b78 <__aeabi_d2iz>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4607      	mov	r7, r0
 8005cea:	2300      	movs	r3, #0
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7fa ff04 	bl	8000afc <__aeabi_dcmplt>
 8005cf4:	b140      	cbz	r0, 8005d08 <_dtoa_r+0x168>
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	f7fa fc24 	bl	8000544 <__aeabi_i2d>
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	462b      	mov	r3, r5
 8005d00:	f7fa fef2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005d04:	b900      	cbnz	r0, 8005d08 <_dtoa_r+0x168>
 8005d06:	3f01      	subs	r7, #1
 8005d08:	2f16      	cmp	r7, #22
 8005d0a:	d851      	bhi.n	8005db0 <_dtoa_r+0x210>
 8005d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8005e7c <_dtoa_r+0x2dc>)
 8005d0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d1a:	f7fa feef 	bl	8000afc <__aeabi_dcmplt>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d048      	beq.n	8005db4 <_dtoa_r+0x214>
 8005d22:	3f01      	subs	r7, #1
 8005d24:	2300      	movs	r3, #0
 8005d26:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d2a:	1b9b      	subs	r3, r3, r6
 8005d2c:	1e5a      	subs	r2, r3, #1
 8005d2e:	bf44      	itt	mi
 8005d30:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d34:	2300      	movmi	r3, #0
 8005d36:	9208      	str	r2, [sp, #32]
 8005d38:	bf54      	ite	pl
 8005d3a:	f04f 0800 	movpl.w	r8, #0
 8005d3e:	9308      	strmi	r3, [sp, #32]
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	db39      	blt.n	8005db8 <_dtoa_r+0x218>
 8005d44:	9b08      	ldr	r3, [sp, #32]
 8005d46:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005d48:	443b      	add	r3, r7
 8005d4a:	9308      	str	r3, [sp, #32]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d864      	bhi.n	8005e20 <_dtoa_r+0x280>
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	bfc4      	itt	gt
 8005d5a:	3b04      	subgt	r3, #4
 8005d5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d60:	f1a3 0302 	sub.w	r3, r3, #2
 8005d64:	bfcc      	ite	gt
 8005d66:	2400      	movgt	r4, #0
 8005d68:	2401      	movle	r4, #1
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d863      	bhi.n	8005e36 <_dtoa_r+0x296>
 8005d6e:	e8df f003 	tbb	[pc, r3]
 8005d72:	372a      	.short	0x372a
 8005d74:	5535      	.short	0x5535
 8005d76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005d7a:	441e      	add	r6, r3
 8005d7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	bfc1      	itttt	gt
 8005d84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005d88:	409f      	lslgt	r7, r3
 8005d8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005d8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d92:	bfd6      	itet	le
 8005d94:	f1c3 0320 	rsble	r3, r3, #32
 8005d98:	ea47 0003 	orrgt.w	r0, r7, r3
 8005d9c:	fa04 f003 	lslle.w	r0, r4, r3
 8005da0:	f7fa fbc0 	bl	8000524 <__aeabi_ui2d>
 8005da4:	2201      	movs	r2, #1
 8005da6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005daa:	3e01      	subs	r6, #1
 8005dac:	9214      	str	r2, [sp, #80]	@ 0x50
 8005dae:	e777      	b.n	8005ca0 <_dtoa_r+0x100>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e7b8      	b.n	8005d26 <_dtoa_r+0x186>
 8005db4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005db6:	e7b7      	b.n	8005d28 <_dtoa_r+0x188>
 8005db8:	427b      	negs	r3, r7
 8005dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	eba8 0807 	sub.w	r8, r8, r7
 8005dc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005dc4:	e7c4      	b.n	8005d50 <_dtoa_r+0x1b0>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	dc35      	bgt.n	8005e3c <_dtoa_r+0x29c>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	9307      	str	r3, [sp, #28]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005dda:	e00b      	b.n	8005df4 <_dtoa_r+0x254>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e7f3      	b.n	8005dc8 <_dtoa_r+0x228>
 8005de0:	2300      	movs	r3, #0
 8005de2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	9307      	str	r3, [sp, #28]
 8005df0:	bfb8      	it	lt
 8005df2:	2301      	movlt	r3, #1
 8005df4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005df8:	2100      	movs	r1, #0
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	f102 0514 	add.w	r5, r2, #20
 8005e00:	429d      	cmp	r5, r3
 8005e02:	d91f      	bls.n	8005e44 <_dtoa_r+0x2a4>
 8005e04:	6041      	str	r1, [r0, #4]
 8005e06:	4658      	mov	r0, fp
 8005e08:	f000 fd8e 	bl	8006928 <_Balloc>
 8005e0c:	4682      	mov	sl, r0
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d13c      	bne.n	8005e8c <_dtoa_r+0x2ec>
 8005e12:	4b1b      	ldr	r3, [pc, #108]	@ (8005e80 <_dtoa_r+0x2e0>)
 8005e14:	4602      	mov	r2, r0
 8005e16:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e1a:	e6d8      	b.n	8005bce <_dtoa_r+0x2e>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e7e0      	b.n	8005de2 <_dtoa_r+0x242>
 8005e20:	2401      	movs	r4, #1
 8005e22:	2300      	movs	r3, #0
 8005e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e28:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	9307      	str	r3, [sp, #28]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2312      	movs	r3, #18
 8005e34:	e7d0      	b.n	8005dd8 <_dtoa_r+0x238>
 8005e36:	2301      	movs	r3, #1
 8005e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e3a:	e7f5      	b.n	8005e28 <_dtoa_r+0x288>
 8005e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	9307      	str	r3, [sp, #28]
 8005e42:	e7d7      	b.n	8005df4 <_dtoa_r+0x254>
 8005e44:	3101      	adds	r1, #1
 8005e46:	0052      	lsls	r2, r2, #1
 8005e48:	e7d8      	b.n	8005dfc <_dtoa_r+0x25c>
 8005e4a:	bf00      	nop
 8005e4c:	f3af 8000 	nop.w
 8005e50:	636f4361 	.word	0x636f4361
 8005e54:	3fd287a7 	.word	0x3fd287a7
 8005e58:	8b60c8b3 	.word	0x8b60c8b3
 8005e5c:	3fc68a28 	.word	0x3fc68a28
 8005e60:	509f79fb 	.word	0x509f79fb
 8005e64:	3fd34413 	.word	0x3fd34413
 8005e68:	08007eb9 	.word	0x08007eb9
 8005e6c:	08007ed0 	.word	0x08007ed0
 8005e70:	7ff00000 	.word	0x7ff00000
 8005e74:	08007e89 	.word	0x08007e89
 8005e78:	3ff80000 	.word	0x3ff80000
 8005e7c:	08007fc8 	.word	0x08007fc8
 8005e80:	08007f28 	.word	0x08007f28
 8005e84:	08007eb5 	.word	0x08007eb5
 8005e88:	08007e88 	.word	0x08007e88
 8005e8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e90:	6018      	str	r0, [r3, #0]
 8005e92:	9b07      	ldr	r3, [sp, #28]
 8005e94:	2b0e      	cmp	r3, #14
 8005e96:	f200 80a4 	bhi.w	8005fe2 <_dtoa_r+0x442>
 8005e9a:	2c00      	cmp	r4, #0
 8005e9c:	f000 80a1 	beq.w	8005fe2 <_dtoa_r+0x442>
 8005ea0:	2f00      	cmp	r7, #0
 8005ea2:	dd33      	ble.n	8005f0c <_dtoa_r+0x36c>
 8005ea4:	4bad      	ldr	r3, [pc, #692]	@ (800615c <_dtoa_r+0x5bc>)
 8005ea6:	f007 020f 	and.w	r2, r7, #15
 8005eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eae:	ed93 7b00 	vldr	d7, [r3]
 8005eb2:	05f8      	lsls	r0, r7, #23
 8005eb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005eb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005ebc:	d516      	bpl.n	8005eec <_dtoa_r+0x34c>
 8005ebe:	4ba8      	ldr	r3, [pc, #672]	@ (8006160 <_dtoa_r+0x5c0>)
 8005ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ec8:	f7fa fcd0 	bl	800086c <__aeabi_ddiv>
 8005ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed0:	f004 040f 	and.w	r4, r4, #15
 8005ed4:	2603      	movs	r6, #3
 8005ed6:	4da2      	ldr	r5, [pc, #648]	@ (8006160 <_dtoa_r+0x5c0>)
 8005ed8:	b954      	cbnz	r4, 8005ef0 <_dtoa_r+0x350>
 8005eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee2:	f7fa fcc3 	bl	800086c <__aeabi_ddiv>
 8005ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eea:	e028      	b.n	8005f3e <_dtoa_r+0x39e>
 8005eec:	2602      	movs	r6, #2
 8005eee:	e7f2      	b.n	8005ed6 <_dtoa_r+0x336>
 8005ef0:	07e1      	lsls	r1, r4, #31
 8005ef2:	d508      	bpl.n	8005f06 <_dtoa_r+0x366>
 8005ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005efc:	f7fa fb8c 	bl	8000618 <__aeabi_dmul>
 8005f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f04:	3601      	adds	r6, #1
 8005f06:	1064      	asrs	r4, r4, #1
 8005f08:	3508      	adds	r5, #8
 8005f0a:	e7e5      	b.n	8005ed8 <_dtoa_r+0x338>
 8005f0c:	f000 80d2 	beq.w	80060b4 <_dtoa_r+0x514>
 8005f10:	427c      	negs	r4, r7
 8005f12:	4b92      	ldr	r3, [pc, #584]	@ (800615c <_dtoa_r+0x5bc>)
 8005f14:	4d92      	ldr	r5, [pc, #584]	@ (8006160 <_dtoa_r+0x5c0>)
 8005f16:	f004 020f 	and.w	r2, r4, #15
 8005f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f26:	f7fa fb77 	bl	8000618 <__aeabi_dmul>
 8005f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f2e:	1124      	asrs	r4, r4, #4
 8005f30:	2300      	movs	r3, #0
 8005f32:	2602      	movs	r6, #2
 8005f34:	2c00      	cmp	r4, #0
 8005f36:	f040 80b2 	bne.w	800609e <_dtoa_r+0x4fe>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1d3      	bne.n	8005ee6 <_dtoa_r+0x346>
 8005f3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80b7 	beq.w	80060b8 <_dtoa_r+0x518>
 8005f4a:	4b86      	ldr	r3, [pc, #536]	@ (8006164 <_dtoa_r+0x5c4>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	f7fa fdd3 	bl	8000afc <__aeabi_dcmplt>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f000 80ae 	beq.w	80060b8 <_dtoa_r+0x518>
 8005f5c:	9b07      	ldr	r3, [sp, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80aa 	beq.w	80060b8 <_dtoa_r+0x518>
 8005f64:	9b00      	ldr	r3, [sp, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	dd37      	ble.n	8005fda <_dtoa_r+0x43a>
 8005f6a:	1e7b      	subs	r3, r7, #1
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4b7d      	ldr	r3, [pc, #500]	@ (8006168 <_dtoa_r+0x5c8>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	4629      	mov	r1, r5
 8005f76:	f7fa fb4f 	bl	8000618 <__aeabi_dmul>
 8005f7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f7e:	9c00      	ldr	r4, [sp, #0]
 8005f80:	3601      	adds	r6, #1
 8005f82:	4630      	mov	r0, r6
 8005f84:	f7fa fade 	bl	8000544 <__aeabi_i2d>
 8005f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f8c:	f7fa fb44 	bl	8000618 <__aeabi_dmul>
 8005f90:	4b76      	ldr	r3, [pc, #472]	@ (800616c <_dtoa_r+0x5cc>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	f7fa f98a 	bl	80002ac <__adddf3>
 8005f98:	4605      	mov	r5, r0
 8005f9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f9e:	2c00      	cmp	r4, #0
 8005fa0:	f040 808d 	bne.w	80060be <_dtoa_r+0x51e>
 8005fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fa8:	4b71      	ldr	r3, [pc, #452]	@ (8006170 <_dtoa_r+0x5d0>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	f7fa f97c 	bl	80002a8 <__aeabi_dsub>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fb8:	462a      	mov	r2, r5
 8005fba:	4633      	mov	r3, r6
 8005fbc:	f7fa fdbc 	bl	8000b38 <__aeabi_dcmpgt>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	f040 828b 	bne.w	80064dc <_dtoa_r+0x93c>
 8005fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fca:	462a      	mov	r2, r5
 8005fcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005fd0:	f7fa fd94 	bl	8000afc <__aeabi_dcmplt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f040 8128 	bne.w	800622a <_dtoa_r+0x68a>
 8005fda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005fde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005fe2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f2c0 815a 	blt.w	800629e <_dtoa_r+0x6fe>
 8005fea:	2f0e      	cmp	r7, #14
 8005fec:	f300 8157 	bgt.w	800629e <_dtoa_r+0x6fe>
 8005ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800615c <_dtoa_r+0x5bc>)
 8005ff2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ff6:	ed93 7b00 	vldr	d7, [r3]
 8005ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	ed8d 7b00 	vstr	d7, [sp]
 8006002:	da03      	bge.n	800600c <_dtoa_r+0x46c>
 8006004:	9b07      	ldr	r3, [sp, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f340 8101 	ble.w	800620e <_dtoa_r+0x66e>
 800600c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006010:	4656      	mov	r6, sl
 8006012:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa fc27 	bl	800086c <__aeabi_ddiv>
 800601e:	f7fa fdab 	bl	8000b78 <__aeabi_d2iz>
 8006022:	4680      	mov	r8, r0
 8006024:	f7fa fa8e 	bl	8000544 <__aeabi_i2d>
 8006028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800602c:	f7fa faf4 	bl	8000618 <__aeabi_dmul>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4620      	mov	r0, r4
 8006036:	4629      	mov	r1, r5
 8006038:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800603c:	f7fa f934 	bl	80002a8 <__aeabi_dsub>
 8006040:	f806 4b01 	strb.w	r4, [r6], #1
 8006044:	9d07      	ldr	r5, [sp, #28]
 8006046:	eba6 040a 	sub.w	r4, r6, sl
 800604a:	42a5      	cmp	r5, r4
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	f040 8117 	bne.w	8006282 <_dtoa_r+0x6e2>
 8006054:	f7fa f92a 	bl	80002ac <__adddf3>
 8006058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800605c:	4604      	mov	r4, r0
 800605e:	460d      	mov	r5, r1
 8006060:	f7fa fd6a 	bl	8000b38 <__aeabi_dcmpgt>
 8006064:	2800      	cmp	r0, #0
 8006066:	f040 80f9 	bne.w	800625c <_dtoa_r+0x6bc>
 800606a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800606e:	4620      	mov	r0, r4
 8006070:	4629      	mov	r1, r5
 8006072:	f7fa fd39 	bl	8000ae8 <__aeabi_dcmpeq>
 8006076:	b118      	cbz	r0, 8006080 <_dtoa_r+0x4e0>
 8006078:	f018 0f01 	tst.w	r8, #1
 800607c:	f040 80ee 	bne.w	800625c <_dtoa_r+0x6bc>
 8006080:	4649      	mov	r1, r9
 8006082:	4658      	mov	r0, fp
 8006084:	f000 fc90 	bl	80069a8 <_Bfree>
 8006088:	2300      	movs	r3, #0
 800608a:	7033      	strb	r3, [r6, #0]
 800608c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800608e:	3701      	adds	r7, #1
 8006090:	601f      	str	r7, [r3, #0]
 8006092:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 831d 	beq.w	80066d4 <_dtoa_r+0xb34>
 800609a:	601e      	str	r6, [r3, #0]
 800609c:	e31a      	b.n	80066d4 <_dtoa_r+0xb34>
 800609e:	07e2      	lsls	r2, r4, #31
 80060a0:	d505      	bpl.n	80060ae <_dtoa_r+0x50e>
 80060a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060a6:	f7fa fab7 	bl	8000618 <__aeabi_dmul>
 80060aa:	3601      	adds	r6, #1
 80060ac:	2301      	movs	r3, #1
 80060ae:	1064      	asrs	r4, r4, #1
 80060b0:	3508      	adds	r5, #8
 80060b2:	e73f      	b.n	8005f34 <_dtoa_r+0x394>
 80060b4:	2602      	movs	r6, #2
 80060b6:	e742      	b.n	8005f3e <_dtoa_r+0x39e>
 80060b8:	9c07      	ldr	r4, [sp, #28]
 80060ba:	9704      	str	r7, [sp, #16]
 80060bc:	e761      	b.n	8005f82 <_dtoa_r+0x3e2>
 80060be:	4b27      	ldr	r3, [pc, #156]	@ (800615c <_dtoa_r+0x5bc>)
 80060c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060ca:	4454      	add	r4, sl
 80060cc:	2900      	cmp	r1, #0
 80060ce:	d053      	beq.n	8006178 <_dtoa_r+0x5d8>
 80060d0:	4928      	ldr	r1, [pc, #160]	@ (8006174 <_dtoa_r+0x5d4>)
 80060d2:	2000      	movs	r0, #0
 80060d4:	f7fa fbca 	bl	800086c <__aeabi_ddiv>
 80060d8:	4633      	mov	r3, r6
 80060da:	462a      	mov	r2, r5
 80060dc:	f7fa f8e4 	bl	80002a8 <__aeabi_dsub>
 80060e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060e4:	4656      	mov	r6, sl
 80060e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ea:	f7fa fd45 	bl	8000b78 <__aeabi_d2iz>
 80060ee:	4605      	mov	r5, r0
 80060f0:	f7fa fa28 	bl	8000544 <__aeabi_i2d>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060fc:	f7fa f8d4 	bl	80002a8 <__aeabi_dsub>
 8006100:	3530      	adds	r5, #48	@ 0x30
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800610a:	f806 5b01 	strb.w	r5, [r6], #1
 800610e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006112:	f7fa fcf3 	bl	8000afc <__aeabi_dcmplt>
 8006116:	2800      	cmp	r0, #0
 8006118:	d171      	bne.n	80061fe <_dtoa_r+0x65e>
 800611a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800611e:	4911      	ldr	r1, [pc, #68]	@ (8006164 <_dtoa_r+0x5c4>)
 8006120:	2000      	movs	r0, #0
 8006122:	f7fa f8c1 	bl	80002a8 <__aeabi_dsub>
 8006126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800612a:	f7fa fce7 	bl	8000afc <__aeabi_dcmplt>
 800612e:	2800      	cmp	r0, #0
 8006130:	f040 8095 	bne.w	800625e <_dtoa_r+0x6be>
 8006134:	42a6      	cmp	r6, r4
 8006136:	f43f af50 	beq.w	8005fda <_dtoa_r+0x43a>
 800613a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800613e:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <_dtoa_r+0x5c8>)
 8006140:	2200      	movs	r2, #0
 8006142:	f7fa fa69 	bl	8000618 <__aeabi_dmul>
 8006146:	4b08      	ldr	r3, [pc, #32]	@ (8006168 <_dtoa_r+0x5c8>)
 8006148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800614c:	2200      	movs	r2, #0
 800614e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006152:	f7fa fa61 	bl	8000618 <__aeabi_dmul>
 8006156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800615a:	e7c4      	b.n	80060e6 <_dtoa_r+0x546>
 800615c:	08007fc8 	.word	0x08007fc8
 8006160:	08007fa0 	.word	0x08007fa0
 8006164:	3ff00000 	.word	0x3ff00000
 8006168:	40240000 	.word	0x40240000
 800616c:	401c0000 	.word	0x401c0000
 8006170:	40140000 	.word	0x40140000
 8006174:	3fe00000 	.word	0x3fe00000
 8006178:	4631      	mov	r1, r6
 800617a:	4628      	mov	r0, r5
 800617c:	f7fa fa4c 	bl	8000618 <__aeabi_dmul>
 8006180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006184:	9415      	str	r4, [sp, #84]	@ 0x54
 8006186:	4656      	mov	r6, sl
 8006188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618c:	f7fa fcf4 	bl	8000b78 <__aeabi_d2iz>
 8006190:	4605      	mov	r5, r0
 8006192:	f7fa f9d7 	bl	8000544 <__aeabi_i2d>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800619e:	f7fa f883 	bl	80002a8 <__aeabi_dsub>
 80061a2:	3530      	adds	r5, #48	@ 0x30
 80061a4:	f806 5b01 	strb.w	r5, [r6], #1
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	d124      	bne.n	8006202 <_dtoa_r+0x662>
 80061b8:	4bac      	ldr	r3, [pc, #688]	@ (800646c <_dtoa_r+0x8cc>)
 80061ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061be:	f7fa f875 	bl	80002ac <__adddf3>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ca:	f7fa fcb5 	bl	8000b38 <__aeabi_dcmpgt>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d145      	bne.n	800625e <_dtoa_r+0x6be>
 80061d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061d6:	49a5      	ldr	r1, [pc, #660]	@ (800646c <_dtoa_r+0x8cc>)
 80061d8:	2000      	movs	r0, #0
 80061da:	f7fa f865 	bl	80002a8 <__aeabi_dsub>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e6:	f7fa fc89 	bl	8000afc <__aeabi_dcmplt>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	f43f aef5 	beq.w	8005fda <_dtoa_r+0x43a>
 80061f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80061f2:	1e73      	subs	r3, r6, #1
 80061f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80061f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80061fa:	2b30      	cmp	r3, #48	@ 0x30
 80061fc:	d0f8      	beq.n	80061f0 <_dtoa_r+0x650>
 80061fe:	9f04      	ldr	r7, [sp, #16]
 8006200:	e73e      	b.n	8006080 <_dtoa_r+0x4e0>
 8006202:	4b9b      	ldr	r3, [pc, #620]	@ (8006470 <_dtoa_r+0x8d0>)
 8006204:	f7fa fa08 	bl	8000618 <__aeabi_dmul>
 8006208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800620c:	e7bc      	b.n	8006188 <_dtoa_r+0x5e8>
 800620e:	d10c      	bne.n	800622a <_dtoa_r+0x68a>
 8006210:	4b98      	ldr	r3, [pc, #608]	@ (8006474 <_dtoa_r+0x8d4>)
 8006212:	2200      	movs	r2, #0
 8006214:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006218:	f7fa f9fe 	bl	8000618 <__aeabi_dmul>
 800621c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006220:	f7fa fc80 	bl	8000b24 <__aeabi_dcmpge>
 8006224:	2800      	cmp	r0, #0
 8006226:	f000 8157 	beq.w	80064d8 <_dtoa_r+0x938>
 800622a:	2400      	movs	r4, #0
 800622c:	4625      	mov	r5, r4
 800622e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006230:	43db      	mvns	r3, r3
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	4656      	mov	r6, sl
 8006236:	2700      	movs	r7, #0
 8006238:	4621      	mov	r1, r4
 800623a:	4658      	mov	r0, fp
 800623c:	f000 fbb4 	bl	80069a8 <_Bfree>
 8006240:	2d00      	cmp	r5, #0
 8006242:	d0dc      	beq.n	80061fe <_dtoa_r+0x65e>
 8006244:	b12f      	cbz	r7, 8006252 <_dtoa_r+0x6b2>
 8006246:	42af      	cmp	r7, r5
 8006248:	d003      	beq.n	8006252 <_dtoa_r+0x6b2>
 800624a:	4639      	mov	r1, r7
 800624c:	4658      	mov	r0, fp
 800624e:	f000 fbab 	bl	80069a8 <_Bfree>
 8006252:	4629      	mov	r1, r5
 8006254:	4658      	mov	r0, fp
 8006256:	f000 fba7 	bl	80069a8 <_Bfree>
 800625a:	e7d0      	b.n	80061fe <_dtoa_r+0x65e>
 800625c:	9704      	str	r7, [sp, #16]
 800625e:	4633      	mov	r3, r6
 8006260:	461e      	mov	r6, r3
 8006262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006266:	2a39      	cmp	r2, #57	@ 0x39
 8006268:	d107      	bne.n	800627a <_dtoa_r+0x6da>
 800626a:	459a      	cmp	sl, r3
 800626c:	d1f8      	bne.n	8006260 <_dtoa_r+0x6c0>
 800626e:	9a04      	ldr	r2, [sp, #16]
 8006270:	3201      	adds	r2, #1
 8006272:	9204      	str	r2, [sp, #16]
 8006274:	2230      	movs	r2, #48	@ 0x30
 8006276:	f88a 2000 	strb.w	r2, [sl]
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	3201      	adds	r2, #1
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	e7bd      	b.n	80061fe <_dtoa_r+0x65e>
 8006282:	4b7b      	ldr	r3, [pc, #492]	@ (8006470 <_dtoa_r+0x8d0>)
 8006284:	2200      	movs	r2, #0
 8006286:	f7fa f9c7 	bl	8000618 <__aeabi_dmul>
 800628a:	2200      	movs	r2, #0
 800628c:	2300      	movs	r3, #0
 800628e:	4604      	mov	r4, r0
 8006290:	460d      	mov	r5, r1
 8006292:	f7fa fc29 	bl	8000ae8 <__aeabi_dcmpeq>
 8006296:	2800      	cmp	r0, #0
 8006298:	f43f aebb 	beq.w	8006012 <_dtoa_r+0x472>
 800629c:	e6f0      	b.n	8006080 <_dtoa_r+0x4e0>
 800629e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	f000 80db 	beq.w	800645c <_dtoa_r+0x8bc>
 80062a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062a8:	2a01      	cmp	r2, #1
 80062aa:	f300 80bf 	bgt.w	800642c <_dtoa_r+0x88c>
 80062ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	f000 80b7 	beq.w	8006424 <_dtoa_r+0x884>
 80062b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80062ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062bc:	4646      	mov	r6, r8
 80062be:	9a08      	ldr	r2, [sp, #32]
 80062c0:	2101      	movs	r1, #1
 80062c2:	441a      	add	r2, r3
 80062c4:	4658      	mov	r0, fp
 80062c6:	4498      	add	r8, r3
 80062c8:	9208      	str	r2, [sp, #32]
 80062ca:	f000 fc21 	bl	8006b10 <__i2b>
 80062ce:	4605      	mov	r5, r0
 80062d0:	b15e      	cbz	r6, 80062ea <_dtoa_r+0x74a>
 80062d2:	9b08      	ldr	r3, [sp, #32]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dd08      	ble.n	80062ea <_dtoa_r+0x74a>
 80062d8:	42b3      	cmp	r3, r6
 80062da:	9a08      	ldr	r2, [sp, #32]
 80062dc:	bfa8      	it	ge
 80062de:	4633      	movge	r3, r6
 80062e0:	eba8 0803 	sub.w	r8, r8, r3
 80062e4:	1af6      	subs	r6, r6, r3
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	9308      	str	r3, [sp, #32]
 80062ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ec:	b1f3      	cbz	r3, 800632c <_dtoa_r+0x78c>
 80062ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80b7 	beq.w	8006464 <_dtoa_r+0x8c4>
 80062f6:	b18c      	cbz	r4, 800631c <_dtoa_r+0x77c>
 80062f8:	4629      	mov	r1, r5
 80062fa:	4622      	mov	r2, r4
 80062fc:	4658      	mov	r0, fp
 80062fe:	f000 fcc7 	bl	8006c90 <__pow5mult>
 8006302:	464a      	mov	r2, r9
 8006304:	4601      	mov	r1, r0
 8006306:	4605      	mov	r5, r0
 8006308:	4658      	mov	r0, fp
 800630a:	f000 fc17 	bl	8006b3c <__multiply>
 800630e:	4649      	mov	r1, r9
 8006310:	9004      	str	r0, [sp, #16]
 8006312:	4658      	mov	r0, fp
 8006314:	f000 fb48 	bl	80069a8 <_Bfree>
 8006318:	9b04      	ldr	r3, [sp, #16]
 800631a:	4699      	mov	r9, r3
 800631c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800631e:	1b1a      	subs	r2, r3, r4
 8006320:	d004      	beq.n	800632c <_dtoa_r+0x78c>
 8006322:	4649      	mov	r1, r9
 8006324:	4658      	mov	r0, fp
 8006326:	f000 fcb3 	bl	8006c90 <__pow5mult>
 800632a:	4681      	mov	r9, r0
 800632c:	2101      	movs	r1, #1
 800632e:	4658      	mov	r0, fp
 8006330:	f000 fbee 	bl	8006b10 <__i2b>
 8006334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006336:	4604      	mov	r4, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 81cf 	beq.w	80066dc <_dtoa_r+0xb3c>
 800633e:	461a      	mov	r2, r3
 8006340:	4601      	mov	r1, r0
 8006342:	4658      	mov	r0, fp
 8006344:	f000 fca4 	bl	8006c90 <__pow5mult>
 8006348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800634a:	2b01      	cmp	r3, #1
 800634c:	4604      	mov	r4, r0
 800634e:	f300 8095 	bgt.w	800647c <_dtoa_r+0x8dc>
 8006352:	9b02      	ldr	r3, [sp, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f040 8087 	bne.w	8006468 <_dtoa_r+0x8c8>
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 8089 	bne.w	8006478 <_dtoa_r+0x8d8>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800636c:	0d1b      	lsrs	r3, r3, #20
 800636e:	051b      	lsls	r3, r3, #20
 8006370:	b12b      	cbz	r3, 800637e <_dtoa_r+0x7de>
 8006372:	9b08      	ldr	r3, [sp, #32]
 8006374:	3301      	adds	r3, #1
 8006376:	9308      	str	r3, [sp, #32]
 8006378:	f108 0801 	add.w	r8, r8, #1
 800637c:	2301      	movs	r3, #1
 800637e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 81b0 	beq.w	80066e8 <_dtoa_r+0xb48>
 8006388:	6923      	ldr	r3, [r4, #16]
 800638a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800638e:	6918      	ldr	r0, [r3, #16]
 8006390:	f000 fb72 	bl	8006a78 <__hi0bits>
 8006394:	f1c0 0020 	rsb	r0, r0, #32
 8006398:	9b08      	ldr	r3, [sp, #32]
 800639a:	4418      	add	r0, r3
 800639c:	f010 001f 	ands.w	r0, r0, #31
 80063a0:	d077      	beq.n	8006492 <_dtoa_r+0x8f2>
 80063a2:	f1c0 0320 	rsb	r3, r0, #32
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	dd6b      	ble.n	8006482 <_dtoa_r+0x8e2>
 80063aa:	9b08      	ldr	r3, [sp, #32]
 80063ac:	f1c0 001c 	rsb	r0, r0, #28
 80063b0:	4403      	add	r3, r0
 80063b2:	4480      	add	r8, r0
 80063b4:	4406      	add	r6, r0
 80063b6:	9308      	str	r3, [sp, #32]
 80063b8:	f1b8 0f00 	cmp.w	r8, #0
 80063bc:	dd05      	ble.n	80063ca <_dtoa_r+0x82a>
 80063be:	4649      	mov	r1, r9
 80063c0:	4642      	mov	r2, r8
 80063c2:	4658      	mov	r0, fp
 80063c4:	f000 fcbe 	bl	8006d44 <__lshift>
 80063c8:	4681      	mov	r9, r0
 80063ca:	9b08      	ldr	r3, [sp, #32]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dd05      	ble.n	80063dc <_dtoa_r+0x83c>
 80063d0:	4621      	mov	r1, r4
 80063d2:	461a      	mov	r2, r3
 80063d4:	4658      	mov	r0, fp
 80063d6:	f000 fcb5 	bl	8006d44 <__lshift>
 80063da:	4604      	mov	r4, r0
 80063dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d059      	beq.n	8006496 <_dtoa_r+0x8f6>
 80063e2:	4621      	mov	r1, r4
 80063e4:	4648      	mov	r0, r9
 80063e6:	f000 fd19 	bl	8006e1c <__mcmp>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	da53      	bge.n	8006496 <_dtoa_r+0x8f6>
 80063ee:	1e7b      	subs	r3, r7, #1
 80063f0:	9304      	str	r3, [sp, #16]
 80063f2:	4649      	mov	r1, r9
 80063f4:	2300      	movs	r3, #0
 80063f6:	220a      	movs	r2, #10
 80063f8:	4658      	mov	r0, fp
 80063fa:	f000 faf7 	bl	80069ec <__multadd>
 80063fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006400:	4681      	mov	r9, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8172 	beq.w	80066ec <_dtoa_r+0xb4c>
 8006408:	2300      	movs	r3, #0
 800640a:	4629      	mov	r1, r5
 800640c:	220a      	movs	r2, #10
 800640e:	4658      	mov	r0, fp
 8006410:	f000 faec 	bl	80069ec <__multadd>
 8006414:	9b00      	ldr	r3, [sp, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	4605      	mov	r5, r0
 800641a:	dc67      	bgt.n	80064ec <_dtoa_r+0x94c>
 800641c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641e:	2b02      	cmp	r3, #2
 8006420:	dc41      	bgt.n	80064a6 <_dtoa_r+0x906>
 8006422:	e063      	b.n	80064ec <_dtoa_r+0x94c>
 8006424:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006426:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800642a:	e746      	b.n	80062ba <_dtoa_r+0x71a>
 800642c:	9b07      	ldr	r3, [sp, #28]
 800642e:	1e5c      	subs	r4, r3, #1
 8006430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006432:	42a3      	cmp	r3, r4
 8006434:	bfbf      	itttt	lt
 8006436:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006438:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800643a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800643c:	1ae3      	sublt	r3, r4, r3
 800643e:	bfb4      	ite	lt
 8006440:	18d2      	addlt	r2, r2, r3
 8006442:	1b1c      	subge	r4, r3, r4
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	bfbc      	itt	lt
 8006448:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800644a:	2400      	movlt	r4, #0
 800644c:	2b00      	cmp	r3, #0
 800644e:	bfb5      	itete	lt
 8006450:	eba8 0603 	sublt.w	r6, r8, r3
 8006454:	9b07      	ldrge	r3, [sp, #28]
 8006456:	2300      	movlt	r3, #0
 8006458:	4646      	movge	r6, r8
 800645a:	e730      	b.n	80062be <_dtoa_r+0x71e>
 800645c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800645e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006460:	4646      	mov	r6, r8
 8006462:	e735      	b.n	80062d0 <_dtoa_r+0x730>
 8006464:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006466:	e75c      	b.n	8006322 <_dtoa_r+0x782>
 8006468:	2300      	movs	r3, #0
 800646a:	e788      	b.n	800637e <_dtoa_r+0x7de>
 800646c:	3fe00000 	.word	0x3fe00000
 8006470:	40240000 	.word	0x40240000
 8006474:	40140000 	.word	0x40140000
 8006478:	9b02      	ldr	r3, [sp, #8]
 800647a:	e780      	b.n	800637e <_dtoa_r+0x7de>
 800647c:	2300      	movs	r3, #0
 800647e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006480:	e782      	b.n	8006388 <_dtoa_r+0x7e8>
 8006482:	d099      	beq.n	80063b8 <_dtoa_r+0x818>
 8006484:	9a08      	ldr	r2, [sp, #32]
 8006486:	331c      	adds	r3, #28
 8006488:	441a      	add	r2, r3
 800648a:	4498      	add	r8, r3
 800648c:	441e      	add	r6, r3
 800648e:	9208      	str	r2, [sp, #32]
 8006490:	e792      	b.n	80063b8 <_dtoa_r+0x818>
 8006492:	4603      	mov	r3, r0
 8006494:	e7f6      	b.n	8006484 <_dtoa_r+0x8e4>
 8006496:	9b07      	ldr	r3, [sp, #28]
 8006498:	9704      	str	r7, [sp, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	dc20      	bgt.n	80064e0 <_dtoa_r+0x940>
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	dd1e      	ble.n	80064e4 <_dtoa_r+0x944>
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f47f aec0 	bne.w	800622e <_dtoa_r+0x68e>
 80064ae:	4621      	mov	r1, r4
 80064b0:	2205      	movs	r2, #5
 80064b2:	4658      	mov	r0, fp
 80064b4:	f000 fa9a 	bl	80069ec <__multadd>
 80064b8:	4601      	mov	r1, r0
 80064ba:	4604      	mov	r4, r0
 80064bc:	4648      	mov	r0, r9
 80064be:	f000 fcad 	bl	8006e1c <__mcmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f77f aeb3 	ble.w	800622e <_dtoa_r+0x68e>
 80064c8:	4656      	mov	r6, sl
 80064ca:	2331      	movs	r3, #49	@ 0x31
 80064cc:	f806 3b01 	strb.w	r3, [r6], #1
 80064d0:	9b04      	ldr	r3, [sp, #16]
 80064d2:	3301      	adds	r3, #1
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	e6ae      	b.n	8006236 <_dtoa_r+0x696>
 80064d8:	9c07      	ldr	r4, [sp, #28]
 80064da:	9704      	str	r7, [sp, #16]
 80064dc:	4625      	mov	r5, r4
 80064de:	e7f3      	b.n	80064c8 <_dtoa_r+0x928>
 80064e0:	9b07      	ldr	r3, [sp, #28]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 8104 	beq.w	80066f4 <_dtoa_r+0xb54>
 80064ec:	2e00      	cmp	r6, #0
 80064ee:	dd05      	ble.n	80064fc <_dtoa_r+0x95c>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4632      	mov	r2, r6
 80064f4:	4658      	mov	r0, fp
 80064f6:	f000 fc25 	bl	8006d44 <__lshift>
 80064fa:	4605      	mov	r5, r0
 80064fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d05a      	beq.n	80065b8 <_dtoa_r+0xa18>
 8006502:	6869      	ldr	r1, [r5, #4]
 8006504:	4658      	mov	r0, fp
 8006506:	f000 fa0f 	bl	8006928 <_Balloc>
 800650a:	4606      	mov	r6, r0
 800650c:	b928      	cbnz	r0, 800651a <_dtoa_r+0x97a>
 800650e:	4b84      	ldr	r3, [pc, #528]	@ (8006720 <_dtoa_r+0xb80>)
 8006510:	4602      	mov	r2, r0
 8006512:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006516:	f7ff bb5a 	b.w	8005bce <_dtoa_r+0x2e>
 800651a:	692a      	ldr	r2, [r5, #16]
 800651c:	3202      	adds	r2, #2
 800651e:	0092      	lsls	r2, r2, #2
 8006520:	f105 010c 	add.w	r1, r5, #12
 8006524:	300c      	adds	r0, #12
 8006526:	f000 ffaf 	bl	8007488 <memcpy>
 800652a:	2201      	movs	r2, #1
 800652c:	4631      	mov	r1, r6
 800652e:	4658      	mov	r0, fp
 8006530:	f000 fc08 	bl	8006d44 <__lshift>
 8006534:	f10a 0301 	add.w	r3, sl, #1
 8006538:	9307      	str	r3, [sp, #28]
 800653a:	9b00      	ldr	r3, [sp, #0]
 800653c:	4453      	add	r3, sl
 800653e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006540:	9b02      	ldr	r3, [sp, #8]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	462f      	mov	r7, r5
 8006548:	930a      	str	r3, [sp, #40]	@ 0x28
 800654a:	4605      	mov	r5, r0
 800654c:	9b07      	ldr	r3, [sp, #28]
 800654e:	4621      	mov	r1, r4
 8006550:	3b01      	subs	r3, #1
 8006552:	4648      	mov	r0, r9
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	f7ff fa98 	bl	8005a8a <quorem>
 800655a:	4639      	mov	r1, r7
 800655c:	9002      	str	r0, [sp, #8]
 800655e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006562:	4648      	mov	r0, r9
 8006564:	f000 fc5a 	bl	8006e1c <__mcmp>
 8006568:	462a      	mov	r2, r5
 800656a:	9008      	str	r0, [sp, #32]
 800656c:	4621      	mov	r1, r4
 800656e:	4658      	mov	r0, fp
 8006570:	f000 fc70 	bl	8006e54 <__mdiff>
 8006574:	68c2      	ldr	r2, [r0, #12]
 8006576:	4606      	mov	r6, r0
 8006578:	bb02      	cbnz	r2, 80065bc <_dtoa_r+0xa1c>
 800657a:	4601      	mov	r1, r0
 800657c:	4648      	mov	r0, r9
 800657e:	f000 fc4d 	bl	8006e1c <__mcmp>
 8006582:	4602      	mov	r2, r0
 8006584:	4631      	mov	r1, r6
 8006586:	4658      	mov	r0, fp
 8006588:	920e      	str	r2, [sp, #56]	@ 0x38
 800658a:	f000 fa0d 	bl	80069a8 <_Bfree>
 800658e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006592:	9e07      	ldr	r6, [sp, #28]
 8006594:	ea43 0102 	orr.w	r1, r3, r2
 8006598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800659a:	4319      	orrs	r1, r3
 800659c:	d110      	bne.n	80065c0 <_dtoa_r+0xa20>
 800659e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065a2:	d029      	beq.n	80065f8 <_dtoa_r+0xa58>
 80065a4:	9b08      	ldr	r3, [sp, #32]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	dd02      	ble.n	80065b0 <_dtoa_r+0xa10>
 80065aa:	9b02      	ldr	r3, [sp, #8]
 80065ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80065b0:	9b00      	ldr	r3, [sp, #0]
 80065b2:	f883 8000 	strb.w	r8, [r3]
 80065b6:	e63f      	b.n	8006238 <_dtoa_r+0x698>
 80065b8:	4628      	mov	r0, r5
 80065ba:	e7bb      	b.n	8006534 <_dtoa_r+0x994>
 80065bc:	2201      	movs	r2, #1
 80065be:	e7e1      	b.n	8006584 <_dtoa_r+0x9e4>
 80065c0:	9b08      	ldr	r3, [sp, #32]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	db04      	blt.n	80065d0 <_dtoa_r+0xa30>
 80065c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065c8:	430b      	orrs	r3, r1
 80065ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065cc:	430b      	orrs	r3, r1
 80065ce:	d120      	bne.n	8006612 <_dtoa_r+0xa72>
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	dded      	ble.n	80065b0 <_dtoa_r+0xa10>
 80065d4:	4649      	mov	r1, r9
 80065d6:	2201      	movs	r2, #1
 80065d8:	4658      	mov	r0, fp
 80065da:	f000 fbb3 	bl	8006d44 <__lshift>
 80065de:	4621      	mov	r1, r4
 80065e0:	4681      	mov	r9, r0
 80065e2:	f000 fc1b 	bl	8006e1c <__mcmp>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	dc03      	bgt.n	80065f2 <_dtoa_r+0xa52>
 80065ea:	d1e1      	bne.n	80065b0 <_dtoa_r+0xa10>
 80065ec:	f018 0f01 	tst.w	r8, #1
 80065f0:	d0de      	beq.n	80065b0 <_dtoa_r+0xa10>
 80065f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065f6:	d1d8      	bne.n	80065aa <_dtoa_r+0xa0a>
 80065f8:	9a00      	ldr	r2, [sp, #0]
 80065fa:	2339      	movs	r3, #57	@ 0x39
 80065fc:	7013      	strb	r3, [r2, #0]
 80065fe:	4633      	mov	r3, r6
 8006600:	461e      	mov	r6, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006608:	2a39      	cmp	r2, #57	@ 0x39
 800660a:	d052      	beq.n	80066b2 <_dtoa_r+0xb12>
 800660c:	3201      	adds	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e612      	b.n	8006238 <_dtoa_r+0x698>
 8006612:	2a00      	cmp	r2, #0
 8006614:	dd07      	ble.n	8006626 <_dtoa_r+0xa86>
 8006616:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800661a:	d0ed      	beq.n	80065f8 <_dtoa_r+0xa58>
 800661c:	9a00      	ldr	r2, [sp, #0]
 800661e:	f108 0301 	add.w	r3, r8, #1
 8006622:	7013      	strb	r3, [r2, #0]
 8006624:	e608      	b.n	8006238 <_dtoa_r+0x698>
 8006626:	9b07      	ldr	r3, [sp, #28]
 8006628:	9a07      	ldr	r2, [sp, #28]
 800662a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800662e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006630:	4293      	cmp	r3, r2
 8006632:	d028      	beq.n	8006686 <_dtoa_r+0xae6>
 8006634:	4649      	mov	r1, r9
 8006636:	2300      	movs	r3, #0
 8006638:	220a      	movs	r2, #10
 800663a:	4658      	mov	r0, fp
 800663c:	f000 f9d6 	bl	80069ec <__multadd>
 8006640:	42af      	cmp	r7, r5
 8006642:	4681      	mov	r9, r0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	f04f 020a 	mov.w	r2, #10
 800664c:	4639      	mov	r1, r7
 800664e:	4658      	mov	r0, fp
 8006650:	d107      	bne.n	8006662 <_dtoa_r+0xac2>
 8006652:	f000 f9cb 	bl	80069ec <__multadd>
 8006656:	4607      	mov	r7, r0
 8006658:	4605      	mov	r5, r0
 800665a:	9b07      	ldr	r3, [sp, #28]
 800665c:	3301      	adds	r3, #1
 800665e:	9307      	str	r3, [sp, #28]
 8006660:	e774      	b.n	800654c <_dtoa_r+0x9ac>
 8006662:	f000 f9c3 	bl	80069ec <__multadd>
 8006666:	4629      	mov	r1, r5
 8006668:	4607      	mov	r7, r0
 800666a:	2300      	movs	r3, #0
 800666c:	220a      	movs	r2, #10
 800666e:	4658      	mov	r0, fp
 8006670:	f000 f9bc 	bl	80069ec <__multadd>
 8006674:	4605      	mov	r5, r0
 8006676:	e7f0      	b.n	800665a <_dtoa_r+0xaba>
 8006678:	9b00      	ldr	r3, [sp, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	bfcc      	ite	gt
 800667e:	461e      	movgt	r6, r3
 8006680:	2601      	movle	r6, #1
 8006682:	4456      	add	r6, sl
 8006684:	2700      	movs	r7, #0
 8006686:	4649      	mov	r1, r9
 8006688:	2201      	movs	r2, #1
 800668a:	4658      	mov	r0, fp
 800668c:	f000 fb5a 	bl	8006d44 <__lshift>
 8006690:	4621      	mov	r1, r4
 8006692:	4681      	mov	r9, r0
 8006694:	f000 fbc2 	bl	8006e1c <__mcmp>
 8006698:	2800      	cmp	r0, #0
 800669a:	dcb0      	bgt.n	80065fe <_dtoa_r+0xa5e>
 800669c:	d102      	bne.n	80066a4 <_dtoa_r+0xb04>
 800669e:	f018 0f01 	tst.w	r8, #1
 80066a2:	d1ac      	bne.n	80065fe <_dtoa_r+0xa5e>
 80066a4:	4633      	mov	r3, r6
 80066a6:	461e      	mov	r6, r3
 80066a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ac:	2a30      	cmp	r2, #48	@ 0x30
 80066ae:	d0fa      	beq.n	80066a6 <_dtoa_r+0xb06>
 80066b0:	e5c2      	b.n	8006238 <_dtoa_r+0x698>
 80066b2:	459a      	cmp	sl, r3
 80066b4:	d1a4      	bne.n	8006600 <_dtoa_r+0xa60>
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	3301      	adds	r3, #1
 80066ba:	9304      	str	r3, [sp, #16]
 80066bc:	2331      	movs	r3, #49	@ 0x31
 80066be:	f88a 3000 	strb.w	r3, [sl]
 80066c2:	e5b9      	b.n	8006238 <_dtoa_r+0x698>
 80066c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006724 <_dtoa_r+0xb84>
 80066ca:	b11b      	cbz	r3, 80066d4 <_dtoa_r+0xb34>
 80066cc:	f10a 0308 	add.w	r3, sl, #8
 80066d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	4650      	mov	r0, sl
 80066d6:	b019      	add	sp, #100	@ 0x64
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066de:	2b01      	cmp	r3, #1
 80066e0:	f77f ae37 	ble.w	8006352 <_dtoa_r+0x7b2>
 80066e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e8:	2001      	movs	r0, #1
 80066ea:	e655      	b.n	8006398 <_dtoa_r+0x7f8>
 80066ec:	9b00      	ldr	r3, [sp, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f77f aed6 	ble.w	80064a0 <_dtoa_r+0x900>
 80066f4:	4656      	mov	r6, sl
 80066f6:	4621      	mov	r1, r4
 80066f8:	4648      	mov	r0, r9
 80066fa:	f7ff f9c6 	bl	8005a8a <quorem>
 80066fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006702:	f806 8b01 	strb.w	r8, [r6], #1
 8006706:	9b00      	ldr	r3, [sp, #0]
 8006708:	eba6 020a 	sub.w	r2, r6, sl
 800670c:	4293      	cmp	r3, r2
 800670e:	ddb3      	ble.n	8006678 <_dtoa_r+0xad8>
 8006710:	4649      	mov	r1, r9
 8006712:	2300      	movs	r3, #0
 8006714:	220a      	movs	r2, #10
 8006716:	4658      	mov	r0, fp
 8006718:	f000 f968 	bl	80069ec <__multadd>
 800671c:	4681      	mov	r9, r0
 800671e:	e7ea      	b.n	80066f6 <_dtoa_r+0xb56>
 8006720:	08007f28 	.word	0x08007f28
 8006724:	08007eac 	.word	0x08007eac

08006728 <_free_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4605      	mov	r5, r0
 800672c:	2900      	cmp	r1, #0
 800672e:	d041      	beq.n	80067b4 <_free_r+0x8c>
 8006730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006734:	1f0c      	subs	r4, r1, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	bfb8      	it	lt
 800673a:	18e4      	addlt	r4, r4, r3
 800673c:	f000 f8e8 	bl	8006910 <__malloc_lock>
 8006740:	4a1d      	ldr	r2, [pc, #116]	@ (80067b8 <_free_r+0x90>)
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	b933      	cbnz	r3, 8006754 <_free_r+0x2c>
 8006746:	6063      	str	r3, [r4, #4]
 8006748:	6014      	str	r4, [r2, #0]
 800674a:	4628      	mov	r0, r5
 800674c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006750:	f000 b8e4 	b.w	800691c <__malloc_unlock>
 8006754:	42a3      	cmp	r3, r4
 8006756:	d908      	bls.n	800676a <_free_r+0x42>
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	1821      	adds	r1, r4, r0
 800675c:	428b      	cmp	r3, r1
 800675e:	bf01      	itttt	eq
 8006760:	6819      	ldreq	r1, [r3, #0]
 8006762:	685b      	ldreq	r3, [r3, #4]
 8006764:	1809      	addeq	r1, r1, r0
 8006766:	6021      	streq	r1, [r4, #0]
 8006768:	e7ed      	b.n	8006746 <_free_r+0x1e>
 800676a:	461a      	mov	r2, r3
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	b10b      	cbz	r3, 8006774 <_free_r+0x4c>
 8006770:	42a3      	cmp	r3, r4
 8006772:	d9fa      	bls.n	800676a <_free_r+0x42>
 8006774:	6811      	ldr	r1, [r2, #0]
 8006776:	1850      	adds	r0, r2, r1
 8006778:	42a0      	cmp	r0, r4
 800677a:	d10b      	bne.n	8006794 <_free_r+0x6c>
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	4401      	add	r1, r0
 8006780:	1850      	adds	r0, r2, r1
 8006782:	4283      	cmp	r3, r0
 8006784:	6011      	str	r1, [r2, #0]
 8006786:	d1e0      	bne.n	800674a <_free_r+0x22>
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	6053      	str	r3, [r2, #4]
 800678e:	4408      	add	r0, r1
 8006790:	6010      	str	r0, [r2, #0]
 8006792:	e7da      	b.n	800674a <_free_r+0x22>
 8006794:	d902      	bls.n	800679c <_free_r+0x74>
 8006796:	230c      	movs	r3, #12
 8006798:	602b      	str	r3, [r5, #0]
 800679a:	e7d6      	b.n	800674a <_free_r+0x22>
 800679c:	6820      	ldr	r0, [r4, #0]
 800679e:	1821      	adds	r1, r4, r0
 80067a0:	428b      	cmp	r3, r1
 80067a2:	bf04      	itt	eq
 80067a4:	6819      	ldreq	r1, [r3, #0]
 80067a6:	685b      	ldreq	r3, [r3, #4]
 80067a8:	6063      	str	r3, [r4, #4]
 80067aa:	bf04      	itt	eq
 80067ac:	1809      	addeq	r1, r1, r0
 80067ae:	6021      	streq	r1, [r4, #0]
 80067b0:	6054      	str	r4, [r2, #4]
 80067b2:	e7ca      	b.n	800674a <_free_r+0x22>
 80067b4:	bd38      	pop	{r3, r4, r5, pc}
 80067b6:	bf00      	nop
 80067b8:	20000650 	.word	0x20000650

080067bc <malloc>:
 80067bc:	4b02      	ldr	r3, [pc, #8]	@ (80067c8 <malloc+0xc>)
 80067be:	4601      	mov	r1, r0
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f000 b825 	b.w	8006810 <_malloc_r>
 80067c6:	bf00      	nop
 80067c8:	20000020 	.word	0x20000020

080067cc <sbrk_aligned>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4e0f      	ldr	r6, [pc, #60]	@ (800680c <sbrk_aligned+0x40>)
 80067d0:	460c      	mov	r4, r1
 80067d2:	6831      	ldr	r1, [r6, #0]
 80067d4:	4605      	mov	r5, r0
 80067d6:	b911      	cbnz	r1, 80067de <sbrk_aligned+0x12>
 80067d8:	f000 fe46 	bl	8007468 <_sbrk_r>
 80067dc:	6030      	str	r0, [r6, #0]
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f000 fe41 	bl	8007468 <_sbrk_r>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d103      	bne.n	80067f2 <sbrk_aligned+0x26>
 80067ea:	f04f 34ff 	mov.w	r4, #4294967295
 80067ee:	4620      	mov	r0, r4
 80067f0:	bd70      	pop	{r4, r5, r6, pc}
 80067f2:	1cc4      	adds	r4, r0, #3
 80067f4:	f024 0403 	bic.w	r4, r4, #3
 80067f8:	42a0      	cmp	r0, r4
 80067fa:	d0f8      	beq.n	80067ee <sbrk_aligned+0x22>
 80067fc:	1a21      	subs	r1, r4, r0
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 fe32 	bl	8007468 <_sbrk_r>
 8006804:	3001      	adds	r0, #1
 8006806:	d1f2      	bne.n	80067ee <sbrk_aligned+0x22>
 8006808:	e7ef      	b.n	80067ea <sbrk_aligned+0x1e>
 800680a:	bf00      	nop
 800680c:	2000064c 	.word	0x2000064c

08006810 <_malloc_r>:
 8006810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006814:	1ccd      	adds	r5, r1, #3
 8006816:	f025 0503 	bic.w	r5, r5, #3
 800681a:	3508      	adds	r5, #8
 800681c:	2d0c      	cmp	r5, #12
 800681e:	bf38      	it	cc
 8006820:	250c      	movcc	r5, #12
 8006822:	2d00      	cmp	r5, #0
 8006824:	4606      	mov	r6, r0
 8006826:	db01      	blt.n	800682c <_malloc_r+0x1c>
 8006828:	42a9      	cmp	r1, r5
 800682a:	d904      	bls.n	8006836 <_malloc_r+0x26>
 800682c:	230c      	movs	r3, #12
 800682e:	6033      	str	r3, [r6, #0]
 8006830:	2000      	movs	r0, #0
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800690c <_malloc_r+0xfc>
 800683a:	f000 f869 	bl	8006910 <__malloc_lock>
 800683e:	f8d8 3000 	ldr.w	r3, [r8]
 8006842:	461c      	mov	r4, r3
 8006844:	bb44      	cbnz	r4, 8006898 <_malloc_r+0x88>
 8006846:	4629      	mov	r1, r5
 8006848:	4630      	mov	r0, r6
 800684a:	f7ff ffbf 	bl	80067cc <sbrk_aligned>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	4604      	mov	r4, r0
 8006852:	d158      	bne.n	8006906 <_malloc_r+0xf6>
 8006854:	f8d8 4000 	ldr.w	r4, [r8]
 8006858:	4627      	mov	r7, r4
 800685a:	2f00      	cmp	r7, #0
 800685c:	d143      	bne.n	80068e6 <_malloc_r+0xd6>
 800685e:	2c00      	cmp	r4, #0
 8006860:	d04b      	beq.n	80068fa <_malloc_r+0xea>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	4639      	mov	r1, r7
 8006866:	4630      	mov	r0, r6
 8006868:	eb04 0903 	add.w	r9, r4, r3
 800686c:	f000 fdfc 	bl	8007468 <_sbrk_r>
 8006870:	4581      	cmp	r9, r0
 8006872:	d142      	bne.n	80068fa <_malloc_r+0xea>
 8006874:	6821      	ldr	r1, [r4, #0]
 8006876:	1a6d      	subs	r5, r5, r1
 8006878:	4629      	mov	r1, r5
 800687a:	4630      	mov	r0, r6
 800687c:	f7ff ffa6 	bl	80067cc <sbrk_aligned>
 8006880:	3001      	adds	r0, #1
 8006882:	d03a      	beq.n	80068fa <_malloc_r+0xea>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	442b      	add	r3, r5
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	f8d8 3000 	ldr.w	r3, [r8]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	bb62      	cbnz	r2, 80068ec <_malloc_r+0xdc>
 8006892:	f8c8 7000 	str.w	r7, [r8]
 8006896:	e00f      	b.n	80068b8 <_malloc_r+0xa8>
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	1b52      	subs	r2, r2, r5
 800689c:	d420      	bmi.n	80068e0 <_malloc_r+0xd0>
 800689e:	2a0b      	cmp	r2, #11
 80068a0:	d917      	bls.n	80068d2 <_malloc_r+0xc2>
 80068a2:	1961      	adds	r1, r4, r5
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	6025      	str	r5, [r4, #0]
 80068a8:	bf18      	it	ne
 80068aa:	6059      	strne	r1, [r3, #4]
 80068ac:	6863      	ldr	r3, [r4, #4]
 80068ae:	bf08      	it	eq
 80068b0:	f8c8 1000 	streq.w	r1, [r8]
 80068b4:	5162      	str	r2, [r4, r5]
 80068b6:	604b      	str	r3, [r1, #4]
 80068b8:	4630      	mov	r0, r6
 80068ba:	f000 f82f 	bl	800691c <__malloc_unlock>
 80068be:	f104 000b 	add.w	r0, r4, #11
 80068c2:	1d23      	adds	r3, r4, #4
 80068c4:	f020 0007 	bic.w	r0, r0, #7
 80068c8:	1ac2      	subs	r2, r0, r3
 80068ca:	bf1c      	itt	ne
 80068cc:	1a1b      	subne	r3, r3, r0
 80068ce:	50a3      	strne	r3, [r4, r2]
 80068d0:	e7af      	b.n	8006832 <_malloc_r+0x22>
 80068d2:	6862      	ldr	r2, [r4, #4]
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	bf0c      	ite	eq
 80068d8:	f8c8 2000 	streq.w	r2, [r8]
 80068dc:	605a      	strne	r2, [r3, #4]
 80068de:	e7eb      	b.n	80068b8 <_malloc_r+0xa8>
 80068e0:	4623      	mov	r3, r4
 80068e2:	6864      	ldr	r4, [r4, #4]
 80068e4:	e7ae      	b.n	8006844 <_malloc_r+0x34>
 80068e6:	463c      	mov	r4, r7
 80068e8:	687f      	ldr	r7, [r7, #4]
 80068ea:	e7b6      	b.n	800685a <_malloc_r+0x4a>
 80068ec:	461a      	mov	r2, r3
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	d1fb      	bne.n	80068ec <_malloc_r+0xdc>
 80068f4:	2300      	movs	r3, #0
 80068f6:	6053      	str	r3, [r2, #4]
 80068f8:	e7de      	b.n	80068b8 <_malloc_r+0xa8>
 80068fa:	230c      	movs	r3, #12
 80068fc:	6033      	str	r3, [r6, #0]
 80068fe:	4630      	mov	r0, r6
 8006900:	f000 f80c 	bl	800691c <__malloc_unlock>
 8006904:	e794      	b.n	8006830 <_malloc_r+0x20>
 8006906:	6005      	str	r5, [r0, #0]
 8006908:	e7d6      	b.n	80068b8 <_malloc_r+0xa8>
 800690a:	bf00      	nop
 800690c:	20000650 	.word	0x20000650

08006910 <__malloc_lock>:
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <__malloc_lock+0x8>)
 8006912:	f7ff b8b8 	b.w	8005a86 <__retarget_lock_acquire_recursive>
 8006916:	bf00      	nop
 8006918:	20000648 	.word	0x20000648

0800691c <__malloc_unlock>:
 800691c:	4801      	ldr	r0, [pc, #4]	@ (8006924 <__malloc_unlock+0x8>)
 800691e:	f7ff b8b3 	b.w	8005a88 <__retarget_lock_release_recursive>
 8006922:	bf00      	nop
 8006924:	20000648 	.word	0x20000648

08006928 <_Balloc>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	69c6      	ldr	r6, [r0, #28]
 800692c:	4604      	mov	r4, r0
 800692e:	460d      	mov	r5, r1
 8006930:	b976      	cbnz	r6, 8006950 <_Balloc+0x28>
 8006932:	2010      	movs	r0, #16
 8006934:	f7ff ff42 	bl	80067bc <malloc>
 8006938:	4602      	mov	r2, r0
 800693a:	61e0      	str	r0, [r4, #28]
 800693c:	b920      	cbnz	r0, 8006948 <_Balloc+0x20>
 800693e:	4b18      	ldr	r3, [pc, #96]	@ (80069a0 <_Balloc+0x78>)
 8006940:	4818      	ldr	r0, [pc, #96]	@ (80069a4 <_Balloc+0x7c>)
 8006942:	216b      	movs	r1, #107	@ 0x6b
 8006944:	f000 fdae 	bl	80074a4 <__assert_func>
 8006948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800694c:	6006      	str	r6, [r0, #0]
 800694e:	60c6      	str	r6, [r0, #12]
 8006950:	69e6      	ldr	r6, [r4, #28]
 8006952:	68f3      	ldr	r3, [r6, #12]
 8006954:	b183      	cbz	r3, 8006978 <_Balloc+0x50>
 8006956:	69e3      	ldr	r3, [r4, #28]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800695e:	b9b8      	cbnz	r0, 8006990 <_Balloc+0x68>
 8006960:	2101      	movs	r1, #1
 8006962:	fa01 f605 	lsl.w	r6, r1, r5
 8006966:	1d72      	adds	r2, r6, #5
 8006968:	0092      	lsls	r2, r2, #2
 800696a:	4620      	mov	r0, r4
 800696c:	f000 fdb8 	bl	80074e0 <_calloc_r>
 8006970:	b160      	cbz	r0, 800698c <_Balloc+0x64>
 8006972:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006976:	e00e      	b.n	8006996 <_Balloc+0x6e>
 8006978:	2221      	movs	r2, #33	@ 0x21
 800697a:	2104      	movs	r1, #4
 800697c:	4620      	mov	r0, r4
 800697e:	f000 fdaf 	bl	80074e0 <_calloc_r>
 8006982:	69e3      	ldr	r3, [r4, #28]
 8006984:	60f0      	str	r0, [r6, #12]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e4      	bne.n	8006956 <_Balloc+0x2e>
 800698c:	2000      	movs	r0, #0
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	6802      	ldr	r2, [r0, #0]
 8006992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006996:	2300      	movs	r3, #0
 8006998:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800699c:	e7f7      	b.n	800698e <_Balloc+0x66>
 800699e:	bf00      	nop
 80069a0:	08007eb9 	.word	0x08007eb9
 80069a4:	08007f39 	.word	0x08007f39

080069a8 <_Bfree>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	69c6      	ldr	r6, [r0, #28]
 80069ac:	4605      	mov	r5, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	b976      	cbnz	r6, 80069d0 <_Bfree+0x28>
 80069b2:	2010      	movs	r0, #16
 80069b4:	f7ff ff02 	bl	80067bc <malloc>
 80069b8:	4602      	mov	r2, r0
 80069ba:	61e8      	str	r0, [r5, #28]
 80069bc:	b920      	cbnz	r0, 80069c8 <_Bfree+0x20>
 80069be:	4b09      	ldr	r3, [pc, #36]	@ (80069e4 <_Bfree+0x3c>)
 80069c0:	4809      	ldr	r0, [pc, #36]	@ (80069e8 <_Bfree+0x40>)
 80069c2:	218f      	movs	r1, #143	@ 0x8f
 80069c4:	f000 fd6e 	bl	80074a4 <__assert_func>
 80069c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069cc:	6006      	str	r6, [r0, #0]
 80069ce:	60c6      	str	r6, [r0, #12]
 80069d0:	b13c      	cbz	r4, 80069e2 <_Bfree+0x3a>
 80069d2:	69eb      	ldr	r3, [r5, #28]
 80069d4:	6862      	ldr	r2, [r4, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069dc:	6021      	str	r1, [r4, #0]
 80069de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	08007eb9 	.word	0x08007eb9
 80069e8:	08007f39 	.word	0x08007f39

080069ec <__multadd>:
 80069ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f0:	690d      	ldr	r5, [r1, #16]
 80069f2:	4607      	mov	r7, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	461e      	mov	r6, r3
 80069f8:	f101 0c14 	add.w	ip, r1, #20
 80069fc:	2000      	movs	r0, #0
 80069fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006a02:	b299      	uxth	r1, r3
 8006a04:	fb02 6101 	mla	r1, r2, r1, r6
 8006a08:	0c1e      	lsrs	r6, r3, #16
 8006a0a:	0c0b      	lsrs	r3, r1, #16
 8006a0c:	fb02 3306 	mla	r3, r2, r6, r3
 8006a10:	b289      	uxth	r1, r1
 8006a12:	3001      	adds	r0, #1
 8006a14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a18:	4285      	cmp	r5, r0
 8006a1a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a22:	dcec      	bgt.n	80069fe <__multadd+0x12>
 8006a24:	b30e      	cbz	r6, 8006a6a <__multadd+0x7e>
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	42ab      	cmp	r3, r5
 8006a2a:	dc19      	bgt.n	8006a60 <__multadd+0x74>
 8006a2c:	6861      	ldr	r1, [r4, #4]
 8006a2e:	4638      	mov	r0, r7
 8006a30:	3101      	adds	r1, #1
 8006a32:	f7ff ff79 	bl	8006928 <_Balloc>
 8006a36:	4680      	mov	r8, r0
 8006a38:	b928      	cbnz	r0, 8006a46 <__multadd+0x5a>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a70 <__multadd+0x84>)
 8006a3e:	480d      	ldr	r0, [pc, #52]	@ (8006a74 <__multadd+0x88>)
 8006a40:	21ba      	movs	r1, #186	@ 0xba
 8006a42:	f000 fd2f 	bl	80074a4 <__assert_func>
 8006a46:	6922      	ldr	r2, [r4, #16]
 8006a48:	3202      	adds	r2, #2
 8006a4a:	f104 010c 	add.w	r1, r4, #12
 8006a4e:	0092      	lsls	r2, r2, #2
 8006a50:	300c      	adds	r0, #12
 8006a52:	f000 fd19 	bl	8007488 <memcpy>
 8006a56:	4621      	mov	r1, r4
 8006a58:	4638      	mov	r0, r7
 8006a5a:	f7ff ffa5 	bl	80069a8 <_Bfree>
 8006a5e:	4644      	mov	r4, r8
 8006a60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a64:	3501      	adds	r5, #1
 8006a66:	615e      	str	r6, [r3, #20]
 8006a68:	6125      	str	r5, [r4, #16]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a70:	08007f28 	.word	0x08007f28
 8006a74:	08007f39 	.word	0x08007f39

08006a78 <__hi0bits>:
 8006a78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	bf36      	itet	cc
 8006a80:	0403      	lslcc	r3, r0, #16
 8006a82:	2000      	movcs	r0, #0
 8006a84:	2010      	movcc	r0, #16
 8006a86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a8a:	bf3c      	itt	cc
 8006a8c:	021b      	lslcc	r3, r3, #8
 8006a8e:	3008      	addcc	r0, #8
 8006a90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a94:	bf3c      	itt	cc
 8006a96:	011b      	lslcc	r3, r3, #4
 8006a98:	3004      	addcc	r0, #4
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9e:	bf3c      	itt	cc
 8006aa0:	009b      	lslcc	r3, r3, #2
 8006aa2:	3002      	addcc	r0, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	db05      	blt.n	8006ab4 <__hi0bits+0x3c>
 8006aa8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006aac:	f100 0001 	add.w	r0, r0, #1
 8006ab0:	bf08      	it	eq
 8006ab2:	2020      	moveq	r0, #32
 8006ab4:	4770      	bx	lr

08006ab6 <__lo0bits>:
 8006ab6:	6803      	ldr	r3, [r0, #0]
 8006ab8:	4602      	mov	r2, r0
 8006aba:	f013 0007 	ands.w	r0, r3, #7
 8006abe:	d00b      	beq.n	8006ad8 <__lo0bits+0x22>
 8006ac0:	07d9      	lsls	r1, r3, #31
 8006ac2:	d421      	bmi.n	8006b08 <__lo0bits+0x52>
 8006ac4:	0798      	lsls	r0, r3, #30
 8006ac6:	bf49      	itett	mi
 8006ac8:	085b      	lsrmi	r3, r3, #1
 8006aca:	089b      	lsrpl	r3, r3, #2
 8006acc:	2001      	movmi	r0, #1
 8006ace:	6013      	strmi	r3, [r2, #0]
 8006ad0:	bf5c      	itt	pl
 8006ad2:	6013      	strpl	r3, [r2, #0]
 8006ad4:	2002      	movpl	r0, #2
 8006ad6:	4770      	bx	lr
 8006ad8:	b299      	uxth	r1, r3
 8006ada:	b909      	cbnz	r1, 8006ae0 <__lo0bits+0x2a>
 8006adc:	0c1b      	lsrs	r3, r3, #16
 8006ade:	2010      	movs	r0, #16
 8006ae0:	b2d9      	uxtb	r1, r3
 8006ae2:	b909      	cbnz	r1, 8006ae8 <__lo0bits+0x32>
 8006ae4:	3008      	adds	r0, #8
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	0719      	lsls	r1, r3, #28
 8006aea:	bf04      	itt	eq
 8006aec:	091b      	lsreq	r3, r3, #4
 8006aee:	3004      	addeq	r0, #4
 8006af0:	0799      	lsls	r1, r3, #30
 8006af2:	bf04      	itt	eq
 8006af4:	089b      	lsreq	r3, r3, #2
 8006af6:	3002      	addeq	r0, #2
 8006af8:	07d9      	lsls	r1, r3, #31
 8006afa:	d403      	bmi.n	8006b04 <__lo0bits+0x4e>
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	f100 0001 	add.w	r0, r0, #1
 8006b02:	d003      	beq.n	8006b0c <__lo0bits+0x56>
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	4770      	bx	lr
 8006b08:	2000      	movs	r0, #0
 8006b0a:	4770      	bx	lr
 8006b0c:	2020      	movs	r0, #32
 8006b0e:	4770      	bx	lr

08006b10 <__i2b>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	460c      	mov	r4, r1
 8006b14:	2101      	movs	r1, #1
 8006b16:	f7ff ff07 	bl	8006928 <_Balloc>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	b928      	cbnz	r0, 8006b2a <__i2b+0x1a>
 8006b1e:	4b05      	ldr	r3, [pc, #20]	@ (8006b34 <__i2b+0x24>)
 8006b20:	4805      	ldr	r0, [pc, #20]	@ (8006b38 <__i2b+0x28>)
 8006b22:	f240 1145 	movw	r1, #325	@ 0x145
 8006b26:	f000 fcbd 	bl	80074a4 <__assert_func>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	6144      	str	r4, [r0, #20]
 8006b2e:	6103      	str	r3, [r0, #16]
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	bf00      	nop
 8006b34:	08007f28 	.word	0x08007f28
 8006b38:	08007f39 	.word	0x08007f39

08006b3c <__multiply>:
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	4614      	mov	r4, r2
 8006b42:	690a      	ldr	r2, [r1, #16]
 8006b44:	6923      	ldr	r3, [r4, #16]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	bfa8      	it	ge
 8006b4a:	4623      	movge	r3, r4
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	bfa4      	itt	ge
 8006b50:	460c      	movge	r4, r1
 8006b52:	461f      	movge	r7, r3
 8006b54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006b58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006b5c:	68a3      	ldr	r3, [r4, #8]
 8006b5e:	6861      	ldr	r1, [r4, #4]
 8006b60:	eb0a 0609 	add.w	r6, sl, r9
 8006b64:	42b3      	cmp	r3, r6
 8006b66:	b085      	sub	sp, #20
 8006b68:	bfb8      	it	lt
 8006b6a:	3101      	addlt	r1, #1
 8006b6c:	f7ff fedc 	bl	8006928 <_Balloc>
 8006b70:	b930      	cbnz	r0, 8006b80 <__multiply+0x44>
 8006b72:	4602      	mov	r2, r0
 8006b74:	4b44      	ldr	r3, [pc, #272]	@ (8006c88 <__multiply+0x14c>)
 8006b76:	4845      	ldr	r0, [pc, #276]	@ (8006c8c <__multiply+0x150>)
 8006b78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006b7c:	f000 fc92 	bl	80074a4 <__assert_func>
 8006b80:	f100 0514 	add.w	r5, r0, #20
 8006b84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b88:	462b      	mov	r3, r5
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	4543      	cmp	r3, r8
 8006b8e:	d321      	bcc.n	8006bd4 <__multiply+0x98>
 8006b90:	f107 0114 	add.w	r1, r7, #20
 8006b94:	f104 0214 	add.w	r2, r4, #20
 8006b98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006b9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ba0:	9302      	str	r3, [sp, #8]
 8006ba2:	1b13      	subs	r3, r2, r4
 8006ba4:	3b15      	subs	r3, #21
 8006ba6:	f023 0303 	bic.w	r3, r3, #3
 8006baa:	3304      	adds	r3, #4
 8006bac:	f104 0715 	add.w	r7, r4, #21
 8006bb0:	42ba      	cmp	r2, r7
 8006bb2:	bf38      	it	cc
 8006bb4:	2304      	movcc	r3, #4
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	9b02      	ldr	r3, [sp, #8]
 8006bba:	9103      	str	r1, [sp, #12]
 8006bbc:	428b      	cmp	r3, r1
 8006bbe:	d80c      	bhi.n	8006bda <__multiply+0x9e>
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	dd03      	ble.n	8006bcc <__multiply+0x90>
 8006bc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d05b      	beq.n	8006c84 <__multiply+0x148>
 8006bcc:	6106      	str	r6, [r0, #16]
 8006bce:	b005      	add	sp, #20
 8006bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd4:	f843 2b04 	str.w	r2, [r3], #4
 8006bd8:	e7d8      	b.n	8006b8c <__multiply+0x50>
 8006bda:	f8b1 a000 	ldrh.w	sl, [r1]
 8006bde:	f1ba 0f00 	cmp.w	sl, #0
 8006be2:	d024      	beq.n	8006c2e <__multiply+0xf2>
 8006be4:	f104 0e14 	add.w	lr, r4, #20
 8006be8:	46a9      	mov	r9, r5
 8006bea:	f04f 0c00 	mov.w	ip, #0
 8006bee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006bf2:	f8d9 3000 	ldr.w	r3, [r9]
 8006bf6:	fa1f fb87 	uxth.w	fp, r7
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c04:	f8d9 7000 	ldr.w	r7, [r9]
 8006c08:	4463      	add	r3, ip
 8006c0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c0e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006c12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c1c:	4572      	cmp	r2, lr
 8006c1e:	f849 3b04 	str.w	r3, [r9], #4
 8006c22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c26:	d8e2      	bhi.n	8006bee <__multiply+0xb2>
 8006c28:	9b01      	ldr	r3, [sp, #4]
 8006c2a:	f845 c003 	str.w	ip, [r5, r3]
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c34:	3104      	adds	r1, #4
 8006c36:	f1b9 0f00 	cmp.w	r9, #0
 8006c3a:	d021      	beq.n	8006c80 <__multiply+0x144>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	f104 0c14 	add.w	ip, r4, #20
 8006c42:	46ae      	mov	lr, r5
 8006c44:	f04f 0a00 	mov.w	sl, #0
 8006c48:	f8bc b000 	ldrh.w	fp, [ip]
 8006c4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006c50:	fb09 770b 	mla	r7, r9, fp, r7
 8006c54:	4457      	add	r7, sl
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c5c:	f84e 3b04 	str.w	r3, [lr], #4
 8006c60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c68:	f8be 3000 	ldrh.w	r3, [lr]
 8006c6c:	fb09 330a 	mla	r3, r9, sl, r3
 8006c70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006c74:	4562      	cmp	r2, ip
 8006c76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c7a:	d8e5      	bhi.n	8006c48 <__multiply+0x10c>
 8006c7c:	9f01      	ldr	r7, [sp, #4]
 8006c7e:	51eb      	str	r3, [r5, r7]
 8006c80:	3504      	adds	r5, #4
 8006c82:	e799      	b.n	8006bb8 <__multiply+0x7c>
 8006c84:	3e01      	subs	r6, #1
 8006c86:	e79b      	b.n	8006bc0 <__multiply+0x84>
 8006c88:	08007f28 	.word	0x08007f28
 8006c8c:	08007f39 	.word	0x08007f39

08006c90 <__pow5mult>:
 8006c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c94:	4615      	mov	r5, r2
 8006c96:	f012 0203 	ands.w	r2, r2, #3
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	460e      	mov	r6, r1
 8006c9e:	d007      	beq.n	8006cb0 <__pow5mult+0x20>
 8006ca0:	4c25      	ldr	r4, [pc, #148]	@ (8006d38 <__pow5mult+0xa8>)
 8006ca2:	3a01      	subs	r2, #1
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006caa:	f7ff fe9f 	bl	80069ec <__multadd>
 8006cae:	4606      	mov	r6, r0
 8006cb0:	10ad      	asrs	r5, r5, #2
 8006cb2:	d03d      	beq.n	8006d30 <__pow5mult+0xa0>
 8006cb4:	69fc      	ldr	r4, [r7, #28]
 8006cb6:	b97c      	cbnz	r4, 8006cd8 <__pow5mult+0x48>
 8006cb8:	2010      	movs	r0, #16
 8006cba:	f7ff fd7f 	bl	80067bc <malloc>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	61f8      	str	r0, [r7, #28]
 8006cc2:	b928      	cbnz	r0, 8006cd0 <__pow5mult+0x40>
 8006cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d3c <__pow5mult+0xac>)
 8006cc6:	481e      	ldr	r0, [pc, #120]	@ (8006d40 <__pow5mult+0xb0>)
 8006cc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ccc:	f000 fbea 	bl	80074a4 <__assert_func>
 8006cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cd4:	6004      	str	r4, [r0, #0]
 8006cd6:	60c4      	str	r4, [r0, #12]
 8006cd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ce0:	b94c      	cbnz	r4, 8006cf6 <__pow5mult+0x66>
 8006ce2:	f240 2171 	movw	r1, #625	@ 0x271
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f7ff ff12 	bl	8006b10 <__i2b>
 8006cec:	2300      	movs	r3, #0
 8006cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	6003      	str	r3, [r0, #0]
 8006cf6:	f04f 0900 	mov.w	r9, #0
 8006cfa:	07eb      	lsls	r3, r5, #31
 8006cfc:	d50a      	bpl.n	8006d14 <__pow5mult+0x84>
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4622      	mov	r2, r4
 8006d02:	4638      	mov	r0, r7
 8006d04:	f7ff ff1a 	bl	8006b3c <__multiply>
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4680      	mov	r8, r0
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7ff fe4b 	bl	80069a8 <_Bfree>
 8006d12:	4646      	mov	r6, r8
 8006d14:	106d      	asrs	r5, r5, #1
 8006d16:	d00b      	beq.n	8006d30 <__pow5mult+0xa0>
 8006d18:	6820      	ldr	r0, [r4, #0]
 8006d1a:	b938      	cbnz	r0, 8006d2c <__pow5mult+0x9c>
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4638      	mov	r0, r7
 8006d22:	f7ff ff0b 	bl	8006b3c <__multiply>
 8006d26:	6020      	str	r0, [r4, #0]
 8006d28:	f8c0 9000 	str.w	r9, [r0]
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	e7e4      	b.n	8006cfa <__pow5mult+0x6a>
 8006d30:	4630      	mov	r0, r6
 8006d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d36:	bf00      	nop
 8006d38:	08007f94 	.word	0x08007f94
 8006d3c:	08007eb9 	.word	0x08007eb9
 8006d40:	08007f39 	.word	0x08007f39

08006d44 <__lshift>:
 8006d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d48:	460c      	mov	r4, r1
 8006d4a:	6849      	ldr	r1, [r1, #4]
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	4607      	mov	r7, r0
 8006d56:	4691      	mov	r9, r2
 8006d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d5c:	f108 0601 	add.w	r6, r8, #1
 8006d60:	42b3      	cmp	r3, r6
 8006d62:	db0b      	blt.n	8006d7c <__lshift+0x38>
 8006d64:	4638      	mov	r0, r7
 8006d66:	f7ff fddf 	bl	8006928 <_Balloc>
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	b948      	cbnz	r0, 8006d82 <__lshift+0x3e>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	4b28      	ldr	r3, [pc, #160]	@ (8006e14 <__lshift+0xd0>)
 8006d72:	4829      	ldr	r0, [pc, #164]	@ (8006e18 <__lshift+0xd4>)
 8006d74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006d78:	f000 fb94 	bl	80074a4 <__assert_func>
 8006d7c:	3101      	adds	r1, #1
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	e7ee      	b.n	8006d60 <__lshift+0x1c>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f100 0114 	add.w	r1, r0, #20
 8006d88:	f100 0210 	add.w	r2, r0, #16
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	4553      	cmp	r3, sl
 8006d90:	db33      	blt.n	8006dfa <__lshift+0xb6>
 8006d92:	6920      	ldr	r0, [r4, #16]
 8006d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d98:	f104 0314 	add.w	r3, r4, #20
 8006d9c:	f019 091f 	ands.w	r9, r9, #31
 8006da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006da4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006da8:	d02b      	beq.n	8006e02 <__lshift+0xbe>
 8006daa:	f1c9 0e20 	rsb	lr, r9, #32
 8006dae:	468a      	mov	sl, r1
 8006db0:	2200      	movs	r2, #0
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	fa00 f009 	lsl.w	r0, r0, r9
 8006db8:	4310      	orrs	r0, r2
 8006dba:	f84a 0b04 	str.w	r0, [sl], #4
 8006dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc2:	459c      	cmp	ip, r3
 8006dc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006dc8:	d8f3      	bhi.n	8006db2 <__lshift+0x6e>
 8006dca:	ebac 0304 	sub.w	r3, ip, r4
 8006dce:	3b15      	subs	r3, #21
 8006dd0:	f023 0303 	bic.w	r3, r3, #3
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	f104 0015 	add.w	r0, r4, #21
 8006dda:	4584      	cmp	ip, r0
 8006ddc:	bf38      	it	cc
 8006dde:	2304      	movcc	r3, #4
 8006de0:	50ca      	str	r2, [r1, r3]
 8006de2:	b10a      	cbz	r2, 8006de8 <__lshift+0xa4>
 8006de4:	f108 0602 	add.w	r6, r8, #2
 8006de8:	3e01      	subs	r6, #1
 8006dea:	4638      	mov	r0, r7
 8006dec:	612e      	str	r6, [r5, #16]
 8006dee:	4621      	mov	r1, r4
 8006df0:	f7ff fdda 	bl	80069a8 <_Bfree>
 8006df4:	4628      	mov	r0, r5
 8006df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dfe:	3301      	adds	r3, #1
 8006e00:	e7c5      	b.n	8006d8e <__lshift+0x4a>
 8006e02:	3904      	subs	r1, #4
 8006e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e08:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e0c:	459c      	cmp	ip, r3
 8006e0e:	d8f9      	bhi.n	8006e04 <__lshift+0xc0>
 8006e10:	e7ea      	b.n	8006de8 <__lshift+0xa4>
 8006e12:	bf00      	nop
 8006e14:	08007f28 	.word	0x08007f28
 8006e18:	08007f39 	.word	0x08007f39

08006e1c <__mcmp>:
 8006e1c:	690a      	ldr	r2, [r1, #16]
 8006e1e:	4603      	mov	r3, r0
 8006e20:	6900      	ldr	r0, [r0, #16]
 8006e22:	1a80      	subs	r0, r0, r2
 8006e24:	b530      	push	{r4, r5, lr}
 8006e26:	d10e      	bne.n	8006e46 <__mcmp+0x2a>
 8006e28:	3314      	adds	r3, #20
 8006e2a:	3114      	adds	r1, #20
 8006e2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e3c:	4295      	cmp	r5, r2
 8006e3e:	d003      	beq.n	8006e48 <__mcmp+0x2c>
 8006e40:	d205      	bcs.n	8006e4e <__mcmp+0x32>
 8006e42:	f04f 30ff 	mov.w	r0, #4294967295
 8006e46:	bd30      	pop	{r4, r5, pc}
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d3f3      	bcc.n	8006e34 <__mcmp+0x18>
 8006e4c:	e7fb      	b.n	8006e46 <__mcmp+0x2a>
 8006e4e:	2001      	movs	r0, #1
 8006e50:	e7f9      	b.n	8006e46 <__mcmp+0x2a>
	...

08006e54 <__mdiff>:
 8006e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	4689      	mov	r9, r1
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4648      	mov	r0, r9
 8006e60:	4614      	mov	r4, r2
 8006e62:	f7ff ffdb 	bl	8006e1c <__mcmp>
 8006e66:	1e05      	subs	r5, r0, #0
 8006e68:	d112      	bne.n	8006e90 <__mdiff+0x3c>
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f7ff fd5b 	bl	8006928 <_Balloc>
 8006e72:	4602      	mov	r2, r0
 8006e74:	b928      	cbnz	r0, 8006e82 <__mdiff+0x2e>
 8006e76:	4b3f      	ldr	r3, [pc, #252]	@ (8006f74 <__mdiff+0x120>)
 8006e78:	f240 2137 	movw	r1, #567	@ 0x237
 8006e7c:	483e      	ldr	r0, [pc, #248]	@ (8006f78 <__mdiff+0x124>)
 8006e7e:	f000 fb11 	bl	80074a4 <__assert_func>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e88:	4610      	mov	r0, r2
 8006e8a:	b003      	add	sp, #12
 8006e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e90:	bfbc      	itt	lt
 8006e92:	464b      	movlt	r3, r9
 8006e94:	46a1      	movlt	r9, r4
 8006e96:	4630      	mov	r0, r6
 8006e98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e9c:	bfba      	itte	lt
 8006e9e:	461c      	movlt	r4, r3
 8006ea0:	2501      	movlt	r5, #1
 8006ea2:	2500      	movge	r5, #0
 8006ea4:	f7ff fd40 	bl	8006928 <_Balloc>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	b918      	cbnz	r0, 8006eb4 <__mdiff+0x60>
 8006eac:	4b31      	ldr	r3, [pc, #196]	@ (8006f74 <__mdiff+0x120>)
 8006eae:	f240 2145 	movw	r1, #581	@ 0x245
 8006eb2:	e7e3      	b.n	8006e7c <__mdiff+0x28>
 8006eb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006eb8:	6926      	ldr	r6, [r4, #16]
 8006eba:	60c5      	str	r5, [r0, #12]
 8006ebc:	f109 0310 	add.w	r3, r9, #16
 8006ec0:	f109 0514 	add.w	r5, r9, #20
 8006ec4:	f104 0e14 	add.w	lr, r4, #20
 8006ec8:	f100 0b14 	add.w	fp, r0, #20
 8006ecc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ed0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	46d9      	mov	r9, fp
 8006ed8:	f04f 0c00 	mov.w	ip, #0
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ee2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ee6:	9301      	str	r3, [sp, #4]
 8006ee8:	fa1f f38a 	uxth.w	r3, sl
 8006eec:	4619      	mov	r1, r3
 8006eee:	b283      	uxth	r3, r0
 8006ef0:	1acb      	subs	r3, r1, r3
 8006ef2:	0c00      	lsrs	r0, r0, #16
 8006ef4:	4463      	add	r3, ip
 8006ef6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006efa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f04:	4576      	cmp	r6, lr
 8006f06:	f849 3b04 	str.w	r3, [r9], #4
 8006f0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f0e:	d8e5      	bhi.n	8006edc <__mdiff+0x88>
 8006f10:	1b33      	subs	r3, r6, r4
 8006f12:	3b15      	subs	r3, #21
 8006f14:	f023 0303 	bic.w	r3, r3, #3
 8006f18:	3415      	adds	r4, #21
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	42a6      	cmp	r6, r4
 8006f1e:	bf38      	it	cc
 8006f20:	2304      	movcc	r3, #4
 8006f22:	441d      	add	r5, r3
 8006f24:	445b      	add	r3, fp
 8006f26:	461e      	mov	r6, r3
 8006f28:	462c      	mov	r4, r5
 8006f2a:	4544      	cmp	r4, r8
 8006f2c:	d30e      	bcc.n	8006f4c <__mdiff+0xf8>
 8006f2e:	f108 0103 	add.w	r1, r8, #3
 8006f32:	1b49      	subs	r1, r1, r5
 8006f34:	f021 0103 	bic.w	r1, r1, #3
 8006f38:	3d03      	subs	r5, #3
 8006f3a:	45a8      	cmp	r8, r5
 8006f3c:	bf38      	it	cc
 8006f3e:	2100      	movcc	r1, #0
 8006f40:	440b      	add	r3, r1
 8006f42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f46:	b191      	cbz	r1, 8006f6e <__mdiff+0x11a>
 8006f48:	6117      	str	r7, [r2, #16]
 8006f4a:	e79d      	b.n	8006e88 <__mdiff+0x34>
 8006f4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f50:	46e6      	mov	lr, ip
 8006f52:	0c08      	lsrs	r0, r1, #16
 8006f54:	fa1c fc81 	uxtah	ip, ip, r1
 8006f58:	4471      	add	r1, lr
 8006f5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006f5e:	b289      	uxth	r1, r1
 8006f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f64:	f846 1b04 	str.w	r1, [r6], #4
 8006f68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f6c:	e7dd      	b.n	8006f2a <__mdiff+0xd6>
 8006f6e:	3f01      	subs	r7, #1
 8006f70:	e7e7      	b.n	8006f42 <__mdiff+0xee>
 8006f72:	bf00      	nop
 8006f74:	08007f28 	.word	0x08007f28
 8006f78:	08007f39 	.word	0x08007f39

08006f7c <__d2b>:
 8006f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f80:	460f      	mov	r7, r1
 8006f82:	2101      	movs	r1, #1
 8006f84:	ec59 8b10 	vmov	r8, r9, d0
 8006f88:	4616      	mov	r6, r2
 8006f8a:	f7ff fccd 	bl	8006928 <_Balloc>
 8006f8e:	4604      	mov	r4, r0
 8006f90:	b930      	cbnz	r0, 8006fa0 <__d2b+0x24>
 8006f92:	4602      	mov	r2, r0
 8006f94:	4b23      	ldr	r3, [pc, #140]	@ (8007024 <__d2b+0xa8>)
 8006f96:	4824      	ldr	r0, [pc, #144]	@ (8007028 <__d2b+0xac>)
 8006f98:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f9c:	f000 fa82 	bl	80074a4 <__assert_func>
 8006fa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fa8:	b10d      	cbz	r5, 8006fae <__d2b+0x32>
 8006faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	f1b8 0300 	subs.w	r3, r8, #0
 8006fb4:	d023      	beq.n	8006ffe <__d2b+0x82>
 8006fb6:	4668      	mov	r0, sp
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	f7ff fd7c 	bl	8006ab6 <__lo0bits>
 8006fbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fc2:	b1d0      	cbz	r0, 8006ffa <__d2b+0x7e>
 8006fc4:	f1c0 0320 	rsb	r3, r0, #32
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	40c2      	lsrs	r2, r0
 8006fd0:	6163      	str	r3, [r4, #20]
 8006fd2:	9201      	str	r2, [sp, #4]
 8006fd4:	9b01      	ldr	r3, [sp, #4]
 8006fd6:	61a3      	str	r3, [r4, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bf0c      	ite	eq
 8006fdc:	2201      	moveq	r2, #1
 8006fde:	2202      	movne	r2, #2
 8006fe0:	6122      	str	r2, [r4, #16]
 8006fe2:	b1a5      	cbz	r5, 800700e <__d2b+0x92>
 8006fe4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006fe8:	4405      	add	r5, r0
 8006fea:	603d      	str	r5, [r7, #0]
 8006fec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ff0:	6030      	str	r0, [r6, #0]
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	b003      	add	sp, #12
 8006ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ffa:	6161      	str	r1, [r4, #20]
 8006ffc:	e7ea      	b.n	8006fd4 <__d2b+0x58>
 8006ffe:	a801      	add	r0, sp, #4
 8007000:	f7ff fd59 	bl	8006ab6 <__lo0bits>
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	6163      	str	r3, [r4, #20]
 8007008:	3020      	adds	r0, #32
 800700a:	2201      	movs	r2, #1
 800700c:	e7e8      	b.n	8006fe0 <__d2b+0x64>
 800700e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007012:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007016:	6038      	str	r0, [r7, #0]
 8007018:	6918      	ldr	r0, [r3, #16]
 800701a:	f7ff fd2d 	bl	8006a78 <__hi0bits>
 800701e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007022:	e7e5      	b.n	8006ff0 <__d2b+0x74>
 8007024:	08007f28 	.word	0x08007f28
 8007028:	08007f39 	.word	0x08007f39

0800702c <__ssputs_r>:
 800702c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	688e      	ldr	r6, [r1, #8]
 8007032:	461f      	mov	r7, r3
 8007034:	42be      	cmp	r6, r7
 8007036:	680b      	ldr	r3, [r1, #0]
 8007038:	4682      	mov	sl, r0
 800703a:	460c      	mov	r4, r1
 800703c:	4690      	mov	r8, r2
 800703e:	d82d      	bhi.n	800709c <__ssputs_r+0x70>
 8007040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007044:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007048:	d026      	beq.n	8007098 <__ssputs_r+0x6c>
 800704a:	6965      	ldr	r5, [r4, #20]
 800704c:	6909      	ldr	r1, [r1, #16]
 800704e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007052:	eba3 0901 	sub.w	r9, r3, r1
 8007056:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800705a:	1c7b      	adds	r3, r7, #1
 800705c:	444b      	add	r3, r9
 800705e:	106d      	asrs	r5, r5, #1
 8007060:	429d      	cmp	r5, r3
 8007062:	bf38      	it	cc
 8007064:	461d      	movcc	r5, r3
 8007066:	0553      	lsls	r3, r2, #21
 8007068:	d527      	bpl.n	80070ba <__ssputs_r+0x8e>
 800706a:	4629      	mov	r1, r5
 800706c:	f7ff fbd0 	bl	8006810 <_malloc_r>
 8007070:	4606      	mov	r6, r0
 8007072:	b360      	cbz	r0, 80070ce <__ssputs_r+0xa2>
 8007074:	6921      	ldr	r1, [r4, #16]
 8007076:	464a      	mov	r2, r9
 8007078:	f000 fa06 	bl	8007488 <memcpy>
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	6126      	str	r6, [r4, #16]
 800708a:	6165      	str	r5, [r4, #20]
 800708c:	444e      	add	r6, r9
 800708e:	eba5 0509 	sub.w	r5, r5, r9
 8007092:	6026      	str	r6, [r4, #0]
 8007094:	60a5      	str	r5, [r4, #8]
 8007096:	463e      	mov	r6, r7
 8007098:	42be      	cmp	r6, r7
 800709a:	d900      	bls.n	800709e <__ssputs_r+0x72>
 800709c:	463e      	mov	r6, r7
 800709e:	6820      	ldr	r0, [r4, #0]
 80070a0:	4632      	mov	r2, r6
 80070a2:	4641      	mov	r1, r8
 80070a4:	f000 f9c6 	bl	8007434 <memmove>
 80070a8:	68a3      	ldr	r3, [r4, #8]
 80070aa:	1b9b      	subs	r3, r3, r6
 80070ac:	60a3      	str	r3, [r4, #8]
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	4433      	add	r3, r6
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	2000      	movs	r0, #0
 80070b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ba:	462a      	mov	r2, r5
 80070bc:	f000 fa36 	bl	800752c <_realloc_r>
 80070c0:	4606      	mov	r6, r0
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d1e0      	bne.n	8007088 <__ssputs_r+0x5c>
 80070c6:	6921      	ldr	r1, [r4, #16]
 80070c8:	4650      	mov	r0, sl
 80070ca:	f7ff fb2d 	bl	8006728 <_free_r>
 80070ce:	230c      	movs	r3, #12
 80070d0:	f8ca 3000 	str.w	r3, [sl]
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295
 80070e0:	e7e9      	b.n	80070b6 <__ssputs_r+0x8a>
	...

080070e4 <_svfiprintf_r>:
 80070e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	4698      	mov	r8, r3
 80070ea:	898b      	ldrh	r3, [r1, #12]
 80070ec:	061b      	lsls	r3, r3, #24
 80070ee:	b09d      	sub	sp, #116	@ 0x74
 80070f0:	4607      	mov	r7, r0
 80070f2:	460d      	mov	r5, r1
 80070f4:	4614      	mov	r4, r2
 80070f6:	d510      	bpl.n	800711a <_svfiprintf_r+0x36>
 80070f8:	690b      	ldr	r3, [r1, #16]
 80070fa:	b973      	cbnz	r3, 800711a <_svfiprintf_r+0x36>
 80070fc:	2140      	movs	r1, #64	@ 0x40
 80070fe:	f7ff fb87 	bl	8006810 <_malloc_r>
 8007102:	6028      	str	r0, [r5, #0]
 8007104:	6128      	str	r0, [r5, #16]
 8007106:	b930      	cbnz	r0, 8007116 <_svfiprintf_r+0x32>
 8007108:	230c      	movs	r3, #12
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	b01d      	add	sp, #116	@ 0x74
 8007112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007116:	2340      	movs	r3, #64	@ 0x40
 8007118:	616b      	str	r3, [r5, #20]
 800711a:	2300      	movs	r3, #0
 800711c:	9309      	str	r3, [sp, #36]	@ 0x24
 800711e:	2320      	movs	r3, #32
 8007120:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007124:	f8cd 800c 	str.w	r8, [sp, #12]
 8007128:	2330      	movs	r3, #48	@ 0x30
 800712a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80072c8 <_svfiprintf_r+0x1e4>
 800712e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007132:	f04f 0901 	mov.w	r9, #1
 8007136:	4623      	mov	r3, r4
 8007138:	469a      	mov	sl, r3
 800713a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800713e:	b10a      	cbz	r2, 8007144 <_svfiprintf_r+0x60>
 8007140:	2a25      	cmp	r2, #37	@ 0x25
 8007142:	d1f9      	bne.n	8007138 <_svfiprintf_r+0x54>
 8007144:	ebba 0b04 	subs.w	fp, sl, r4
 8007148:	d00b      	beq.n	8007162 <_svfiprintf_r+0x7e>
 800714a:	465b      	mov	r3, fp
 800714c:	4622      	mov	r2, r4
 800714e:	4629      	mov	r1, r5
 8007150:	4638      	mov	r0, r7
 8007152:	f7ff ff6b 	bl	800702c <__ssputs_r>
 8007156:	3001      	adds	r0, #1
 8007158:	f000 80a7 	beq.w	80072aa <_svfiprintf_r+0x1c6>
 800715c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800715e:	445a      	add	r2, fp
 8007160:	9209      	str	r2, [sp, #36]	@ 0x24
 8007162:	f89a 3000 	ldrb.w	r3, [sl]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 809f 	beq.w	80072aa <_svfiprintf_r+0x1c6>
 800716c:	2300      	movs	r3, #0
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007176:	f10a 0a01 	add.w	sl, sl, #1
 800717a:	9304      	str	r3, [sp, #16]
 800717c:	9307      	str	r3, [sp, #28]
 800717e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007182:	931a      	str	r3, [sp, #104]	@ 0x68
 8007184:	4654      	mov	r4, sl
 8007186:	2205      	movs	r2, #5
 8007188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718c:	484e      	ldr	r0, [pc, #312]	@ (80072c8 <_svfiprintf_r+0x1e4>)
 800718e:	f7f9 f82f 	bl	80001f0 <memchr>
 8007192:	9a04      	ldr	r2, [sp, #16]
 8007194:	b9d8      	cbnz	r0, 80071ce <_svfiprintf_r+0xea>
 8007196:	06d0      	lsls	r0, r2, #27
 8007198:	bf44      	itt	mi
 800719a:	2320      	movmi	r3, #32
 800719c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071a0:	0711      	lsls	r1, r2, #28
 80071a2:	bf44      	itt	mi
 80071a4:	232b      	movmi	r3, #43	@ 0x2b
 80071a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071aa:	f89a 3000 	ldrb.w	r3, [sl]
 80071ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80071b0:	d015      	beq.n	80071de <_svfiprintf_r+0xfa>
 80071b2:	9a07      	ldr	r2, [sp, #28]
 80071b4:	4654      	mov	r4, sl
 80071b6:	2000      	movs	r0, #0
 80071b8:	f04f 0c0a 	mov.w	ip, #10
 80071bc:	4621      	mov	r1, r4
 80071be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071c2:	3b30      	subs	r3, #48	@ 0x30
 80071c4:	2b09      	cmp	r3, #9
 80071c6:	d94b      	bls.n	8007260 <_svfiprintf_r+0x17c>
 80071c8:	b1b0      	cbz	r0, 80071f8 <_svfiprintf_r+0x114>
 80071ca:	9207      	str	r2, [sp, #28]
 80071cc:	e014      	b.n	80071f8 <_svfiprintf_r+0x114>
 80071ce:	eba0 0308 	sub.w	r3, r0, r8
 80071d2:	fa09 f303 	lsl.w	r3, r9, r3
 80071d6:	4313      	orrs	r3, r2
 80071d8:	9304      	str	r3, [sp, #16]
 80071da:	46a2      	mov	sl, r4
 80071dc:	e7d2      	b.n	8007184 <_svfiprintf_r+0xa0>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	1d19      	adds	r1, r3, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	9103      	str	r1, [sp, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bfbb      	ittet	lt
 80071ea:	425b      	neglt	r3, r3
 80071ec:	f042 0202 	orrlt.w	r2, r2, #2
 80071f0:	9307      	strge	r3, [sp, #28]
 80071f2:	9307      	strlt	r3, [sp, #28]
 80071f4:	bfb8      	it	lt
 80071f6:	9204      	strlt	r2, [sp, #16]
 80071f8:	7823      	ldrb	r3, [r4, #0]
 80071fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80071fc:	d10a      	bne.n	8007214 <_svfiprintf_r+0x130>
 80071fe:	7863      	ldrb	r3, [r4, #1]
 8007200:	2b2a      	cmp	r3, #42	@ 0x2a
 8007202:	d132      	bne.n	800726a <_svfiprintf_r+0x186>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	1d1a      	adds	r2, r3, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	9203      	str	r2, [sp, #12]
 800720c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007210:	3402      	adds	r4, #2
 8007212:	9305      	str	r3, [sp, #20]
 8007214:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80072d8 <_svfiprintf_r+0x1f4>
 8007218:	7821      	ldrb	r1, [r4, #0]
 800721a:	2203      	movs	r2, #3
 800721c:	4650      	mov	r0, sl
 800721e:	f7f8 ffe7 	bl	80001f0 <memchr>
 8007222:	b138      	cbz	r0, 8007234 <_svfiprintf_r+0x150>
 8007224:	9b04      	ldr	r3, [sp, #16]
 8007226:	eba0 000a 	sub.w	r0, r0, sl
 800722a:	2240      	movs	r2, #64	@ 0x40
 800722c:	4082      	lsls	r2, r0
 800722e:	4313      	orrs	r3, r2
 8007230:	3401      	adds	r4, #1
 8007232:	9304      	str	r3, [sp, #16]
 8007234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007238:	4824      	ldr	r0, [pc, #144]	@ (80072cc <_svfiprintf_r+0x1e8>)
 800723a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800723e:	2206      	movs	r2, #6
 8007240:	f7f8 ffd6 	bl	80001f0 <memchr>
 8007244:	2800      	cmp	r0, #0
 8007246:	d036      	beq.n	80072b6 <_svfiprintf_r+0x1d2>
 8007248:	4b21      	ldr	r3, [pc, #132]	@ (80072d0 <_svfiprintf_r+0x1ec>)
 800724a:	bb1b      	cbnz	r3, 8007294 <_svfiprintf_r+0x1b0>
 800724c:	9b03      	ldr	r3, [sp, #12]
 800724e:	3307      	adds	r3, #7
 8007250:	f023 0307 	bic.w	r3, r3, #7
 8007254:	3308      	adds	r3, #8
 8007256:	9303      	str	r3, [sp, #12]
 8007258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800725a:	4433      	add	r3, r6
 800725c:	9309      	str	r3, [sp, #36]	@ 0x24
 800725e:	e76a      	b.n	8007136 <_svfiprintf_r+0x52>
 8007260:	fb0c 3202 	mla	r2, ip, r2, r3
 8007264:	460c      	mov	r4, r1
 8007266:	2001      	movs	r0, #1
 8007268:	e7a8      	b.n	80071bc <_svfiprintf_r+0xd8>
 800726a:	2300      	movs	r3, #0
 800726c:	3401      	adds	r4, #1
 800726e:	9305      	str	r3, [sp, #20]
 8007270:	4619      	mov	r1, r3
 8007272:	f04f 0c0a 	mov.w	ip, #10
 8007276:	4620      	mov	r0, r4
 8007278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800727c:	3a30      	subs	r2, #48	@ 0x30
 800727e:	2a09      	cmp	r2, #9
 8007280:	d903      	bls.n	800728a <_svfiprintf_r+0x1a6>
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0c6      	beq.n	8007214 <_svfiprintf_r+0x130>
 8007286:	9105      	str	r1, [sp, #20]
 8007288:	e7c4      	b.n	8007214 <_svfiprintf_r+0x130>
 800728a:	fb0c 2101 	mla	r1, ip, r1, r2
 800728e:	4604      	mov	r4, r0
 8007290:	2301      	movs	r3, #1
 8007292:	e7f0      	b.n	8007276 <_svfiprintf_r+0x192>
 8007294:	ab03      	add	r3, sp, #12
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	462a      	mov	r2, r5
 800729a:	4b0e      	ldr	r3, [pc, #56]	@ (80072d4 <_svfiprintf_r+0x1f0>)
 800729c:	a904      	add	r1, sp, #16
 800729e:	4638      	mov	r0, r7
 80072a0:	f7fd fe82 	bl	8004fa8 <_printf_float>
 80072a4:	1c42      	adds	r2, r0, #1
 80072a6:	4606      	mov	r6, r0
 80072a8:	d1d6      	bne.n	8007258 <_svfiprintf_r+0x174>
 80072aa:	89ab      	ldrh	r3, [r5, #12]
 80072ac:	065b      	lsls	r3, r3, #25
 80072ae:	f53f af2d 	bmi.w	800710c <_svfiprintf_r+0x28>
 80072b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072b4:	e72c      	b.n	8007110 <_svfiprintf_r+0x2c>
 80072b6:	ab03      	add	r3, sp, #12
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	462a      	mov	r2, r5
 80072bc:	4b05      	ldr	r3, [pc, #20]	@ (80072d4 <_svfiprintf_r+0x1f0>)
 80072be:	a904      	add	r1, sp, #16
 80072c0:	4638      	mov	r0, r7
 80072c2:	f7fe f909 	bl	80054d8 <_printf_i>
 80072c6:	e7ed      	b.n	80072a4 <_svfiprintf_r+0x1c0>
 80072c8:	08008090 	.word	0x08008090
 80072cc:	0800809a 	.word	0x0800809a
 80072d0:	08004fa9 	.word	0x08004fa9
 80072d4:	0800702d 	.word	0x0800702d
 80072d8:	08008096 	.word	0x08008096

080072dc <__sflush_r>:
 80072dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e4:	0716      	lsls	r6, r2, #28
 80072e6:	4605      	mov	r5, r0
 80072e8:	460c      	mov	r4, r1
 80072ea:	d454      	bmi.n	8007396 <__sflush_r+0xba>
 80072ec:	684b      	ldr	r3, [r1, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dc02      	bgt.n	80072f8 <__sflush_r+0x1c>
 80072f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dd48      	ble.n	800738a <__sflush_r+0xae>
 80072f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072fa:	2e00      	cmp	r6, #0
 80072fc:	d045      	beq.n	800738a <__sflush_r+0xae>
 80072fe:	2300      	movs	r3, #0
 8007300:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007304:	682f      	ldr	r7, [r5, #0]
 8007306:	6a21      	ldr	r1, [r4, #32]
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	d030      	beq.n	800736e <__sflush_r+0x92>
 800730c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	0759      	lsls	r1, r3, #29
 8007312:	d505      	bpl.n	8007320 <__sflush_r+0x44>
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	1ad2      	subs	r2, r2, r3
 8007318:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800731a:	b10b      	cbz	r3, 8007320 <__sflush_r+0x44>
 800731c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800731e:	1ad2      	subs	r2, r2, r3
 8007320:	2300      	movs	r3, #0
 8007322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007324:	6a21      	ldr	r1, [r4, #32]
 8007326:	4628      	mov	r0, r5
 8007328:	47b0      	blx	r6
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	d106      	bne.n	800733e <__sflush_r+0x62>
 8007330:	6829      	ldr	r1, [r5, #0]
 8007332:	291d      	cmp	r1, #29
 8007334:	d82b      	bhi.n	800738e <__sflush_r+0xb2>
 8007336:	4a2a      	ldr	r2, [pc, #168]	@ (80073e0 <__sflush_r+0x104>)
 8007338:	410a      	asrs	r2, r1
 800733a:	07d6      	lsls	r6, r2, #31
 800733c:	d427      	bmi.n	800738e <__sflush_r+0xb2>
 800733e:	2200      	movs	r2, #0
 8007340:	6062      	str	r2, [r4, #4]
 8007342:	04d9      	lsls	r1, r3, #19
 8007344:	6922      	ldr	r2, [r4, #16]
 8007346:	6022      	str	r2, [r4, #0]
 8007348:	d504      	bpl.n	8007354 <__sflush_r+0x78>
 800734a:	1c42      	adds	r2, r0, #1
 800734c:	d101      	bne.n	8007352 <__sflush_r+0x76>
 800734e:	682b      	ldr	r3, [r5, #0]
 8007350:	b903      	cbnz	r3, 8007354 <__sflush_r+0x78>
 8007352:	6560      	str	r0, [r4, #84]	@ 0x54
 8007354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007356:	602f      	str	r7, [r5, #0]
 8007358:	b1b9      	cbz	r1, 800738a <__sflush_r+0xae>
 800735a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800735e:	4299      	cmp	r1, r3
 8007360:	d002      	beq.n	8007368 <__sflush_r+0x8c>
 8007362:	4628      	mov	r0, r5
 8007364:	f7ff f9e0 	bl	8006728 <_free_r>
 8007368:	2300      	movs	r3, #0
 800736a:	6363      	str	r3, [r4, #52]	@ 0x34
 800736c:	e00d      	b.n	800738a <__sflush_r+0xae>
 800736e:	2301      	movs	r3, #1
 8007370:	4628      	mov	r0, r5
 8007372:	47b0      	blx	r6
 8007374:	4602      	mov	r2, r0
 8007376:	1c50      	adds	r0, r2, #1
 8007378:	d1c9      	bne.n	800730e <__sflush_r+0x32>
 800737a:	682b      	ldr	r3, [r5, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0c6      	beq.n	800730e <__sflush_r+0x32>
 8007380:	2b1d      	cmp	r3, #29
 8007382:	d001      	beq.n	8007388 <__sflush_r+0xac>
 8007384:	2b16      	cmp	r3, #22
 8007386:	d11e      	bne.n	80073c6 <__sflush_r+0xea>
 8007388:	602f      	str	r7, [r5, #0]
 800738a:	2000      	movs	r0, #0
 800738c:	e022      	b.n	80073d4 <__sflush_r+0xf8>
 800738e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007392:	b21b      	sxth	r3, r3
 8007394:	e01b      	b.n	80073ce <__sflush_r+0xf2>
 8007396:	690f      	ldr	r7, [r1, #16]
 8007398:	2f00      	cmp	r7, #0
 800739a:	d0f6      	beq.n	800738a <__sflush_r+0xae>
 800739c:	0793      	lsls	r3, r2, #30
 800739e:	680e      	ldr	r6, [r1, #0]
 80073a0:	bf08      	it	eq
 80073a2:	694b      	ldreq	r3, [r1, #20]
 80073a4:	600f      	str	r7, [r1, #0]
 80073a6:	bf18      	it	ne
 80073a8:	2300      	movne	r3, #0
 80073aa:	eba6 0807 	sub.w	r8, r6, r7
 80073ae:	608b      	str	r3, [r1, #8]
 80073b0:	f1b8 0f00 	cmp.w	r8, #0
 80073b4:	dde9      	ble.n	800738a <__sflush_r+0xae>
 80073b6:	6a21      	ldr	r1, [r4, #32]
 80073b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073ba:	4643      	mov	r3, r8
 80073bc:	463a      	mov	r2, r7
 80073be:	4628      	mov	r0, r5
 80073c0:	47b0      	blx	r6
 80073c2:	2800      	cmp	r0, #0
 80073c4:	dc08      	bgt.n	80073d8 <__sflush_r+0xfc>
 80073c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	4407      	add	r7, r0
 80073da:	eba8 0800 	sub.w	r8, r8, r0
 80073de:	e7e7      	b.n	80073b0 <__sflush_r+0xd4>
 80073e0:	dfbffffe 	.word	0xdfbffffe

080073e4 <_fflush_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	690b      	ldr	r3, [r1, #16]
 80073e8:	4605      	mov	r5, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	b913      	cbnz	r3, 80073f4 <_fflush_r+0x10>
 80073ee:	2500      	movs	r5, #0
 80073f0:	4628      	mov	r0, r5
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	b118      	cbz	r0, 80073fe <_fflush_r+0x1a>
 80073f6:	6a03      	ldr	r3, [r0, #32]
 80073f8:	b90b      	cbnz	r3, 80073fe <_fflush_r+0x1a>
 80073fa:	f7fe fa19 	bl	8005830 <__sinit>
 80073fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0f3      	beq.n	80073ee <_fflush_r+0xa>
 8007406:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007408:	07d0      	lsls	r0, r2, #31
 800740a:	d404      	bmi.n	8007416 <_fflush_r+0x32>
 800740c:	0599      	lsls	r1, r3, #22
 800740e:	d402      	bmi.n	8007416 <_fflush_r+0x32>
 8007410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007412:	f7fe fb38 	bl	8005a86 <__retarget_lock_acquire_recursive>
 8007416:	4628      	mov	r0, r5
 8007418:	4621      	mov	r1, r4
 800741a:	f7ff ff5f 	bl	80072dc <__sflush_r>
 800741e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007420:	07da      	lsls	r2, r3, #31
 8007422:	4605      	mov	r5, r0
 8007424:	d4e4      	bmi.n	80073f0 <_fflush_r+0xc>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	059b      	lsls	r3, r3, #22
 800742a:	d4e1      	bmi.n	80073f0 <_fflush_r+0xc>
 800742c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800742e:	f7fe fb2b 	bl	8005a88 <__retarget_lock_release_recursive>
 8007432:	e7dd      	b.n	80073f0 <_fflush_r+0xc>

08007434 <memmove>:
 8007434:	4288      	cmp	r0, r1
 8007436:	b510      	push	{r4, lr}
 8007438:	eb01 0402 	add.w	r4, r1, r2
 800743c:	d902      	bls.n	8007444 <memmove+0x10>
 800743e:	4284      	cmp	r4, r0
 8007440:	4623      	mov	r3, r4
 8007442:	d807      	bhi.n	8007454 <memmove+0x20>
 8007444:	1e43      	subs	r3, r0, #1
 8007446:	42a1      	cmp	r1, r4
 8007448:	d008      	beq.n	800745c <memmove+0x28>
 800744a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800744e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007452:	e7f8      	b.n	8007446 <memmove+0x12>
 8007454:	4402      	add	r2, r0
 8007456:	4601      	mov	r1, r0
 8007458:	428a      	cmp	r2, r1
 800745a:	d100      	bne.n	800745e <memmove+0x2a>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007466:	e7f7      	b.n	8007458 <memmove+0x24>

08007468 <_sbrk_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d06      	ldr	r5, [pc, #24]	@ (8007484 <_sbrk_r+0x1c>)
 800746c:	2300      	movs	r3, #0
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f7fa fd10 	bl	8001e98 <_sbrk>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_sbrk_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_sbrk_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20000644 	.word	0x20000644

08007488 <memcpy>:
 8007488:	440a      	add	r2, r1
 800748a:	4291      	cmp	r1, r2
 800748c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007490:	d100      	bne.n	8007494 <memcpy+0xc>
 8007492:	4770      	bx	lr
 8007494:	b510      	push	{r4, lr}
 8007496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800749a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800749e:	4291      	cmp	r1, r2
 80074a0:	d1f9      	bne.n	8007496 <memcpy+0xe>
 80074a2:	bd10      	pop	{r4, pc}

080074a4 <__assert_func>:
 80074a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074a6:	4614      	mov	r4, r2
 80074a8:	461a      	mov	r2, r3
 80074aa:	4b09      	ldr	r3, [pc, #36]	@ (80074d0 <__assert_func+0x2c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4605      	mov	r5, r0
 80074b0:	68d8      	ldr	r0, [r3, #12]
 80074b2:	b954      	cbnz	r4, 80074ca <__assert_func+0x26>
 80074b4:	4b07      	ldr	r3, [pc, #28]	@ (80074d4 <__assert_func+0x30>)
 80074b6:	461c      	mov	r4, r3
 80074b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074bc:	9100      	str	r1, [sp, #0]
 80074be:	462b      	mov	r3, r5
 80074c0:	4905      	ldr	r1, [pc, #20]	@ (80074d8 <__assert_func+0x34>)
 80074c2:	f000 f86f 	bl	80075a4 <fiprintf>
 80074c6:	f000 f87f 	bl	80075c8 <abort>
 80074ca:	4b04      	ldr	r3, [pc, #16]	@ (80074dc <__assert_func+0x38>)
 80074cc:	e7f4      	b.n	80074b8 <__assert_func+0x14>
 80074ce:	bf00      	nop
 80074d0:	20000020 	.word	0x20000020
 80074d4:	080080e6 	.word	0x080080e6
 80074d8:	080080b8 	.word	0x080080b8
 80074dc:	080080ab 	.word	0x080080ab

080074e0 <_calloc_r>:
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	fba1 5402 	umull	r5, r4, r1, r2
 80074e6:	b93c      	cbnz	r4, 80074f8 <_calloc_r+0x18>
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7ff f991 	bl	8006810 <_malloc_r>
 80074ee:	4606      	mov	r6, r0
 80074f0:	b928      	cbnz	r0, 80074fe <_calloc_r+0x1e>
 80074f2:	2600      	movs	r6, #0
 80074f4:	4630      	mov	r0, r6
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	220c      	movs	r2, #12
 80074fa:	6002      	str	r2, [r0, #0]
 80074fc:	e7f9      	b.n	80074f2 <_calloc_r+0x12>
 80074fe:	462a      	mov	r2, r5
 8007500:	4621      	mov	r1, r4
 8007502:	f7fe fa42 	bl	800598a <memset>
 8007506:	e7f5      	b.n	80074f4 <_calloc_r+0x14>

08007508 <__ascii_mbtowc>:
 8007508:	b082      	sub	sp, #8
 800750a:	b901      	cbnz	r1, 800750e <__ascii_mbtowc+0x6>
 800750c:	a901      	add	r1, sp, #4
 800750e:	b142      	cbz	r2, 8007522 <__ascii_mbtowc+0x1a>
 8007510:	b14b      	cbz	r3, 8007526 <__ascii_mbtowc+0x1e>
 8007512:	7813      	ldrb	r3, [r2, #0]
 8007514:	600b      	str	r3, [r1, #0]
 8007516:	7812      	ldrb	r2, [r2, #0]
 8007518:	1e10      	subs	r0, r2, #0
 800751a:	bf18      	it	ne
 800751c:	2001      	movne	r0, #1
 800751e:	b002      	add	sp, #8
 8007520:	4770      	bx	lr
 8007522:	4610      	mov	r0, r2
 8007524:	e7fb      	b.n	800751e <__ascii_mbtowc+0x16>
 8007526:	f06f 0001 	mvn.w	r0, #1
 800752a:	e7f8      	b.n	800751e <__ascii_mbtowc+0x16>

0800752c <_realloc_r>:
 800752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	4680      	mov	r8, r0
 8007532:	4615      	mov	r5, r2
 8007534:	460c      	mov	r4, r1
 8007536:	b921      	cbnz	r1, 8007542 <_realloc_r+0x16>
 8007538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800753c:	4611      	mov	r1, r2
 800753e:	f7ff b967 	b.w	8006810 <_malloc_r>
 8007542:	b92a      	cbnz	r2, 8007550 <_realloc_r+0x24>
 8007544:	f7ff f8f0 	bl	8006728 <_free_r>
 8007548:	2400      	movs	r4, #0
 800754a:	4620      	mov	r0, r4
 800754c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007550:	f000 f841 	bl	80075d6 <_malloc_usable_size_r>
 8007554:	4285      	cmp	r5, r0
 8007556:	4606      	mov	r6, r0
 8007558:	d802      	bhi.n	8007560 <_realloc_r+0x34>
 800755a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800755e:	d8f4      	bhi.n	800754a <_realloc_r+0x1e>
 8007560:	4629      	mov	r1, r5
 8007562:	4640      	mov	r0, r8
 8007564:	f7ff f954 	bl	8006810 <_malloc_r>
 8007568:	4607      	mov	r7, r0
 800756a:	2800      	cmp	r0, #0
 800756c:	d0ec      	beq.n	8007548 <_realloc_r+0x1c>
 800756e:	42b5      	cmp	r5, r6
 8007570:	462a      	mov	r2, r5
 8007572:	4621      	mov	r1, r4
 8007574:	bf28      	it	cs
 8007576:	4632      	movcs	r2, r6
 8007578:	f7ff ff86 	bl	8007488 <memcpy>
 800757c:	4621      	mov	r1, r4
 800757e:	4640      	mov	r0, r8
 8007580:	f7ff f8d2 	bl	8006728 <_free_r>
 8007584:	463c      	mov	r4, r7
 8007586:	e7e0      	b.n	800754a <_realloc_r+0x1e>

08007588 <__ascii_wctomb>:
 8007588:	4603      	mov	r3, r0
 800758a:	4608      	mov	r0, r1
 800758c:	b141      	cbz	r1, 80075a0 <__ascii_wctomb+0x18>
 800758e:	2aff      	cmp	r2, #255	@ 0xff
 8007590:	d904      	bls.n	800759c <__ascii_wctomb+0x14>
 8007592:	228a      	movs	r2, #138	@ 0x8a
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	f04f 30ff 	mov.w	r0, #4294967295
 800759a:	4770      	bx	lr
 800759c:	700a      	strb	r2, [r1, #0]
 800759e:	2001      	movs	r0, #1
 80075a0:	4770      	bx	lr
	...

080075a4 <fiprintf>:
 80075a4:	b40e      	push	{r1, r2, r3}
 80075a6:	b503      	push	{r0, r1, lr}
 80075a8:	4601      	mov	r1, r0
 80075aa:	ab03      	add	r3, sp, #12
 80075ac:	4805      	ldr	r0, [pc, #20]	@ (80075c4 <fiprintf+0x20>)
 80075ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80075b2:	6800      	ldr	r0, [r0, #0]
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	f000 f83f 	bl	8007638 <_vfiprintf_r>
 80075ba:	b002      	add	sp, #8
 80075bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075c0:	b003      	add	sp, #12
 80075c2:	4770      	bx	lr
 80075c4:	20000020 	.word	0x20000020

080075c8 <abort>:
 80075c8:	b508      	push	{r3, lr}
 80075ca:	2006      	movs	r0, #6
 80075cc:	f000 fa08 	bl	80079e0 <raise>
 80075d0:	2001      	movs	r0, #1
 80075d2:	f7fa fbe8 	bl	8001da6 <_exit>

080075d6 <_malloc_usable_size_r>:
 80075d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075da:	1f18      	subs	r0, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bfbc      	itt	lt
 80075e0:	580b      	ldrlt	r3, [r1, r0]
 80075e2:	18c0      	addlt	r0, r0, r3
 80075e4:	4770      	bx	lr

080075e6 <__sfputc_r>:
 80075e6:	6893      	ldr	r3, [r2, #8]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	b410      	push	{r4}
 80075ee:	6093      	str	r3, [r2, #8]
 80075f0:	da08      	bge.n	8007604 <__sfputc_r+0x1e>
 80075f2:	6994      	ldr	r4, [r2, #24]
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	db01      	blt.n	80075fc <__sfputc_r+0x16>
 80075f8:	290a      	cmp	r1, #10
 80075fa:	d103      	bne.n	8007604 <__sfputc_r+0x1e>
 80075fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007600:	f000 b932 	b.w	8007868 <__swbuf_r>
 8007604:	6813      	ldr	r3, [r2, #0]
 8007606:	1c58      	adds	r0, r3, #1
 8007608:	6010      	str	r0, [r2, #0]
 800760a:	7019      	strb	r1, [r3, #0]
 800760c:	4608      	mov	r0, r1
 800760e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007612:	4770      	bx	lr

08007614 <__sfputs_r>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	4606      	mov	r6, r0
 8007618:	460f      	mov	r7, r1
 800761a:	4614      	mov	r4, r2
 800761c:	18d5      	adds	r5, r2, r3
 800761e:	42ac      	cmp	r4, r5
 8007620:	d101      	bne.n	8007626 <__sfputs_r+0x12>
 8007622:	2000      	movs	r0, #0
 8007624:	e007      	b.n	8007636 <__sfputs_r+0x22>
 8007626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762a:	463a      	mov	r2, r7
 800762c:	4630      	mov	r0, r6
 800762e:	f7ff ffda 	bl	80075e6 <__sfputc_r>
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	d1f3      	bne.n	800761e <__sfputs_r+0xa>
 8007636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007638 <_vfiprintf_r>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	460d      	mov	r5, r1
 800763e:	b09d      	sub	sp, #116	@ 0x74
 8007640:	4614      	mov	r4, r2
 8007642:	4698      	mov	r8, r3
 8007644:	4606      	mov	r6, r0
 8007646:	b118      	cbz	r0, 8007650 <_vfiprintf_r+0x18>
 8007648:	6a03      	ldr	r3, [r0, #32]
 800764a:	b90b      	cbnz	r3, 8007650 <_vfiprintf_r+0x18>
 800764c:	f7fe f8f0 	bl	8005830 <__sinit>
 8007650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007652:	07d9      	lsls	r1, r3, #31
 8007654:	d405      	bmi.n	8007662 <_vfiprintf_r+0x2a>
 8007656:	89ab      	ldrh	r3, [r5, #12]
 8007658:	059a      	lsls	r2, r3, #22
 800765a:	d402      	bmi.n	8007662 <_vfiprintf_r+0x2a>
 800765c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800765e:	f7fe fa12 	bl	8005a86 <__retarget_lock_acquire_recursive>
 8007662:	89ab      	ldrh	r3, [r5, #12]
 8007664:	071b      	lsls	r3, r3, #28
 8007666:	d501      	bpl.n	800766c <_vfiprintf_r+0x34>
 8007668:	692b      	ldr	r3, [r5, #16]
 800766a:	b99b      	cbnz	r3, 8007694 <_vfiprintf_r+0x5c>
 800766c:	4629      	mov	r1, r5
 800766e:	4630      	mov	r0, r6
 8007670:	f000 f938 	bl	80078e4 <__swsetup_r>
 8007674:	b170      	cbz	r0, 8007694 <_vfiprintf_r+0x5c>
 8007676:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007678:	07dc      	lsls	r4, r3, #31
 800767a:	d504      	bpl.n	8007686 <_vfiprintf_r+0x4e>
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	b01d      	add	sp, #116	@ 0x74
 8007682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	0598      	lsls	r0, r3, #22
 800768a:	d4f7      	bmi.n	800767c <_vfiprintf_r+0x44>
 800768c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800768e:	f7fe f9fb 	bl	8005a88 <__retarget_lock_release_recursive>
 8007692:	e7f3      	b.n	800767c <_vfiprintf_r+0x44>
 8007694:	2300      	movs	r3, #0
 8007696:	9309      	str	r3, [sp, #36]	@ 0x24
 8007698:	2320      	movs	r3, #32
 800769a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800769e:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a2:	2330      	movs	r3, #48	@ 0x30
 80076a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007854 <_vfiprintf_r+0x21c>
 80076a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076ac:	f04f 0901 	mov.w	r9, #1
 80076b0:	4623      	mov	r3, r4
 80076b2:	469a      	mov	sl, r3
 80076b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b8:	b10a      	cbz	r2, 80076be <_vfiprintf_r+0x86>
 80076ba:	2a25      	cmp	r2, #37	@ 0x25
 80076bc:	d1f9      	bne.n	80076b2 <_vfiprintf_r+0x7a>
 80076be:	ebba 0b04 	subs.w	fp, sl, r4
 80076c2:	d00b      	beq.n	80076dc <_vfiprintf_r+0xa4>
 80076c4:	465b      	mov	r3, fp
 80076c6:	4622      	mov	r2, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7ff ffa2 	bl	8007614 <__sfputs_r>
 80076d0:	3001      	adds	r0, #1
 80076d2:	f000 80a7 	beq.w	8007824 <_vfiprintf_r+0x1ec>
 80076d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076d8:	445a      	add	r2, fp
 80076da:	9209      	str	r2, [sp, #36]	@ 0x24
 80076dc:	f89a 3000 	ldrb.w	r3, [sl]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 809f 	beq.w	8007824 <_vfiprintf_r+0x1ec>
 80076e6:	2300      	movs	r3, #0
 80076e8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f0:	f10a 0a01 	add.w	sl, sl, #1
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80076fe:	4654      	mov	r4, sl
 8007700:	2205      	movs	r2, #5
 8007702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007706:	4853      	ldr	r0, [pc, #332]	@ (8007854 <_vfiprintf_r+0x21c>)
 8007708:	f7f8 fd72 	bl	80001f0 <memchr>
 800770c:	9a04      	ldr	r2, [sp, #16]
 800770e:	b9d8      	cbnz	r0, 8007748 <_vfiprintf_r+0x110>
 8007710:	06d1      	lsls	r1, r2, #27
 8007712:	bf44      	itt	mi
 8007714:	2320      	movmi	r3, #32
 8007716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800771a:	0713      	lsls	r3, r2, #28
 800771c:	bf44      	itt	mi
 800771e:	232b      	movmi	r3, #43	@ 0x2b
 8007720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007724:	f89a 3000 	ldrb.w	r3, [sl]
 8007728:	2b2a      	cmp	r3, #42	@ 0x2a
 800772a:	d015      	beq.n	8007758 <_vfiprintf_r+0x120>
 800772c:	9a07      	ldr	r2, [sp, #28]
 800772e:	4654      	mov	r4, sl
 8007730:	2000      	movs	r0, #0
 8007732:	f04f 0c0a 	mov.w	ip, #10
 8007736:	4621      	mov	r1, r4
 8007738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800773c:	3b30      	subs	r3, #48	@ 0x30
 800773e:	2b09      	cmp	r3, #9
 8007740:	d94b      	bls.n	80077da <_vfiprintf_r+0x1a2>
 8007742:	b1b0      	cbz	r0, 8007772 <_vfiprintf_r+0x13a>
 8007744:	9207      	str	r2, [sp, #28]
 8007746:	e014      	b.n	8007772 <_vfiprintf_r+0x13a>
 8007748:	eba0 0308 	sub.w	r3, r0, r8
 800774c:	fa09 f303 	lsl.w	r3, r9, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	9304      	str	r3, [sp, #16]
 8007754:	46a2      	mov	sl, r4
 8007756:	e7d2      	b.n	80076fe <_vfiprintf_r+0xc6>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	1d19      	adds	r1, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	9103      	str	r1, [sp, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	bfbb      	ittet	lt
 8007764:	425b      	neglt	r3, r3
 8007766:	f042 0202 	orrlt.w	r2, r2, #2
 800776a:	9307      	strge	r3, [sp, #28]
 800776c:	9307      	strlt	r3, [sp, #28]
 800776e:	bfb8      	it	lt
 8007770:	9204      	strlt	r2, [sp, #16]
 8007772:	7823      	ldrb	r3, [r4, #0]
 8007774:	2b2e      	cmp	r3, #46	@ 0x2e
 8007776:	d10a      	bne.n	800778e <_vfiprintf_r+0x156>
 8007778:	7863      	ldrb	r3, [r4, #1]
 800777a:	2b2a      	cmp	r3, #42	@ 0x2a
 800777c:	d132      	bne.n	80077e4 <_vfiprintf_r+0x1ac>
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	9203      	str	r2, [sp, #12]
 8007786:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800778a:	3402      	adds	r4, #2
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007864 <_vfiprintf_r+0x22c>
 8007792:	7821      	ldrb	r1, [r4, #0]
 8007794:	2203      	movs	r2, #3
 8007796:	4650      	mov	r0, sl
 8007798:	f7f8 fd2a 	bl	80001f0 <memchr>
 800779c:	b138      	cbz	r0, 80077ae <_vfiprintf_r+0x176>
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	eba0 000a 	sub.w	r0, r0, sl
 80077a4:	2240      	movs	r2, #64	@ 0x40
 80077a6:	4082      	lsls	r2, r0
 80077a8:	4313      	orrs	r3, r2
 80077aa:	3401      	adds	r4, #1
 80077ac:	9304      	str	r3, [sp, #16]
 80077ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b2:	4829      	ldr	r0, [pc, #164]	@ (8007858 <_vfiprintf_r+0x220>)
 80077b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077b8:	2206      	movs	r2, #6
 80077ba:	f7f8 fd19 	bl	80001f0 <memchr>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d03f      	beq.n	8007842 <_vfiprintf_r+0x20a>
 80077c2:	4b26      	ldr	r3, [pc, #152]	@ (800785c <_vfiprintf_r+0x224>)
 80077c4:	bb1b      	cbnz	r3, 800780e <_vfiprintf_r+0x1d6>
 80077c6:	9b03      	ldr	r3, [sp, #12]
 80077c8:	3307      	adds	r3, #7
 80077ca:	f023 0307 	bic.w	r3, r3, #7
 80077ce:	3308      	adds	r3, #8
 80077d0:	9303      	str	r3, [sp, #12]
 80077d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d4:	443b      	add	r3, r7
 80077d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80077d8:	e76a      	b.n	80076b0 <_vfiprintf_r+0x78>
 80077da:	fb0c 3202 	mla	r2, ip, r2, r3
 80077de:	460c      	mov	r4, r1
 80077e0:	2001      	movs	r0, #1
 80077e2:	e7a8      	b.n	8007736 <_vfiprintf_r+0xfe>
 80077e4:	2300      	movs	r3, #0
 80077e6:	3401      	adds	r4, #1
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	4619      	mov	r1, r3
 80077ec:	f04f 0c0a 	mov.w	ip, #10
 80077f0:	4620      	mov	r0, r4
 80077f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077f6:	3a30      	subs	r2, #48	@ 0x30
 80077f8:	2a09      	cmp	r2, #9
 80077fa:	d903      	bls.n	8007804 <_vfiprintf_r+0x1cc>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0c6      	beq.n	800778e <_vfiprintf_r+0x156>
 8007800:	9105      	str	r1, [sp, #20]
 8007802:	e7c4      	b.n	800778e <_vfiprintf_r+0x156>
 8007804:	fb0c 2101 	mla	r1, ip, r1, r2
 8007808:	4604      	mov	r4, r0
 800780a:	2301      	movs	r3, #1
 800780c:	e7f0      	b.n	80077f0 <_vfiprintf_r+0x1b8>
 800780e:	ab03      	add	r3, sp, #12
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	462a      	mov	r2, r5
 8007814:	4b12      	ldr	r3, [pc, #72]	@ (8007860 <_vfiprintf_r+0x228>)
 8007816:	a904      	add	r1, sp, #16
 8007818:	4630      	mov	r0, r6
 800781a:	f7fd fbc5 	bl	8004fa8 <_printf_float>
 800781e:	4607      	mov	r7, r0
 8007820:	1c78      	adds	r0, r7, #1
 8007822:	d1d6      	bne.n	80077d2 <_vfiprintf_r+0x19a>
 8007824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007826:	07d9      	lsls	r1, r3, #31
 8007828:	d405      	bmi.n	8007836 <_vfiprintf_r+0x1fe>
 800782a:	89ab      	ldrh	r3, [r5, #12]
 800782c:	059a      	lsls	r2, r3, #22
 800782e:	d402      	bmi.n	8007836 <_vfiprintf_r+0x1fe>
 8007830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007832:	f7fe f929 	bl	8005a88 <__retarget_lock_release_recursive>
 8007836:	89ab      	ldrh	r3, [r5, #12]
 8007838:	065b      	lsls	r3, r3, #25
 800783a:	f53f af1f 	bmi.w	800767c <_vfiprintf_r+0x44>
 800783e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007840:	e71e      	b.n	8007680 <_vfiprintf_r+0x48>
 8007842:	ab03      	add	r3, sp, #12
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	462a      	mov	r2, r5
 8007848:	4b05      	ldr	r3, [pc, #20]	@ (8007860 <_vfiprintf_r+0x228>)
 800784a:	a904      	add	r1, sp, #16
 800784c:	4630      	mov	r0, r6
 800784e:	f7fd fe43 	bl	80054d8 <_printf_i>
 8007852:	e7e4      	b.n	800781e <_vfiprintf_r+0x1e6>
 8007854:	08008090 	.word	0x08008090
 8007858:	0800809a 	.word	0x0800809a
 800785c:	08004fa9 	.word	0x08004fa9
 8007860:	08007615 	.word	0x08007615
 8007864:	08008096 	.word	0x08008096

08007868 <__swbuf_r>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	460e      	mov	r6, r1
 800786c:	4614      	mov	r4, r2
 800786e:	4605      	mov	r5, r0
 8007870:	b118      	cbz	r0, 800787a <__swbuf_r+0x12>
 8007872:	6a03      	ldr	r3, [r0, #32]
 8007874:	b90b      	cbnz	r3, 800787a <__swbuf_r+0x12>
 8007876:	f7fd ffdb 	bl	8005830 <__sinit>
 800787a:	69a3      	ldr	r3, [r4, #24]
 800787c:	60a3      	str	r3, [r4, #8]
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	071a      	lsls	r2, r3, #28
 8007882:	d501      	bpl.n	8007888 <__swbuf_r+0x20>
 8007884:	6923      	ldr	r3, [r4, #16]
 8007886:	b943      	cbnz	r3, 800789a <__swbuf_r+0x32>
 8007888:	4621      	mov	r1, r4
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f82a 	bl	80078e4 <__swsetup_r>
 8007890:	b118      	cbz	r0, 800789a <__swbuf_r+0x32>
 8007892:	f04f 37ff 	mov.w	r7, #4294967295
 8007896:	4638      	mov	r0, r7
 8007898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	6922      	ldr	r2, [r4, #16]
 800789e:	1a98      	subs	r0, r3, r2
 80078a0:	6963      	ldr	r3, [r4, #20]
 80078a2:	b2f6      	uxtb	r6, r6
 80078a4:	4283      	cmp	r3, r0
 80078a6:	4637      	mov	r7, r6
 80078a8:	dc05      	bgt.n	80078b6 <__swbuf_r+0x4e>
 80078aa:	4621      	mov	r1, r4
 80078ac:	4628      	mov	r0, r5
 80078ae:	f7ff fd99 	bl	80073e4 <_fflush_r>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d1ed      	bne.n	8007892 <__swbuf_r+0x2a>
 80078b6:	68a3      	ldr	r3, [r4, #8]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	60a3      	str	r3, [r4, #8]
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	6022      	str	r2, [r4, #0]
 80078c2:	701e      	strb	r6, [r3, #0]
 80078c4:	6962      	ldr	r2, [r4, #20]
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d004      	beq.n	80078d6 <__swbuf_r+0x6e>
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	07db      	lsls	r3, r3, #31
 80078d0:	d5e1      	bpl.n	8007896 <__swbuf_r+0x2e>
 80078d2:	2e0a      	cmp	r6, #10
 80078d4:	d1df      	bne.n	8007896 <__swbuf_r+0x2e>
 80078d6:	4621      	mov	r1, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	f7ff fd83 	bl	80073e4 <_fflush_r>
 80078de:	2800      	cmp	r0, #0
 80078e0:	d0d9      	beq.n	8007896 <__swbuf_r+0x2e>
 80078e2:	e7d6      	b.n	8007892 <__swbuf_r+0x2a>

080078e4 <__swsetup_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4b29      	ldr	r3, [pc, #164]	@ (800798c <__swsetup_r+0xa8>)
 80078e8:	4605      	mov	r5, r0
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	460c      	mov	r4, r1
 80078ee:	b118      	cbz	r0, 80078f8 <__swsetup_r+0x14>
 80078f0:	6a03      	ldr	r3, [r0, #32]
 80078f2:	b90b      	cbnz	r3, 80078f8 <__swsetup_r+0x14>
 80078f4:	f7fd ff9c 	bl	8005830 <__sinit>
 80078f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fc:	0719      	lsls	r1, r3, #28
 80078fe:	d422      	bmi.n	8007946 <__swsetup_r+0x62>
 8007900:	06da      	lsls	r2, r3, #27
 8007902:	d407      	bmi.n	8007914 <__swsetup_r+0x30>
 8007904:	2209      	movs	r2, #9
 8007906:	602a      	str	r2, [r5, #0]
 8007908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800790c:	81a3      	strh	r3, [r4, #12]
 800790e:	f04f 30ff 	mov.w	r0, #4294967295
 8007912:	e033      	b.n	800797c <__swsetup_r+0x98>
 8007914:	0758      	lsls	r0, r3, #29
 8007916:	d512      	bpl.n	800793e <__swsetup_r+0x5a>
 8007918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800791a:	b141      	cbz	r1, 800792e <__swsetup_r+0x4a>
 800791c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007920:	4299      	cmp	r1, r3
 8007922:	d002      	beq.n	800792a <__swsetup_r+0x46>
 8007924:	4628      	mov	r0, r5
 8007926:	f7fe feff 	bl	8006728 <_free_r>
 800792a:	2300      	movs	r3, #0
 800792c:	6363      	str	r3, [r4, #52]	@ 0x34
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007934:	81a3      	strh	r3, [r4, #12]
 8007936:	2300      	movs	r3, #0
 8007938:	6063      	str	r3, [r4, #4]
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	f043 0308 	orr.w	r3, r3, #8
 8007944:	81a3      	strh	r3, [r4, #12]
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	b94b      	cbnz	r3, 800795e <__swsetup_r+0x7a>
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007954:	d003      	beq.n	800795e <__swsetup_r+0x7a>
 8007956:	4621      	mov	r1, r4
 8007958:	4628      	mov	r0, r5
 800795a:	f000 f883 	bl	8007a64 <__smakebuf_r>
 800795e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007962:	f013 0201 	ands.w	r2, r3, #1
 8007966:	d00a      	beq.n	800797e <__swsetup_r+0x9a>
 8007968:	2200      	movs	r2, #0
 800796a:	60a2      	str	r2, [r4, #8]
 800796c:	6962      	ldr	r2, [r4, #20]
 800796e:	4252      	negs	r2, r2
 8007970:	61a2      	str	r2, [r4, #24]
 8007972:	6922      	ldr	r2, [r4, #16]
 8007974:	b942      	cbnz	r2, 8007988 <__swsetup_r+0xa4>
 8007976:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800797a:	d1c5      	bne.n	8007908 <__swsetup_r+0x24>
 800797c:	bd38      	pop	{r3, r4, r5, pc}
 800797e:	0799      	lsls	r1, r3, #30
 8007980:	bf58      	it	pl
 8007982:	6962      	ldrpl	r2, [r4, #20]
 8007984:	60a2      	str	r2, [r4, #8]
 8007986:	e7f4      	b.n	8007972 <__swsetup_r+0x8e>
 8007988:	2000      	movs	r0, #0
 800798a:	e7f7      	b.n	800797c <__swsetup_r+0x98>
 800798c:	20000020 	.word	0x20000020

08007990 <_raise_r>:
 8007990:	291f      	cmp	r1, #31
 8007992:	b538      	push	{r3, r4, r5, lr}
 8007994:	4605      	mov	r5, r0
 8007996:	460c      	mov	r4, r1
 8007998:	d904      	bls.n	80079a4 <_raise_r+0x14>
 800799a:	2316      	movs	r3, #22
 800799c:	6003      	str	r3, [r0, #0]
 800799e:	f04f 30ff 	mov.w	r0, #4294967295
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079a6:	b112      	cbz	r2, 80079ae <_raise_r+0x1e>
 80079a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079ac:	b94b      	cbnz	r3, 80079c2 <_raise_r+0x32>
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f830 	bl	8007a14 <_getpid_r>
 80079b4:	4622      	mov	r2, r4
 80079b6:	4601      	mov	r1, r0
 80079b8:	4628      	mov	r0, r5
 80079ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079be:	f000 b817 	b.w	80079f0 <_kill_r>
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d00a      	beq.n	80079dc <_raise_r+0x4c>
 80079c6:	1c59      	adds	r1, r3, #1
 80079c8:	d103      	bne.n	80079d2 <_raise_r+0x42>
 80079ca:	2316      	movs	r3, #22
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	2001      	movs	r0, #1
 80079d0:	e7e7      	b.n	80079a2 <_raise_r+0x12>
 80079d2:	2100      	movs	r1, #0
 80079d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80079d8:	4620      	mov	r0, r4
 80079da:	4798      	blx	r3
 80079dc:	2000      	movs	r0, #0
 80079de:	e7e0      	b.n	80079a2 <_raise_r+0x12>

080079e0 <raise>:
 80079e0:	4b02      	ldr	r3, [pc, #8]	@ (80079ec <raise+0xc>)
 80079e2:	4601      	mov	r1, r0
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	f7ff bfd3 	b.w	8007990 <_raise_r>
 80079ea:	bf00      	nop
 80079ec:	20000020 	.word	0x20000020

080079f0 <_kill_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4d07      	ldr	r5, [pc, #28]	@ (8007a10 <_kill_r+0x20>)
 80079f4:	2300      	movs	r3, #0
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	f7fa f9c2 	bl	8001d86 <_kill>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d102      	bne.n	8007a0c <_kill_r+0x1c>
 8007a06:	682b      	ldr	r3, [r5, #0]
 8007a08:	b103      	cbz	r3, 8007a0c <_kill_r+0x1c>
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000644 	.word	0x20000644

08007a14 <_getpid_r>:
 8007a14:	f7fa b9af 	b.w	8001d76 <_getpid>

08007a18 <__swhatbuf_r>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a20:	2900      	cmp	r1, #0
 8007a22:	b096      	sub	sp, #88	@ 0x58
 8007a24:	4615      	mov	r5, r2
 8007a26:	461e      	mov	r6, r3
 8007a28:	da0d      	bge.n	8007a46 <__swhatbuf_r+0x2e>
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a30:	f04f 0100 	mov.w	r1, #0
 8007a34:	bf14      	ite	ne
 8007a36:	2340      	movne	r3, #64	@ 0x40
 8007a38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	6031      	str	r1, [r6, #0]
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	b016      	add	sp, #88	@ 0x58
 8007a44:	bd70      	pop	{r4, r5, r6, pc}
 8007a46:	466a      	mov	r2, sp
 8007a48:	f000 f848 	bl	8007adc <_fstat_r>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	dbec      	blt.n	8007a2a <__swhatbuf_r+0x12>
 8007a50:	9901      	ldr	r1, [sp, #4]
 8007a52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a5a:	4259      	negs	r1, r3
 8007a5c:	4159      	adcs	r1, r3
 8007a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a62:	e7eb      	b.n	8007a3c <__swhatbuf_r+0x24>

08007a64 <__smakebuf_r>:
 8007a64:	898b      	ldrh	r3, [r1, #12]
 8007a66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a68:	079d      	lsls	r5, r3, #30
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	d507      	bpl.n	8007a80 <__smakebuf_r+0x1c>
 8007a70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	6123      	str	r3, [r4, #16]
 8007a78:	2301      	movs	r3, #1
 8007a7a:	6163      	str	r3, [r4, #20]
 8007a7c:	b003      	add	sp, #12
 8007a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a80:	ab01      	add	r3, sp, #4
 8007a82:	466a      	mov	r2, sp
 8007a84:	f7ff ffc8 	bl	8007a18 <__swhatbuf_r>
 8007a88:	9f00      	ldr	r7, [sp, #0]
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7fe febe 	bl	8006810 <_malloc_r>
 8007a94:	b948      	cbnz	r0, 8007aaa <__smakebuf_r+0x46>
 8007a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9a:	059a      	lsls	r2, r3, #22
 8007a9c:	d4ee      	bmi.n	8007a7c <__smakebuf_r+0x18>
 8007a9e:	f023 0303 	bic.w	r3, r3, #3
 8007aa2:	f043 0302 	orr.w	r3, r3, #2
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	e7e2      	b.n	8007a70 <__smakebuf_r+0xc>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	6020      	str	r0, [r4, #0]
 8007aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ab2:	81a3      	strh	r3, [r4, #12]
 8007ab4:	9b01      	ldr	r3, [sp, #4]
 8007ab6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007aba:	b15b      	cbz	r3, 8007ad4 <__smakebuf_r+0x70>
 8007abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f000 f81d 	bl	8007b00 <_isatty_r>
 8007ac6:	b128      	cbz	r0, 8007ad4 <__smakebuf_r+0x70>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	f023 0303 	bic.w	r3, r3, #3
 8007ace:	f043 0301 	orr.w	r3, r3, #1
 8007ad2:	81a3      	strh	r3, [r4, #12]
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	431d      	orrs	r5, r3
 8007ad8:	81a5      	strh	r5, [r4, #12]
 8007ada:	e7cf      	b.n	8007a7c <__smakebuf_r+0x18>

08007adc <_fstat_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d07      	ldr	r5, [pc, #28]	@ (8007afc <_fstat_r+0x20>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	602b      	str	r3, [r5, #0]
 8007aea:	f7fa f9ac 	bl	8001e46 <_fstat>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d102      	bne.n	8007af8 <_fstat_r+0x1c>
 8007af2:	682b      	ldr	r3, [r5, #0]
 8007af4:	b103      	cbz	r3, 8007af8 <_fstat_r+0x1c>
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	bd38      	pop	{r3, r4, r5, pc}
 8007afa:	bf00      	nop
 8007afc:	20000644 	.word	0x20000644

08007b00 <_isatty_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d06      	ldr	r5, [pc, #24]	@ (8007b1c <_isatty_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7fa f9ab 	bl	8001e66 <_isatty>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_isatty_r+0x1a>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_isatty_r+0x1a>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20000644 	.word	0x20000644

08007b20 <_init>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr

08007b2c <_fini>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr
